# ::snt How do I make a height adjustable desk?
(m / make-01
      :ARG0 (ii / i)
      :ARG1 (d / desk
            :ARG1-of (a / adjust-01
                  :ARG2 (h / high-02)))
      :manner (a2 / amr-unknown))

# ::snt How can I find out why my washing machine trips the outlet?
(p / possible-01
      :ARG1 (f / find-out-03
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (t2 / trip-03
                              :ARG0 (m / machine
                                    :instrument-of (w / wash-01
                                          :ARG0 ii))
                              :ARG1 (o / outlet)))))
      :manner (a / amr-unknown))

# ::snt Should I use IRA money to pay down my student loans?
(r / recommend-01
      :ARG1 (u / use-01
            :ARG0 (ii / i)
            :ARG1 (m / money
                  :source (o / organization
                        :name (n / name
                              :op1 "IRA")))
            :ARG2 (p / pay-down-05
                  :ARG0 ii
                  :ARG1 (l / loan-01
                        :ARG2 ii
                        :mod (p2 / person
                              :ARG0-of (s / study-01)))))
      :polarity (a / amr-unknown))

# ::snt What is the best way to repair a cracked bathtub?
(w / way
      :domain (a / amr-unknown)
      :manner-of (r / repair-01
            :ARG1 (b / bathtub
                  :ARG1-of (c / crack-01)))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What's the best way to store asparagus?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (a2 / asparagus))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What are the bus (coach) connections from Thessaloniki, Greece to Tbilisi, Georgia?
(c / connect-01
      :ARG1 (b / bus)
      :ARG2 (c2 / city
            :name (n / name
                  :op1 "Thessaloniki")
            :location (c3 / country
                  :name (n2 / name
                        :op1 "Greece")))
      :ARG3 (c4 / city
            :name (n3 / name
                  :op1 "Tbilisi")
            :location (c5 / country
                  :name (n4 / name
                        :op1 "Georgia")))
      :ARG4 (a / amr-unknown))

# ::snt How can I replace a ceiling fan light pull chain?
(p / possible-01
      :ARG1 (r / replace-01
            :ARG0 (ii / i)
            :ARG1 (c / chain
                  :ARG0-of (p2 / pull-01
                        :ARG1 (l / light
                              :part-of (c2 / ceiling)
                              :mod (f / fan))))
            :manner (a / amr-unknown)))

# ::snt How can I connect additional wires to a receptacle?
(p / possible-01
      :ARG1 (c / connect-01
            :ARG0 (ii / i)
            :ARG1 (w / wire
                  :mod (a / additional))
            :ARG2 (r / receptacle))
      :manner (a2 / amr-unknown))

# ::snt What kind of socket is this?
(s / socket
      :mod (k / kind
            :mod (a / amr-unknown))
      :domain (t / this))

# ::snt What is the difference between a stock and a bond?
(d / differ-02
      :ARG1 (s / stock)
      :ARG2 (b / bond)
      :ARG3 (a / amr-unknown))

# ::snt How do I maintain a good relationship with my old boss after being promoted?
(m / maintain-01
      :ARG0 (ii / i)
      :ARG1 (r / relation-03
            :ARG0 ii
            :ARG2 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 ii
                        :ARG2 (b / boss)
                        :time (o / old)))
            :ARG1-of (g / good-02))
      :manner (a / amr-unknown)
      :time (a2 / after
            :op1 (p2 / promote-01
                  :ARG1 ii)))

# ::snt How do I keep an egg from cracking while being boiled?
(h / have-manner-91
      :ARG1 (k / keep-04
            :ARG0 (ii / i)
            :ARG1 (c / crack-02
                  :ARG1 (e / egg)
                  :time (b / boil-01
                        :ARG1 e)))
      :ARG2 (a / amr-unknown))

# ::snt How can I prepare this old exterior wall for painting?
(p / possible-01
      :ARG1 (p2 / prepare-01
            :ARG0 (ii / i)
            :ARG1 (w / wall
                  :mod (e / exterior)
                  :mod (t / this)
                  :mod (o / old))
            :ARG2 (p3 / paint-01
                  :ARG1 w))
      :manner (a / amr-unknown))

# ::snt Why is there no water in the kitchen?
(w / water
      :polarity -
      :location (k / kitchen)
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown)))

# ::snt What more can I do to improve my credit score?
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown
                  :mod (m / more))
            :purpose (ii2 / improve-01
                  :ARG0 ii
                  :ARG1 (s / score
                        :mod (c / credit-01
                              :ARG1 ii)))))

# ::snt How do I track investment performance in Quicken across rollovers?
(t / track-01
      :ARG0 (ii / i)
      :ARG1 (p / perform-02
            :ARG0 (c / company
                  :name (n / name
                        :op1 "Quicken"))
            :ARG1 (ii2 / invest-01)
            :manner (a / across
                  :op1 (r / rollover)))
      :manner (a2 / amr-unknown))

# ::snt Can I ask a company what I should wear to an interview?
(p / possible-01
      :ARG1 (a / ask-01
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG1-of (w / wear-01
                        :ARG0 ii
                        :ARG2 (ii2 / interview-01
                              :ARG1 ii)
                        :ARG1-of (r / recommend-01)))
            :ARG2 (c / company))
      :polarity (a2 / amr-unknown))

# ::snt How do you remove mold from a tent?
(r / remove-01
      :ARG0 (y / you)
      :ARG1 (m / mold)
      :ARG2 (t / tent)
      :manner (a / amr-unknown))

# ::snt U.S. income tax & charitable donations: How much is income tax reduced by donations?
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / tax-01
                  :ARG0 (c / country
                        :name (n / name
                              :op1 "U.S."))
                  :ARG3 (ii / income))
            :op2 (d / donate-01
                  :mod (c2 / charitable)))
      :snt2 (r / reduce-01
            :ARG0 (d2 / donate-01)
            :ARG1 (t2 / tax-01
                  :ARG3 ii)
            :ARG2 (a2 / amr-unknown)))

# ::snt Bar ware - What kind of glass is this?
(a / ask-01
      :ARG1 (g / glass
            :mod (k / kind
                  :mod (a2 / amr-unknown))
            :domain (t / this))
      :ARG2 (p / person
            :name (n / name
                  :op1 "Bar"
                  :op2 "H ware")))

# ::snt Would a Colombian citizen with Canadian residency need a transit visa for the UK?
(n / need-01
      :ARG0 (c / citizen
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Colombia"))
            :ARG1-of (r / reside-01
                  :ARG0 (p / person
                        :mod (c3 / country
                              :name (n3 / name
                                    :op1 "Canada")))))
      :ARG1 (v / visa
            :mod (t / transit)
            :destination (c4 / country
                  :name (n4 / name
                        :op1 "UK")))
      :polarity (a / amr-unknown))

# ::snt Do I need to apply for a UK transit visa when I have a visitor visa?
(n / need-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (a2 / apply-01
            :ARG0 ii
            :ARG1 (v / visa
                  :mod (t / transit)
                  :source (c / country
                        :name (n2 / name
                              :op1 "UK"))))
      :time (h / have-03
            :ARG0 ii
            :ARG1 (v2 / visa
                  :mod (p / person
                        :ARG0-of (v3 / visit-01)))))

# ::snt Is it possible to replace a switch with a receptacle?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (r / replace-01
            :ARG1 (s / switch)
            :ARG2 (r2 / receptacle)))

# ::snt Do I really need a redundant sump pump?
(n / need-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (p / pump
            :mod (s / sump)
            :mod (r / redundant))
      :ARG1-of (r2 / real-04))

# ::snt Can I connect two load lines to a GFCI receptacle?
(p / possible-01
      :ARG1 (c / connect-01
            :ARG0 (ii / i)
            :ARG1 (l / line
                  :quant 2
                  :mod (l2 / load))
            :ARG2 (r / receptacle
                  :mod (p2 / product
                        :name (n / name
                              :op1 "GFCI"))))
      :polarity (a / amr-unknown))

# ::snt How do I replace a broken halogen bulb in the recessed light in my bathroom?
(r / replace-01
      :ARG0 (ii / i)
      :ARG1 (b / bulb
            :mod (h / halogen)
            :ARG1-of (b2 / break-01))
      :ARG2 (l / light
            :ARG1-of (r2 / recess-01)
            :location (b3 / bathroom
                  :poss ii))
      :manner (a / amr-unknown))

# ::snt Do I need to apply for ESTA?
(n / need-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (a2 / apply-01
            :ARG0 ii
            :ARG1 (p / product
                  :name (n2 / name
                        :op1 " ESTA"))))

# ::snt How should I patch a popcorn ceiling?
(r / recommend-01
      :ARG1 (p / patch-01
            :ARG0 (ii / i)
            :ARG1 (c / ceiling
                  :mod (p2 / popcorn))
            :manner (a / amr-unknown)))

# ::snt What do I do if a professor at a foreign university doesn't respond to my emails?
(d / do-02
      :ARG0 (ii / i)
      :ARG1 (a / amr-unknown)
      :condition (r / respond-01
            :polarity -
            :ARG0 (p / professor
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (u / university
                              :mod (f / foreign))))
            :ARG1 (e / email-01
                  :ARG0 ii)))

# ::snt How can I keep my dog from barking when I don't know what he's barking at?
(p / possible-01
      :ARG1 (k / keep-04
            :ARG0 (ii / i)
            :ARG1 (d / dog
                  :poss ii)
            :ARG2 (b / bark-01
                  :ARG0 d))
      :manner (a / amr-unknown)
      :condition (k2 / know-01
            :polarity -
            :ARG0 ii
            :ARG1 (t / thing
                  :ARG2-of (b2 / bark-01
                        :ARG0 d))))

# ::snt Travelling to Romania for 4 days by Schengen visa issued by Germany?
(t / travel-01
      :ARG4 (c / country
            :name (n / name
                  :op1 "Romania"))
      :polarity (a / amr-unknown)
      :manner (v / visa
            :name (n2 / name
                  :op1 "Schengen")
            :ARG1-of (ii / issue-01
                  :ARG0 (c2 / country
                        :name (n3 / name
                              :op1 "Germany"))))
      :duration (t2 / temporal-quantity
            :quant 4
            :unit (d / day)))

# ::snt Is it ok to apply for more than one Phd student program?
(o / okay-04
      :ARG1 (a / apply-01
            :ARG1 (p / program
                  :beneficiary (p2 / person
                        :ARG0-of (s / study-01)
                        :mod (d / doctor
                              :mod (p3 / philosophy)))
                  :quant (m / more-than
                        :op1 1)))
      :polarity (a2 / amr-unknown))

# ::snt What is the professional way to follow up with a manager for project opportunity?
(w / way
      :mod (p / professional)
      :manner-of (f / follow-up-03
            :ARG1 (p2 / person
                  :ARG0-of (m / manage-01
                        :ARG1 (o / opportunity
                              :mod (p3 / project)))))
      :domain (a / amr-unknown))

# ::snt What is the best way to toast pecans?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (t / toast-01
                  :ARG1 (p / pecan))
            :domain (a / amr-unknown))
      :ARG2 (g / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt What is the best way to repair a cracked bathtub?
(w / way
      :domain (a / amr-unknown)
      :manner-of (r / repair-01
            :ARG1 (b / bathtub
                  :ARG1-of (c / crack-01)))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How do I remove paint from a wood floor?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (f / floor
            :mod (w / wood))
      :manner (a / amr-unknown))

# ::snt Why is compensation so much higher in the US than in Western Europe on average?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (h / have-degree-91
            :ARG1 (c2 / compensate-01
                  :location (c3 / country
                        :name (n / name
                              :op1 "US")))
            :ARG2 (h2 / high-02
                  :ARG1 c2)
            :ARG3 (m / more
                  :quant (m2 / much
                        :degree (s / so)))
            :ARG4 (w / world-region
                  :name (n2 / name
                        :op1 "Western"
                        :op2 "Europe")
                  :ARG1-of (a2 / average-04))))

# ::snt What could be wrong with my air conditioner?
(p / possible-01
      :ARG1 (w / wrong-02
            :ARG1 (a / amr-unknown)
            :ARG2 (t / thing
                  :ARG0-of (a2 / air-conditioner)
                  :poss (ii / i))))

# ::snt What is the significance of the cat?
(s / significant-02
      :ARG1 (c / cat)
      :ARG2 (a / amr-unknown))

# ::snt Should I let potential employers know I have a job offer?
(r / recommend-01
      :polarity (a / amr-unknown)
      :ARG1 (l / let-know-07
            :ARG0 (ii / i)
            :ARG1 (p / person
                  :ARG0-of (e / employ-01)
                  :mod (p2 / potential))
            :ARG2 (h / have-03
                  :ARG0 ii
                  :ARG1 (o / offer-01
                        :ARG1 (j / job)))))

# ::snt How do I repair water-damaged hardwood floors?
(r / repair-01
      :ARG0 (ii / i)
      :ARG1 (f / floor
            :mod (h / hardwood)
            :ARG1-of (d / damage-01
                  :ARG0 (w / water)))
      :manner (a / amr-unknown))

# ::snt What could be causing water pressure to build up after changing my under sink filter?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (b / build-up-05
                  :ARG1 (p2 / pressure
                        :mod (w / water))
                  :time (a2 / after
                        :op1 (c2 / change-01
                              :ARG0 (ii / i)
                              :ARG1 (t / thing
                                    :ARG0-of (f / filter-02
                                          :ARG2 (u / under
                                                :op1 (s / sink)))
                                    :poss ii))))))

# ::snt Where can I find a good vocabulary list?
(p / possible-01
      :ARG1 (f / find-01
            :ARG0 (ii / i)
            :ARG1 (l / list
                  :topic (v / vocabulary)
                  :ARG1-of (g / good-02))
            :location (a / amr-unknown)))

# ::snt Glue underlayment to concrete: how long does it take to cure?
(m / multi-sentence
      :snt1 (l / lay-01
            :ARG1 (u / underlay-01)
            :ARG2 (c / concrete))
      :snt2 (t / take-10
            :ARG0 (c2 / cure-01)
            :ARG1 (a / amr-unknown)))

# ::snt How can I remove a really stuck screw?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (s / screw
                  :ARG1-of (s2 / stick-01
                        :ARG1-of (r2 / real-04)))
            :manner (a / amr-unknown)))

# ::snt Is it better to request a recommendation letter in person after class or by email?
(h / have-degree-91
      :ARG1 (r / request-01
            :ARG1 (l / letter
                  :topic (r2 / recommend-01))
            :manner (o / or
                  :op1 (ii / in-person)
                  :op2 (e / email-01))
            :time (a / after
                  :op1 (c / class)))
      :ARG2 (g / good-02
            :ARG1 r)
      :ARG3 (m / more)
      :polarity (a2 / amr-unknown))

# ::snt What can I eat the night before to help me get up in the morning?
(p / possible-01
      :ARG1 (e / eat-01
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :time (b / before
                  :op1 (n / night))
            :purpose (h / help-01
                  :ARG0 a
                  :ARG1 (g / get-05
                        :ARG1 ii
                        :ARG2 (u / up)
                        :time (d / date-entity
                              :dayperiod (m / morning)))
                  :ARG2 ii)))

# ::snt What could be causing my GFCI to trip?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (t / trip-03
                  :ARG0 (t2 / thing
                        :name (n / name
                              :op1 "GI")
                        :poss (ii / i)))))

# ::snt How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch?
(c / convert-01
      :ARG0 (ii / i)
      :ARG1 (f / fan
            :location (c2 / ceiling))
      :ARG2 (s / switch
            :quant 2
            :mod (w / wall)
            :ARG1-of (s2 / separate-02))
      :ARG3 (a / and
            :op1 (f2 / fan
                  :ARG1-of (s3 / separate-02))
            :op2 (s4 / switch
                  :purpose (l / light)
                  :ARG1-of (s5 / separate-02)))
      :manner (a2 / amr-unknown))

# ::snt How long does cooked TVP keep in the fridge?
(k / keep-01
      :ARG1 (t / televisionP
            :ARG1-of (c / cook-01))
      :location (f / fridge)
      :duration (a / amr-unknown))

# ::snt How can I get my colleagues to stop interrupting me?
(p / possible-01
      :ARG1 (g / get-04
            :ARG0 (ii / i)
            :ARG1 (s / stop-01
                  :ARG0 (p2 / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 ii
                              :ARG2 (c / colleague)))
                  :ARG1 (ii2 / interrupt-01
                        :ARG0 p2
                        :ARG1 ii))
            :manner (a / amr-unknown)))

# ::snt What is the difference between assertive and non-assertive words?
(d / differ-02
      :ARG1 (a / assertive-02)
      :ARG2 (w / word
            :ARG0-of (a2 / assert-02
                  :polarity -))
      :ARG3 (a3 / amr-unknown))

# ::snt After a job interview, is it inappropriate if I want to talk to an employee in private?
(a / appropriate-02
      :polarity -
      :ARG1 (w / want-01
            :ARG0 (ii / i)
            :ARG1 (t / talk-01
                  :ARG0 ii
                  :ARG2 (p / person
                        :ARG1-of (e / employ-01))
                  :ARG1-of (p2 / private-02)))
      :ARG2 ii
      :polarity (a2 / amr-unknown)
      :time (a3 / after
            :op1 (ii2 / interview-01
                  :ARG1 ii
                  :ARG2 (j / job))))

# ::snt What if I don't have enough work sample for an interview?
(h / have-condition-91
      :ARG1 (a / amr-unknown)
      :ARG2 (h2 / have-03
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (s / sample
                  :mod (w / work-01)
                  :ARG1-of (h3 / have-quant-91
                        :ARG3 (e / enough)
                        :ARG6 (ii2 / interview-01
                              :ARG1 ii)))))

# ::snt How do you remove paint from hair?
(r / remove-01
      :ARG0 (y / you)
      :ARG1 (p / paint)
      :ARG2 (h / hair)
      :manner (a / amr-unknown))

# ::snt Is my U.S. driver's license valid in Europe?
(v / valid-02
      :ARG1 (l / license
            :mod (d / drive-01)
            :poss (ii / i)
            :mod (c / country
                  :name (n / name
                        :op1 "U.S.")))
      :polarity (a / amr-unknown)
      :location (c2 / continent
            :name (n2 / name
                  :op1 "Europe")))

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt Is it safe to leave butter at room temperature?
(s / safe-01
      :polarity (a / amr-unknown)
      :ARG1 (l / leave-14
            :ARG1 (b / butter)
            :ARG2 (t / temperature
                  :mod (r / room))))

# ::snt How do I remove paint from a wood floor?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (f / floor
            :mod (w / wood))
      :manner (a / amr-unknown))

# ::snt How do I remove paint from a wood floor?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (f / floor
            :mod (w / wood))
      :manner (a / amr-unknown))

# ::snt How do I remove paint from a wood floor?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (f / floor
            :mod (w / wood))
      :manner (a / amr-unknown))

# ::snt how to blackout a large bedroom window on a budget?
(b / blackout-06
      :ARG1 (w / window
            :mod (b2 / bedroom
                  :mod (l / large)))
      :manner (a / amr-unknown)
      :ARG1-of (b3 / budget-01))

# ::snt What language does this look like?
(l / look-02
      :ARG0 (t / this)
      :ARG1 (l2 / language
            :mod (a / amr-unknown)))

# ::snt What type of pants are good for weight lifting?
(g / good-04
      :ARG1 (p / pants
            :mod (t / type
                  :mod (a / amr-unknown)))
      :ARG2 (l / lift-01
            :ARG1 (w / weight)))

# ::snt What is the best way to clean your clothes dryer exhaust?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (c / clean-01
                  :ARG0 (y / you)
                  :ARG1 (e / exhaust
                        :source (d / dryer
                              :mod (c2 / clothes
                                    :poss y)))))
      :ARG2 (g / good-02)
      :ARG3 (m / most)
      :ARG5 w)

# ::snt What more can I do to improve my credit score?
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown
                  :mod (m / more))
            :purpose (ii2 / improve-01
                  :ARG0 ii
                  :ARG1 (s / score
                        :mod (c / credit-01
                              :ARG1 ii)))))

# ::snt How can I remove a really stuck screw?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (s / screw
                  :ARG1-of (s2 / stick-01
                        :ARG1-of (r2 / real-04)))
            :manner (a / amr-unknown)))

# ::snt What causes these chips in a cement brick wall, and how can I fix them?
(a / and
      :op1 (c / cause-01
            :ARG0 (a2 / amr-unknown)
            :ARG1 (c2 / chip
                  :mod (t / this)
                  :location (w / wall
                        :consist-of (b / brick
                              :consist-of (c3 / cement)))))
      :op2 (p / possible-01
            :ARG1 (f / fix-02
                  :ARG0 (ii / i)
                  :ARG1 c2
                  :manner a2)))

# ::snt What could be causing my toilet to back up?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (b / back-up-04
                  :ARG0 a
                  :ARG1 (t / toilet
                        :poss (ii / i)))))

# ::snt What is the difference between a Rollover IRA and a Roth IRA?
(d / differ-02
      :ARG1 (p / product
            :name (n / name
                  :op1 "Rollover"
                  :op2 "IRA"))
      :ARG2 (p2 / product
            :name (n2 / name
                  :op1 "Roth"
                  :op2 "IRA"))
      :ARG3 (a / amr-unknown))

# ::snt How to deal with the child when both the parents are not on the same page?
(d / deal-01
      :ARG2 (c / child)
      :manner (a / amr-unknown)
      :condition (b / be-located-at-91
            :polarity -
            :ARG1 (p / parent
                  :mod (b2 / both))
            :ARG2 (p2 / page
                  :ARG1-of (s / same-01))))

# ::snt How do I reconnect a ceiling fan light chain?
(r / reconnect-01
      :ARG0 (ii / i)
      :ARG1 (c / chain
            :consist-of (l / light
                  :location (c2 / ceiling))
            :mod (f / fan))
      :manner (a / amr-unknown))

# ::snt How do I pump up water pressure in my shower?
(p / pump-up-01
      :ARG0 (ii / i)
      :ARG1 (p2 / pressure
            :mod (w / water))
      :location (s / shower
            :poss ii)
      :manner (a / amr-unknown))

# ::snt How should I store eggs in the refrigerator?
(r / recommend-01
      :ARG1 (s / store-01
            :ARG0 (ii / i)
            :ARG1 (e / egg)
            :ARG2 (r2 / refrigerator))
      :manner (a / amr-unknown))

# ::snt What can I do about out of square rough opening for new windows?
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :ARG2 (o / open-01
                  :ARG1 (w / window
                        :ARG1-of (n / new-01))
                  :ARG3 (s / square)
                  :ARG1-of (r / rough-04))))

# ::snt What's the best way to store potatoes and maximize their shelf-life?
(w / way
      :domain (a / amr-unknown)
      :manner-of (a2 / and
            :op1 (s / store-01
                  :ARG1 (p / potato))
            :op2 (m / maximize-01
                  :ARG1 (s2 / shelf-life
                        :poss p)))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m2 / most)))

# ::snt How to bake a chicken?
(b / bake-01
      :ARG1 (c / chicken)
      :manner (a / amr-unknown))

# ::snt What is the best way to treat feline ringworm?
(w / way
      :manner-of (t / treat-03
            :ARG1 (d / disease
                  :name (n / name
                        :op1 "Feline"
                        :op2 " ringworm")))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What kind of spider web is this - and how do I get rid of it?
(a / and
      :op1 (w / web
            :mod w
            :mod (s / spiders))
      :domain (t / this)
      :mod (k / kind
            :mod (a2 / amr-unknown))
      :op2 (r / rid-01
            :ARG0 (ii / i)
            :ARG1 w
            :manner a2))

# ::snt What's the best way to seal around this faucet?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (s / seal-01
                  :ARG3 (a / around
                        :op1 (f / faucet
                              :mod (t / this))))
            :domain (a2 / amr-unknown))
      :ARG2 (g / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt How to remove construction adhesive from concrete?
(r / remove-01
      :ARG1 (a / adhesive
            :mod (c / construct-01))
      :ARG2 (c2 / concrete)
      :manner (a2 / amr-unknown))

# ::snt What is the difference between a stock and a bond?
(d / differ-02
      :ARG1 (s / stock)
      :ARG2 (b / bond)
      :ARG3 (a / amr-unknown))

# ::snt How do I teach my toddler to chew his food?
(t / teach-01
      :ARG0 (ii / i)
      :ARG1 (c / chew-01
            :ARG0 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 ii
                        :ARG2 (t2 / toddler)))
            :ARG1 (f / food
                  :poss p))
      :ARG2 p
      :manner (a / amr-unknown))

# ::snt What goes in a student success statement for a faculty application?
(g / go-11
      :ARG1 (a / amr-unknown)
      :ARG2 (s / state-01
            :ARG1 (s2 / succeed-01
                  :ARG0 (p / person
                        :ARG0-of (s3 / study-01)))
            :purpose (a2 / apply-01
                  :ARG2 (f / faculty))))

# ::snt What is the difference between shawarma and gyros?
(d / differ-02
      :ARG1 (s / shawarma)
      :ARG2 (g / gyros)
      :ARG3 (a / amr-unknown))

# ::snt Must I enter Europe with Schengen visa from the country where I applied?
(t / truth-value
      :polarity-of (o / obligate-01
            :ARG2 (e / enter-01
                  :ARG0 (ii / i)
                  :ARG1 (c / continent
                        :name (n / name
                              :op1 "Europe"))
                  :instrument (v / visa
                        :mod (o2 / organization
                              :name (n2 / name
                                    :op1 "Schengen")))
                  :source (c2 / country
                        :ARG1-of (a / apply-01
                              :ARG0 ii)))))

# ::snt What could be causing my toilet to back up?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (b / back-up-04
                  :ARG0 a
                  :ARG1 (t / toilet
                        :poss (ii / i)))))

# ::snt How to apply for a Schengen visa?
(t / thing
      :manner-of (a / apply-01
            :ARG1 (v / visa
                  :mod (o / organization
                        :name (n / name
                              :op1 "Schengen"))))
      :polarity (a2 / amr-unknown))

# ::snt What is the best way to apply Shellac-based primer?
(w / way
      :manner-of (a / apply-02
            :ARG1 (p / primer
                  :ARG1-of (b / base-02
                        :ARG2 (c / company
                              :name (n / name
                                    :op1 "Shellac")))))
      :domain (a2 / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How do I make soft chapattis?
(m / make-01
      :ARG0 (ii / i)
      :ARG1 (c / chapattis
            :ARG1-of (s / soft-02))
      :manner (a / amr-unknown))

# ::snt How should you respond to your teacher who cannot help you with a recommendation?
(r / recommend-01
      :ARG1 (r2 / respond-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (t / teach-01
                        :ARG2 y)
                  :ARG0-of (h / help-01
                        :ARG1 r
                        :ARG0 p
                        :ARG2 y)
                  :ARG2 y
                  :ARG1-of (p2 / possible-01
                        :polarity -)))
      :ARG2 (a / amr-unknown))

# ::snt How can I replace a ceiling fan light pull chain?
(p / possible-01
      :ARG1 (r / replace-01
            :ARG0 (ii / i)
            :ARG1 (c / chain
                  :ARG0-of (p2 / pull-01
                        :ARG1 (l / light
                              :part-of (c2 / ceiling)
                              :mod (f / fan))))
            :manner (a / amr-unknown)))

# ::snt What should I do with my credit card debt?
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :ARG2 (d2 / debt
                  :mod (c / card
                        :mod (c2 / credit))
                  :poss ii)))

# ::snt What's the best way to store asparagus?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (a2 / asparagus))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the difference between a filler word and a discourse marker?
(d / differ-02
      :ARG1 (w / word
            :mod (f / filler))
      :ARG2 (m / marker
            :mod (d2 / discourse-01))
      :ARG3 (a / amr-unknown))

# ::snt What's the best way to run a wire from inside my garage to the outside?
(w / way
      :domain (a / amr-unknown)
      :manner-of (r / run-01
            :ARG1 (w2 / wire)
            :source (ii / inside
                  :op1 (g / garage
                        :poss (ii2 / i)))
            :destination (o / outside))
      :ARG1-of (h / have-degree-91
            :ARG2 (g2 / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How can I repair my two sloping concrete slabs?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (s / slab
                  :quant 2
                  :consist-of (c / concrete)
                  :ARG1-of (s2 / slop-01)
                  :poss ii)
            :manner (a / amr-unknown)))

# ::snt Why is my furnace blowing hot air outside through a PVC pipe?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (b / blow-01
            :ARG0 (f / furnace
                  :poss (ii / i))
            :ARG1 (a2 / air
                  :ARG1-of (h / hot-05))
            :ARG2 (o / outside)
            :path (p / pipe
                  :consist-of (p2 / PVC))))

# ::snt Where can I find a good vocabulary list?
(p / possible-01
      :ARG1 (f / find-01
            :ARG0 (ii / i)
            :ARG1 (l / list
                  :topic (v / vocabulary)
                  :ARG1-of (g / good-02))
            :location (a / amr-unknown)))

# ::snt Why is my dryer taking longer to dry clothes?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (t / take-10
            :ARG0 (t2 / thing
                  :ARG0-of (d / dry-01
                        :ARG1 (c2 / clothes))
                  :poss (ii / i))
            :ARG1 (h / have-degree-91
                  :ARG1 t2
                  :ARG2 (l / long-03
                        :ARG1 t)
                  :ARG3 (m / more))))

# ::snt How do I stop my dog from jumping on me?
(s / stop-03
      :ARG0 (ii / i)
      :ARG1 (d / dog
            :poss ii)
      :ARG2 (j / jump-03
            :ARG0 d
            :destination ii)
      :manner (a / amr-unknown))

# ::snt What is this vocal technique called?
(c / call-01
      :ARG1 (t / technique
            :mod (v / vocal)
            :mod (t2 / this))
      :ARG2 (a / amr-unknown))

# ::snt How can I repair my floors' finish?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (f / finish-01
                  :ARG1 (f2 / floor
                        :poss ii))
            :manner (a / amr-unknown)))

# ::snt What are some good strength exercises for marathon runners?
(e / exercise-02
      :ARG0 (p / person
            :ARG0-of (r / run-02
                  :ARG1 (m / marathon)))
      :ARG1 (s / strong-02)
      :ARG2 (a / amr-unknown)
      :ARG1-of (g / good-02)
      :mod (s2 / some))

# ::snt What kind of socket is this?
(s / socket
      :mod (k / kind
            :mod (a / amr-unknown))
      :domain (t / this))

# ::snt How do I secure an old aluminum/glass sliding door?
(s / secure-02
      :ARG0 (ii / i)
      :ARG1 (d / door
            :ARG0-of (s2 / slide-01)
            :mod (o / old)
            :consist-of (s3 / slash
                  :op1 (a / aluminum)
                  :op2 (g / glass)))
      :manner (a2 / amr-unknown))

# ::snt What is the best way to toast pecans?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (t / toast-01
                  :ARG1 (p / pecan))
            :domain (a / amr-unknown))
      :ARG2 (g / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt How can I stop this Shower faucet leak?
(p / possible-01
      :ARG1 (s / stop-01
            :ARG0 (ii / i)
            :ARG1 (l / leak-01
                  :ARG1 (f / faucet
                        :part-of (s2 / shower))
                  :mod (t / this))
            :manner (a / amr-unknown)))

# ::snt What is the actual difference between Graduate and Undergraduate texts?
(d / differ-02
      :ARG1 (t / text
            :mod (g / graduate))
      :ARG2 (t2 / text
            :mod (g2 / graduate))
      :ARG3 (a / amr-unknown)
      :ARG1-of (a2 / actual-02))

# ::snt Should I tell prospective employer that I got a raise at my current job?
(r / recommend-01
      :ARG1 (t / tell-01
            :ARG0 (ii / i)
            :ARG1 (g / get-01
                  :ARG0 ii
                  :ARG1 (r2 / raise-01
                        :ARG2 (j / job
                              :time (c / current)
                              :poss ii)))
            :ARG2 (p / person
                  :ARG0-of (e / employ-01)
                  :mod (p2 / prospective)))
      :ARG2 ii
      :polarity (a / amr-unknown))

# ::snt Do I need to replace my hot water tank's pressure release valve?
(n / need-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (r / replace-01
            :ARG0 ii
            :ARG1 (v / valve
                  :purpose (r2 / release-01
                        :ARG1 (p / pressure))
                  :part-of (t / tank
                        :mod (w / water
                              :ARG1-of (h / hot-05))
                        :poss ii))))

# ::snt How to judge the quality of my own paper?
(j / judge-01
      :ARG0 (ii / i)
      :ARG1 (q / quality
            :poss (p / paper
                  :poss ii))
      :ARG3 (a / amr-unknown))

# ::snt Which way does the air flow through my furnace?
(f / flow-01
      :ARG1 (a / air)
      :path (f2 / furnace
            :poss (ii / i))
      :manner (a2 / amr-unknown))

# ::snt What is the difference between EFTA and the EU?
(d / differ-02
      :ARG1 (o / organization
            :name (n / name
                  :op1 "EFTA"))
      :ARG2 (o2 / organization
            :name (n2 / name
                  :op1 "EU"))
      :ARG3 (a / amr-unknown))

# ::snt Why is my washing machine making this sound?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (s / sound-01
            :ARG1 (m / machine
                  :instrument-of (w / wash-01)
                  :poss (ii / i))
            :ARG2 (t / this)))

# ::snt How can I stop my cat's playful yet aggressive behavior?
(p / possible-01
      :ARG1 (s / stop-01
            :ARG0 (ii / i)
            :ARG1 (b / behave-01
                  :ARG0 (c / cat
                        :poss ii)
                  :ARG1 (a / and
                        :op1 (p2 / playful)
                        :op2 (a2 / aggressive)))
            :manner (a3 / amr-unknown)))

# ::snt How do I convert a ceiling fan with 2 separate wall switches to a separate fan & light switch?
(c / convert-01
      :ARG0 (ii / i)
      :ARG1 (f / fan
            :location (c2 / ceiling))
      :ARG2 (s / switch
            :quant 2
            :mod (w / wall)
            :ARG1-of (s2 / separate-02))
      :ARG3 (a / and
            :op1 (f2 / fan
                  :ARG1-of (s3 / separate-02))
            :op2 (s4 / switch
                  :purpose (l / light)
                  :ARG1-of (s5 / separate-02)))
      :manner (a2 / amr-unknown))

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How do I remove paint from a wood floor?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (f / floor
            :mod (w / wood))
      :manner (a / amr-unknown))

# ::snt How can I repair a towel bar with one end ripped out of the wall?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (b / bar
                  :consist-of (t / towel))
            :manner (r2 / rip-01
                  :ARG1 (e / end
                        :quant 1)
                  :ARG2 (w / wall)))
      :manner (a / amr-unknown))

# ::snt What is the difference between a stock and a bond?
(d / differ-02
      :ARG1 (s / stock)
      :ARG2 (b / bond)
      :ARG3 (a / amr-unknown))

# ::snt How to remove a ticks on my dog?
(r / remove-01
      :ARG1 (t / tick)
      :ARG2 (d / dog
            :poss (ii / i))
      :manner (a / amr-unknown))

# ::snt How can I remove a really stuck screw?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (s / screw
                  :ARG1-of (s2 / stick-01
                        :ARG1-of (r2 / real-04)))
            :manner (a / amr-unknown)))

# ::snt Which reward / benefits credit card is the best value for the money in Canada?
(v / value-01
      :ARG1 (c / card
            :mod (a / amr-unknown)
            :instrument-of (s / slash
                  :op1 (r / reward-01)
                  :op2 (b / benefit-01))
            :mod (c2 / credit-02))
      :ARG2 (m / money)
      :ARG1-of (g / good-02
            :ARG2-of (h / have-degree-91
                  :ARG1 v
                  :ARG3 (m2 / most)))
      :location (c3 / country
            :name (n / name
                  :op1 "Canada")))

# ::snt Is it a bad writing practice to start sentences with a verb?
(p / practice-01
      :polarity (a / amr-unknown)
      :ARG1 (w / write-01)
      :ARG1-of (b / bad-07)
      :domain (s / start-01
            :ARG1 (s2 / sentence)
            :ARG2 (v / verb)))

# ::snt What is this vocal technique called?
(c / call-01
      :ARG1 (t / technique
            :mod (v / vocal)
            :mod (t2 / this))
      :ARG2 (a / amr-unknown))

# ::snt What are refereed and non-refereed journals?
(a / and
      :op1 (j / journal
            :ARG1-of (r / refere-01))
      :op2 (j2 / journal
            :ARG1-of (r2 / refere-01
                  :polarity -))
      :domain (a2 / amr-unknown))

# ::snt How do I pump up water pressure in my shower?
(p / pump-up-01
      :ARG0 (ii / i)
      :ARG1 (p2 / pressure
            :mod (w / water))
      :location (s / shower
            :poss ii)
      :manner (a / amr-unknown))

# ::snt Schengen visa for UK citizen?
(v / visa
      :mod (p / program
            :name (n / name
                  :op1 "Schengen"))
      :beneficiary (c / citizen
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "UK")))
      :polarity (a / amr-unknown))

# ::snt What is the best way to toast pecans?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (t / toast-01
                  :ARG1 (p / pecan))
            :domain (a / amr-unknown))
      :ARG2 (g / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt What can I eat the night before to help me get up in the morning?
(p / possible-01
      :ARG1 (e / eat-01
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :time (b / before
                  :op1 (n / night))
            :purpose (h / help-01
                  :ARG0 a
                  :ARG1 (g / get-05
                        :ARG1 ii
                        :ARG2 (u / up)
                        :time (d / date-entity
                              :dayperiod (m / morning)))
                  :ARG2 ii)))

# ::snt What could be wrong with my furnace?
(p / possible-01
      :ARG1 (w / wrong-02
            :ARG1 (a / amr-unknown)
            :ARG2 (f / furnace
                  :poss (ii / i))))

# ::snt What kind of socket is this?
(s / socket
      :mod (k / kind
            :mod (a / amr-unknown))
      :domain (t / this))

# ::snt What does the term "Out of the Furnace" refer to?
(r / refer-01
      :ARG1 (a / amr-unknown)
      :ARG2 (t / term
            :mod (o / out-06
                  :ARG2 (f / furniture))))

# ::snt How can I prepare this old exterior wall for painting?
(p / possible-01
      :ARG1 (p2 / prepare-01
            :ARG0 (ii / i)
            :ARG1 (w / wall
                  :mod (e / exterior)
                  :mod (t / this)
                  :mod (o / old))
            :ARG2 (p3 / paint-01
                  :ARG1 w))
      :manner (a / amr-unknown))

# ::snt Which part of the GRE is more important to admissions committees?
(h / have-degree-91
      :ARG1 (a / amr-unknown
            :part-of (t / thing
                  :name (n / name
                        :op1 "GRE")))
      :ARG2 (ii / important-01
            :ARG1 a
            :ARG2 (c / committee
                  :ARG0-of (a2 / admit-02)))
      :ARG3 (m / more))

# ::snt How do you teach a toddler not to share?
(t / teach-01
      :ARG0 (y / you)
      :ARG1 (s / share-01
            :polarity -
            :ARG0 (t2 / toddler))
      :ARG2 t2
      :manner (a / amr-unknown))

# ::snt What was the meaning of "21 grams"?
(m / mean-01
      :ARG1 (m2 / mass-quantity
            :quant 21
            :unit (g / gram))
      :ARG2 (a / amr-unknown))

# ::snt What is the difference between shawarma and gyros?
(d / differ-02
      :ARG1 (s / shawarma)
      :ARG2 (g / gyros)
      :ARG3 (a / amr-unknown))

# ::snt What is the significance of the cat?
(s / significant-02
      :ARG1 (c / cat)
      :ARG2 (a / amr-unknown))

# ::snt How long is the life of a shot of espresso?
(l / last-01
      :ARG1 (s / shot
            :mod (c / coffee))
      :ARG2 (a / amr-unknown))

# ::snt What is the best way to learn finger-picking on an acoustic guitar?
(w / way
      :domain (a / amr-unknown)
      :manner-of (l / learn-01
            :ARG1 (p / pick-01
                  :ARG1 (f / finger)
                  :ARG2 (g / guitar
                        :mod (a2 / acoustic))))
      :ARG1-of (h / have-degree-91
            :ARG2 (g2 / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How can I get rid of fleas?
(p / possible-01
      :ARG1 (r / rid-01
            :ARG0 (ii / i)
            :ARG1 (f / flea)
            :manner (a / amr-unknown)))

# ::snt Is it possible to do a Master's in Mathematics after a Bachelor's in Economics?
(p / possible-01
      :ARG1 (d / do-02
            :ARG1 (m / master-01
                  :ARG1 (m2 / mathematics))
            :time (a / after
                  :op1 (p2 / program
                        :name (n / name
                              :op1 "Bachelor's"
                              :op2 "in"
                              :op3 "Economics"))))
      :polarity (a2 / amr-unknown))

# ::snt Should I switch to third person or continue in first person?
(r / recommend-01
      :ARG1 (a / amr-choice
            :op1 (s / switch-01
                  :ARG1 (ii / i)
                  :ARG2 (p / person
                        :ord (o / ordinal-entity
                              :value 3)))
            :op2 (c / continue-01
                  :ARG1 ii
                  :manner (p2 / person
                        :ord (o2 / ordinal-entity
                              :value 1)))))

# ::snt How do I troubleshoot my electric oven?
(t / troubleshoot-01
      :ARG0 (ii / i)
      :ARG1 (o / oven
            :mod (e / electric)
            :poss ii)
      :manner (a / amr-unknown))

# ::snt How can I tell whether a mathematics journal seems reputable?
(p / possible-01
      :ARG1 (t / tell-02
            :ARG0 (ii / i)
            :ARG1 (t2 / truth-value
                  :polarity-of (r / repute-01
                        :ARG1 (j / journal
                              :topic (m / mathematics))
                        :ARG1-of (s / seem-01))))
      :manner (a / amr-unknown))

# ::snt Is there a way to find out if I need a transit visa for a layover in the UK?
(w / way
      :polarity (a / amr-unknown)
      :manner-of (f / find-out-03
            :ARG1 (t / truth-value
                  :polarity-of (n / need-01
                        :ARG0 (ii / i)
                        :ARG1 (v / visa
                              :mod (t2 / transit))
                        :purpose (l / layover
                              :location (c / country
                                    :name (n2 / name
                                          :op1 "UK")))))))

# ::snt How can I help my dog adjust to a move?
(p / possible-01
      :ARG1 (h / help-01
            :ARG0 (ii / i)
            :ARG1 (a / adjust-01
                  :ARG0 (d / dog
                        :poss ii)
                  :ARG1 (m / move-01
                        :ARG1 d))
            :ARG2 d)
      :manner (a2 / amr-unknown))

# ::snt How long does cooked TVP keep in the fridge?
(k / keep-01
      :ARG1 (t / televisionP
            :ARG1-of (c / cook-01))
      :location (f / fridge)
      :duration (a / amr-unknown))

# ::snt Is it appropriate to call a professor for a recommendation on the weekend?
(a / appropriate-02
      :polarity (a2 / amr-unknown)
      :ARG1 (c / call-02
            :ARG1 (p / professor)
            :purpose (r / recommend-01
                  :ARG0 p)
            :time (w / weekend)))

# ::snt How do I pump up water pressure in my shower?
(p / pump-up-01
      :ARG0 (ii / i)
      :ARG1 (p2 / pressure
            :mod (w / water))
      :location (s / shower
            :poss ii)
      :manner (a / amr-unknown))

# ::snt What is the significance of the cat?
(s / significant-02
      :ARG1 (c / cat)
      :ARG2 (a / amr-unknown))

# ::snt What can I do to fix store-bought mayonnaise that split?
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :ARG2 (f / fix-02
                  :ARG0 ii
                  :ARG1 (m / mayonnaise
                        :ARG1-of (b / buy-01
                              :ARG0 (s / store))
                        :ARG1-of (s2 / split-01)))))

# ::snt How can I stop my pie from burning?
(p / possible-01
      :ARG1 (s / stop-03
            :ARG0 (ii / i)
            :ARG1 (b / burn-01
                  :ARG1 (p2 / pie
                        :poss ii))
            :ARG2 (a / amr-unknown)))

# ::snt How can I work out how valuable I am to my boss and company?
(p / possible-01
      :ARG1 (w / work-out-02
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :degree-of (v / value-02
                        :ARG0 ii
                        :ARG1 (a / and
                              :op1 (p2 / person
                                    :ARG0-of (h / have-rel-role-91
                                          :ARG1 ii
                                          :ARG2 (b / boss)))
                              :op2 (c / company
                                    :poss ii))))
            :manner (a2 / amr-unknown)))

# ::snt Why do you need to peel peaches to can them?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (n / need-01
            :ARG0 (y / you)
            :ARG1 (p / peel-01
                  :ARG0 y
                  :ARG1 (p2 / peach)
                  :purpose (c2 / can-01
                        :ARG0 y
                        :ARG1 p2))))

# ::snt How do I increase the height of a sliding glass door lock?
(ii / increase-01
      :ARG0 (ii2 / i)
      :ARG1 (h / high-02
            :ARG1 (l / lock-01
                  :ARG1 (d / door
                        :part (g / glass)
                        :ARG0-of (s / slide-01))))
      :manner (a / amr-unknown))

# ::snt What does it mean by a "research university"?
(m / mean-01
      :ARG1 (ii / it)
      :ARG2 (u / university
            :ARG0-of (r / research-01))
      :ARG3 (a / amr-unknown))

# ::snt How do I clean a very dirty refrigerator?
(c / clean-01
      :ARG0 (ii / i)
      :ARG1 (r / refrigerator
            :ARG1-of (d / dirty-02
                  :degree (v / very)))
      :manner (a / amr-unknown))

# ::snt How to apply for a Schengen visa?
(t / thing
      :manner-of (a / apply-01
            :ARG1 (v / visa
                  :mod (o / organization
                        :name (n / name
                              :op1 "Schengen"))))
      :polarity (a2 / amr-unknown))

# ::snt How do I replace a broken halogen bulb in the recessed light in my bathroom?
(r / replace-01
      :ARG0 (ii / i)
      :ARG1 (b / bulb
            :mod (h / halogen)
            :ARG1-of (b2 / break-01))
      :ARG2 (l / light
            :ARG1-of (r2 / recess-01)
            :location (b3 / bathroom
                  :poss ii))
      :manner (a / amr-unknown))

# ::snt Should I negotiate if I'm offered more than what I initially asked for?
(r / recommend-01
      :polarity (a / amr-unknown)
      :ARG1 (n / negotiate-01
            :ARG0 (ii / i))
      :condition (o / offer-01
            :ARG1 (t / thing
                  :ARG1-of (h / have-quant-91
                        :ARG3 (m / more)
                        :ARG4 (t2 / thing
                              :ARG1-of (a2 / ask-02
                                    :ARG0 ii
                                    :time (ii2 / initial)))))
            :ARG3 ii))

# ::snt How can I be sure my water softener is working?
(p / possible-01
      :ARG1 (s / sure-02
            :ARG0 (ii / i)
            :ARG1 (w / work-09
                  :ARG1 (t / thing
                        :ARG0-of (s2 / soften-01
                              :ARG1 (w2 / water))
                        :poss ii)))
      :manner (a / amr-unknown))

# ::snt How do I wire a bathroom exhaust fan/light to two switches?
(w / wire-02
      :ARG0 (ii / i)
      :ARG1 (s / slash
            :op1 (f / fan
                  :mod (e / exhaust)
                  :part-of (b / bathroom))
            :op2 (l / light
                  :part-of b))
      :ARG2 (s2 / switch
            :quant 2)
      :manner (a / amr-unknown))

# ::snt Is it acceptable as referee to contact an author on a paper you review?
(p / possible-01
      :ARG1 (a / accept-01
            :ARG1 (c / contact-01
                  :ARG0 (p2 / person
                        :ARG0-of (r / referee-01))
                  :ARG1 (p3 / person
                        :ARG0-of (a2 / author-01))
                  :location (p4 / paper
                        :ARG1-of (r2 / review-01
                              :ARG0 (y / you)))))
      :polarity (a3 / amr-unknown))

# ::snt What kind of spider web is this - and how do I get rid of it?
(a / and
      :op1 (w / web
            :mod w
            :mod (s / spiders))
      :domain (t / this)
      :mod (k / kind
            :mod (a2 / amr-unknown))
      :op2 (r / rid-01
            :ARG0 (ii / i)
            :ARG1 w
            :manner a2))

# ::snt How should I cite a screenshot in APA style for my student paper?
(r / recommend-01
      :ARG1 (c / cite-01
            :ARG0 (ii / i)
            :ARG1 (s / screenshot
                  :manner (s2 / style
                        :mod (p / publication
                              :name (n / name
                                    :op1 "APA"))))
            :ARG2 (p2 / paper
                  :poss ii
                  :mod (p3 / person
                        :ARG0-of (s3 / study-01))))
      :manner (a / amr-unknown))

# ::snt What is a good solo to learn in the Dorian mode?
(g / good-02
      :ARG1 (s / solo
            :domain (a / amr-unknown)
            :ARG1-of (l / learn-01
                  :manner (m / mode
                        :mod (b / book
                              :name (n / name
                                    :op1 "Dorian"))))))

# ::snt How do I cap a T junction on a roof ridge?
(c / cap-01
      :ARG0 (ii / i)
      :ARG1 (j / junction
            :mod (t / t))
      :ARG2 (r / ridge
            :mod (r2 / roof))
      :manner (a / amr-unknown))

# ::snt How do you teach a toddler not to share?
(t / teach-01
      :ARG0 (y / you)
      :ARG1 (s / share-01
            :polarity -
            :ARG0 (t2 / toddler))
      :ARG2 t2
      :manner (a / amr-unknown))

# ::snt Why doesn't my cat lick me?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (l / lick-01
            :polarity -
            :ARG0 (c2 / cat
                  :poss (ii / i))
            :ARG1 ii))

# ::snt How do I stop my dog from jumping on me?
(s / stop-03
      :ARG0 (ii / i)
      :ARG1 (d / dog
            :poss ii)
      :ARG2 (j / jump-03
            :ARG0 d
            :destination ii)
      :manner (a / amr-unknown))

# ::snt How to make a strong mug of filter coffee without any Coffee machine?
(m / make-01
      :ARG1 (m2 / mug
            :quant-of (c / coffee
                  :ARG0-of (f / filter-02))
            :ARG1-of (s / strong-02))
      :manner (h / have-03
            :polarity -
            :ARG0 (m3 / machine
                  :mod (c2 / coffee)
                  :mod (a / any))
            :ARG1 c)
      :manner (a2 / amr-unknown))

# ::snt How do I repair this broken pipe?
(r / repair-01
      :ARG0 (ii / i)
      :ARG1 (p / pipe
            :ARG1-of (b / break-01)
            :mod (t / this))
      :manner (a / amr-unknown))

# ::snt What are the types of Guitar available and what are the pros and cons of each?
(a / and
      :op1 (a2 / available-02
            :ARG2 (t / type
                  :mod (g / guitar)))
      :op2 (a3 / and
            :op1 (p / pro
                  :domain (e / each))
            :op2 (c / con
                  :domain e))
      :domain (a4 / amr-unknown))

# ::snt What type of lag bolts should I use for a deck?
(r / recommend-01
      :ARG1 (u / use-01
            :ARG0 (ii / i)
            :ARG1 (b / bolt
                  :mod (l / lag)
                  :mod (t / type
                        :mod (a / amr-unknown)))
            :ARG2 (d / deck)))

# ::snt How do I paint art onto a wall?
(p / paint-01
      :ARG0 (ii / i)
      :ARG1 (a / art)
      :ARG2 (w / wall)
      :manner (a2 / amr-unknown))

# ::snt What's the best way to introduce a chinchilla to a household with cats?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (ii / introduce-01
                  :ARG1 (c / chinchilla)
                  :ARG2 (h2 / household
                        :ARG0-of (h3 / have-03
                              :ARG1 (c2 / cat)))))
      :ARG2 (g / good-02)
      :ARG3 (m / most)
      :ARG5 w
      :domain (a / amr-unknown))

# ::snt What's the best way to store potatoes and maximize their shelf-life?
(w / way
      :domain (a / amr-unknown)
      :manner-of (a2 / and
            :op1 (s / store-01
                  :ARG1 (p / potato))
            :op2 (m / maximize-01
                  :ARG1 (s2 / shelf-life
                        :poss p)))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m2 / most)))

# ::snt How do I fix a hole/gap between my shower tile and the dry wall next to it?
(f / fix-02
      :ARG0 (ii / i)
      :ARG1 (s / slash
            :op1 (h / hole)
            :op2 (g / gap))
      :ARG2 (b / between
            :op1 (t / tile
                  :purpose (s2 / shower-01)
                  :poss ii)
            :op2 (w / wall
                  :ARG1-of (d / dry-08)
                  :location (n / next-to
                        :op1 t)))
      :manner (a / amr-unknown))

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What does this tablature notation mean?
(m / mean-01
      :ARG1 (n / notation
            :mod (t / tablature)
            :mod (t2 / this))
      :ARG2 (a / amr-unknown))

# ::snt How can I get rid of fleas?
(p / possible-01
      :ARG1 (r / rid-01
            :ARG0 (ii / i)
            :ARG1 (f / flea)
            :manner (a / amr-unknown)))

# ::snt How can I add a GFCI receptacle on a circuit with split receptacles?
(p / possible-01
      :ARG1 (a / add-02
            :ARG0 (ii / i)
            :ARG1 (r / receptacle
                  :mod (p2 / product
                        :name (n / name
                              :op1 "GFCI")))
            :ARG2 (c / circuit
                  :ARG0-of (h / have-03
                        :ARG1 (r2 / receptacle
                              :ARG1-of (s / split-01)))))
      :manner (a2 / amr-unknown))

# ::snt What does it mean to write a song in a certain key?
(m / mean-01
      :ARG1 (w / write-01
            :ARG1 (s / song)
            :manner (m2 / music-key
                  :mod (c / certain)))
      :ARG2 (a / amr-unknown))

# ::snt What is a good solo to learn in the Dorian mode?
(g / good-02
      :ARG1 (s / solo
            :domain (a / amr-unknown)
            :ARG1-of (l / learn-01
                  :manner (m / mode
                        :mod (b / book
                              :name (n / name
                                    :op1 "Dorian"))))))

# ::snt Why isn't the switch working to turn off my ceiling lamp after I replaced a fan w/light?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (w / work-09
            :polarity -
            :ARG1 (s / switch)
            :ARG2 (t / turn-off-07
                  :ARG0 s
                  :ARG1 (l / lamp
                        :location (c2 / ceiling)
                        :poss (ii / i))
                  :time (a2 / after
                        :op1 (r / replace-01
                              :ARG0 ii
                              :ARG1 (f / fan
                                    :mod (w2 / w)))))))

# ::snt How long should I wait between grout application and sealant?
(r / recommend-01
      :ARG1 (w / wait-01
            :ARG1 (ii / i)
            :ARG2 (b / between
                  :op1 (a / apply-01
                        :ARG1 (g / grout))
                  :op2 (s / sealant))
            :duration (a2 / amr-unknown)))

# ::snt What is the difference between a stock and a bond?
(d / differ-02
      :ARG1 (s / stock)
      :ARG2 (b / bond)
      :ARG3 (a / amr-unknown))

# ::snt How do I remove paint from a wood floor?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (f / floor
            :mod (w / wood))
      :manner (a / amr-unknown))

# ::snt How does Paying credit card in full VS paying with interest will affect your credit score?
(a / affect-01
      :ARG0 (c / contrast-01
            :ARG1 (p / pay-01
                  :manner (c2 / card
                        :mod (c3 / credit-02))
                  :ARG1-of (f / full-09))
            :ARG2 (p2 / pay-01
                  :manner (ii / interest)))
      :ARG1 (s / score
            :mod c3)
      :manner (a2 / amr-unknown))

# ::snt What is the difference between mono and stereo?
(d / differ-02
      :ARG1 (s / stereo)
      :ARG2 (s2 / stereo)
      :ARG3 (a / amr-unknown))

# ::snt What is the best way to store my sleeping bag for long periods of time?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (s / store-01
                  :ARG1 (b / bag
                        :purpose (s2 / sleep-01
                              :ARG0 (ii / i)))
                  :duration (p / period
                        :ARG1-of (l / long-03)))
            :domain (a / amr-unknown))
      :ARG2 (g / good-02)
      :ARG3 (m / most))

# ::snt How long can you keep chocolate in the freezer?
(p / possible-01
      :ARG1 (k / keep-01
            :ARG0 (y / you)
            :ARG1 (c / chocolate)
            :location (f / freezer))
      :duration (a / amr-unknown))

# ::snt Should I contact a PhD student or his supervisor for potential collaboration?
(r / recommend-01
      :polarity (a / amr-unknown)
      :ARG1 (c / contact-01
            :ARG0 (ii / i)
            :ARG1 (o / or
                  :op1 (p / person
                        :ARG0-of (s / study-01
                              :mod (p2 / philosophy)))
                  :op2 (p3 / person
                        :ARG0-of (s2 / supervise-01
                              :ARG1 p)))
            :ARG2 (c2 / collaborate-01
                  :mod (p4 / potential)))
      :ARG2 ii)

# ::snt How to make good coffee in a Moka pot?
(t / thing
      :polarity (a / amr-unknown)
      :manner-of (m / make-01
            :ARG1 (c / coffee
                  :ARG1-of (g / good-02))
            :instrument (p / pot
                  :mod (p2 / product
                        :name (n / name
                              :op1 "Moka")))))

# ::snt How do I prepare this porous interior wall for paint?
(p / prepare-01
      :ARG0 (ii / i)
      :ARG1 (w / wall
            :mod (ii2 / interior)
            :mod (p2 / pore)
            :mod (t / this))
      :ARG2 (p3 / paint)
      :manner (a / amr-unknown))

# ::snt What could be causing my GFCI to trip?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (t / trip-03
                  :ARG0 (t2 / thing
                        :name (n / name
                              :op1 "GI")
                        :poss (ii / i)))))

# ::snt How do I prepare this porous interior wall for paint?
(p / prepare-01
      :ARG0 (ii / i)
      :ARG1 (w / wall
            :mod (ii2 / interior)
            :mod (p2 / pore)
            :mod (t / this))
      :ARG2 (p3 / paint)
      :manner (a / amr-unknown))

# ::snt What could be wrong with my furnace?
(p / possible-01
      :ARG1 (w / wrong-02
            :ARG1 (a / amr-unknown)
            :ARG2 (f / furnace
                  :poss (ii / i))))

# ::snt "It would be a mistake to underestimate her.
(m / mistake-02
      :ARG1 (u / underestimate-01
            :ARG1 (s / she)))

# ::snt The choice of operators is unfortunately miserable and is limited, in most cases, to radio tubes.
(a / and
      :op1 (m / miserable
            :domain (c / choose-01
                  :ARG1 (p / person
                        :ARG0-of (o / operate-01)))
            :ARG2-of (f / fortunate-01
                  :polarity -))
      :op2 (l / limit-01
            :ARG1 c
            :ARG2 (t / tube
                  :mod (r / radio))
            :mod (c2 / case-04
                  :quant (m2 / most))))

# ::snt And perhaps we will cease to call ourselves more expensive than the rest of Europe.
(a / and
      :op2 (p / possible-01
            :ARG1 (c / cease-01
                  :ARG1 (c2 / call-01
                        :ARG0 (w / we)
                        :ARG1 w
                        :ARG2 (e / expensive
                              :ARG2-of (h / have-degree-91
                                    :ARG1 w
                                    :ARG3 (m / more)
                                    :ARG4 (r / rest
                                          :part-of (c3 / continent
                                                :name (n / name
                                                      :op1 "Europe")))))))))

# ::snt For nearly 18 years, the space borehole "Ulysses" steals in the area.
(s / steal-01
      :ARG0 (b / borehole
            :name (n / name
                  :op1 "Ulysses")
            :mod (s2 / space))
      :location (a / area)
      :duration (n2 / nearly
            :op1 (t / temporal-quantity
                  :quant 18
                  :unit (y / year))))

# ::snt The foundation Esély Budapestért Alapítvány, at the request of the grouping of Fiatal Baloldal - Ifjú Szocialisták, has established a bill on the order of the Foundation has Harmadik Együtt Évezredért, for a total of four million HUF.
(e / establish-01
      :ARG0 (f / foundation
            :name (n / name
                  :op1 "Es"
                  :op2 "Hungary"
                  :op3 "ért"
                  :op4 "Alapítvány"))
      :ARG1 (b / bill
            :ARG1-of (o / order-03
                  :ARG0 (o2 / organization
                        :name (n2 / name
                              :op1 "Harmadik"
                              :op2 "Együtt"
                              :op3 "Evezred"
                              :op4 "HUF")))
            :ARG1-of (t / total-01
                  :ARG2 4000000))
      :ARG1-of (c / cause-01
            :ARG0 (r / request-01
                  :ARG0 (g / group-01
                        :ARG1 o2
                        :name (n3 / name
                              :op1 "Fiatal"
                              :op2 "Baloldal"
                              :op3 "Ifjú"
                              :op4 "Szocialist"
                              :op5 "Ak")))))

# ::snt With the collapse of the investment bank Lehman Brothers two weeks ago, the allocation of appropriations between banks has again expressed constant significantly, the banks that have accumulated their liquidity.
(e / express-01
      :ARG0 (a / allocate-01
            :ARG0 (b / bank)
            :ARG1 (t / thing
                  :ARG1-of (a2 / appropriate-01))
            :ARG2 (b2 / bank
                  :ARG0-of (a3 / accumulate-01
                        :ARG1 (l / liquidity
                              :poss b2))))
      :ARG1 (c / constant)
      :ARG1-of (s / significant-02)
      :mod (a4 / again)
      :ARG1-of (c2 / cause-01
            :ARG0 (c3 / collapse-01
                  :ARG1 (b3 / bank
                        :name (n / name
                              :op1 "Lehman"
                              :op2 "Brothers")
                        :mod (ii / invest-01))
                  :time (b4 / before
                        :op1 (n2 / now)
                        :quant (t2 / temporal-quantity
                              :quant 2
                              :unit (w / week))))))

# ::snt It is true, I look forward to leave.
(t / true-01
      :ARG1 (l / look-forward-03
            :ARG0 (ii / i)
            :ARG1 (l2 / leave-11
                  :ARG0 ii)))

# ::snt Renièrent legislators and supports the call to the project of President George Bush.
(a / and
      :op1 (p / person
            :ARG0-of (l / legislate-01)
            :ARG1-of (r / radical-02))
      :op2 (s / support-01
            :ARG0 p
            :ARG1 (c / call-03
                  :ARG1 (p2 / project
                        :poss (p3 / person
                              :name (n / name
                                    :op1 "George"
                                    :op2 "Bush")
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (p4 / president)))))))

# ::snt Moreover, if right side of Naomi fascinates me.
(a / and
      :op2 (h / have-condition-91
            :ARG2 (f / fascinate-01
                  :ARG0 (s / side
                        :ARG1-of (r / right-04)
                        :part-of (p / person
                              :name (n / name
                                    :op1 "Naomi")))
                  :ARG1 (ii / i))))

# ::snt The interview - blood become sure again
(b / become-01
      :ARG1 (b2 / blood)
      :ARG2 (s / sure-02
            :ARG1 b2)
      :time (ii / interview-01)
      :mod (a / again))

# ::snt We must be constantly vigilant ", continued Dre Décary before stressing that on top of security of supply, Héma-Quebec must also provide an adequate supply.
(c / continue-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Dre"
                  :op2 "D'Cary"))
      :ARG1 (o / obligate-01
            :ARG2 (v / vigilant-01
                  :ARG0 (w / we)
                  :frequency (c2 / constant)))
      :time (b / before
            :op1 (s / stress-01
                  :ARG0 p
                  :ARG1 (o2 / obligate-01
                        :ARG2 (p2 / provide-01
                              :ARG0 (p3 / province
                                    :name (n2 / name
                                          :op1 "Héma-Quebec"))
                              :ARG1 (t / thing
                                    :ARG1-of (s2 / supply-01)
                                    :mod (a / adequate))
                              :mod (a2 / also))
                        :prep-in-addition-to (s3 / secure-02
                              :ARG1 (t2 / thing
                                    :ARG1-of (s4 / supply-01)))))))

# ::snt This isn't necessarily bad, but if they do move you it would be better if they gave you everything (including the electronic chips for the race)
(h / have-concession-91
      :ARG1 (g / good-02
            :ARG1 (g2 / give-01
                  :ARG0 (t / they)
                  :ARG1 (e / everything
                        :ARG2-of (ii / include-01
                              :ARG1 (c / chip
                                    :mod (e2 / electronic)
                                    :purpose (r / race-02))))
                  :ARG2 (y / you))
            :condition (m / move-01
                  :ARG0 t
                  :ARG1 y))
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (b / bad-07
                  :ARG1 (t2 / this))))

# ::snt All depends on it, "he says.
(d / depend-01
      :ARG0 (a / all)
      :ARG1 (ii / it)
      :ARG1-of (s / say-01
            :ARG0 (h / he)))

# ::snt The installation in all the institutions of the Presidency of the Council is now complete with the Palais Chigi.
(c / complete-01
      :ARG1 (ii / install-01
            :ARG2 (ii2 / institution
                  :mod (a / all)
                  :part-of (p / presidency
                        :part-of (o / organization
                              :name (n / name
                                    :op1 "Council")))))
      :ARG2 (p2 / palace
            :name (n2 / name
                  :op1 "Palais"
                  :op2 "Chigi"))
      :time (n3 / now))

# ::snt It was the biggest loss of points in the space of a day in history.
(l / lose-02
      :ARG1 (p / point)
      :ARG1-of (h / have-degree-91
            :ARG2 (b / big)
            :ARG3 (m / most))
      :time (s / space-01
            :ARG1 (t / temporal-quantity
                  :quant 1
                  :unit (d / day))
            :ARG2 (h2 / history)))

# ::snt We have already led the negotiations about that possibility several times with all the Czech mobile operators.
(l / lead-02
      :ARG0 (w / we)
      :ARG1 (n / negotiate-01
            :ARG0 w
            :ARG1 (c / company
                  :ARG0-of (o / operate-01
                        :ARG1 (m / mobile))
                  :mod (c2 / country
                        :name (n2 / name
                              :op1 "Czech"))
                  :mod (a / all))
            :ARG2 (t / that
                  :ARG1-of (p / possible-01)))
      :time (a2 / already)
      :frequency (s / several))

# ::snt But given the attitude of mobile operators that are, the indifference of the Czech regulators is disconcerting.
(c / contrast-01
      :ARG2 (d / disconcert-01
            :ARG0 (ii / indifferent-01
                  :ARG1 (o / organization
                        :ARG0-of (r / regulate-01)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech"
                                    :op2 "Union")))
                  :ARG2 (o2 / operate-01
                        :ARG1-of (m / mobile-02)))
            :ARG1-of (c3 / cause-01
                  :ARG0 (a / attitude
                        :poss o2))))

# ::snt The sexes have imposed a ban on Glitter six months after he had spoken to the authorities who have under control, its intention to go to Spain from France.
(ii / impose-01
      :ARG0 (s / sex)
      :ARG1 (b / ban-01
            :ARG0 s
            :ARG1 (p / product
                  :name (n / name
                        :op1 "Glitter")))
      :time (a / after
            :op1 (s2 / speak-01
                  :ARG0 (h / he)
                  :ARG2 (a2 / authority
                        :ARG1-of (c / control-01))))
      :time (ii2 / intend-01
            :ARG0 p
            :ARG1 (g / go-01
                  :ARG1 p
                  :ARG3 (c2 / country
                        :name (n2 / name
                              :op1 "Spain"))
                  :source (c3 / country
                        :name (n3 / name
                              :op1 "France"))))
      :duration (t / temporal-quantity
            :quant 6
            :unit (m / month)))

# ::snt They say so much about it, I do know, many things are not true.
(a / and
      :op1 (s / say-01
            :ARG0 (t / they)
            :ARG1 (m / much
                  :degree (s2 / so))
            :ARG3 (ii / it))
      :op2 (k / know-01
            :ARG0 (ii2 / i)
            :ARG1 (t2 / true-01
                  :polarity -
                  :ARG1 (t3 / thing
                        :quant (m2 / many)))))

# ::snt The sum, however, must not be paid at once, but in installments.
(c / contrast-01
      :ARG2 c
      :ARG1 (o / obligate-01
            :ARG2 (p / pay-01
                  :polarity -
                  :ARG1 (s / sum)
                  :time (a / at-once-01)))
      :ARG2 (o2 / obligate-01
            :ARG2 (p2 / pay-01
                  :ARG1 s
                  :manner (ii / installment))))

# ::snt The symptoms of hepatitis A appear two to three weeks after the consumption of food contaminated, in general, accompanied by a bad state general, of weakness, upset stomach and nausea.
(a / appear-01
      :ARG1 (s / symptom
            :poss (d / disease
                  :name (n / name
                        :op1 "Hepatitis"
                        :op2 "A")))
      :time (a2 / after
            :op1 (c / consume-01
                  :ARG1 (f / food
                        :ARG1-of (c2 / contaminate-01))
                  :ARG1-of (g / general-02))
            :ARG1-of (a3 / accompany-01
                  :ARG0 (s2 / state
                        :ARG1-of (b / bad-07)
                        :ARG1-of (g2 / general-02)
                        :consist-of (a4 / and
                              :op1 (w / weak-02)
                              :op2 (s3 / stomach
                                    :ARG1-of (u / upset-01))
                              :op3 (n2 / nausea))))
            :quant (b2 / between
                  :op1 (t / temporal-quantity
                        :quant 2
                        :unit (w2 / week))
                  :op2 (t2 / temporal-quantity
                        :quant 3
                        :unit (w3 / week)))))

# ::snt This sentence was spoken by the actress Sally Field, who has worked with him in 'Absence of Malice ", and illustrates the despair of American cinema, and America in general, faced with the striking idea that Newman is no longer in the world.
(a / and
      :op1 (s / speak-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Sally"
                        :op2 "Field")
                  :ARG0-of (a2 / act-01)
                  :ARG0-of (w / work-01
                        :ARG3 (h / he)
                        :ARG4 w
                        :ARG0 p
                        :ARG1 (f / film
                              :name (n2 / name
                                    :op1 "Absence"
                                    :op2 "of"
                                    :op3 "Malice")))))
      :ARG1 (s2 / sentence
            :mod (t / this))
      :op2 (ii / illustrate-01
            :ARG0 s2
            :ARG1 (d / despair-01
                  :ARG0 (a3 / and
                        :op1 (c / cinema
                              :mod (c2 / country
                                    :name (n3 / name
                                          :op1 "America")))
                        :op2 c2
                        :ARG1-of (g / general-02))
                  :ARG0-of (f2 / face-01
                        :ARG1 (ii2 / idea
                              :ARG0-of (s3 / strike-01)
                              :topic (b / be-located-at-91
                                    :ARG1 (p2 / person
                                          :name (n4 / name
                                                :op1 "Newt"))
                                    :ARG2 (w2 / world)
                                    :time (n5 / no-longer)))))))

# ::snt The project of the motorway happened just when the girl the most famous of Eatonville had recovered its appeal.
(p / project
      :topic (m / motorway)
      :time (r / recover-02
            :ARG0 (g / girl
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f / fame-01
                              :ARG1 g)
                        :ARG3 (m2 / most)
                        :location (c / city
                              :name (n / name
                                    :op1 "Eatonville"))))
            :ARG1 (a / appeal-01
                  :ARG0 g
                  :ARG1 p))
      :mod (j / just))

# ::snt With a few exceptions, the street has always the same look.
(l / look-02
      :ARG0 (s / street)
      :ARG1 (s2 / same-01
            :ARG1 s)
      :time (a / always)
      :condition (e / except-01
            :quant (f / few)))

# ::snt This is what we think will bring in more customers.
(t / think-01
      :ARG0 (w / we)
      :ARG1 (b / bring-01
            :ARG0 (t2 / this)
            :ARG1 (c / customer
                  :quant (m / more))))

# ::snt With this film Garci does not expect to win any prizes.
(e / expect-01
      :polarity -
      :ARG0 (p / person
            :name (n / name
                  :op1 "Garci"))
      :ARG1 (w / win-01
            :ARG0 p
            :ARG1 (p2 / prize
                  :mod (a / any)))
      :ARG1-of (c / cause-01
            :ARG0 (f / film
                  :mod (t / this))))

# ::snt What good to facilitate the advent of such a competitor?
(g / good-02
      :ARG1 (f / facilitate-01
            :ARG1 (a / advent
                  :mod (c / company
                        :ARG0-of (c2 / compete-01)
                        :mod (s / such))))
      :degree (a2 / amr-unknown))

# ::snt Soccer - The Impact in the semi-finals
(g / game
      :name (n / name
            :op1 "The"
            :op2 "Impact")
      :subevent-of (f / final
            :ord (o / ordinal-entity
                  :value (s / semi))))

# ::snt This amount would be twice that produce nuclear power plants.
(h / have-quant-91
      :ARG1 (a / amount
            :mod (t / this))
      :ARG3 (t2 / times
            :quant 2)
      :ARG4 (p / produce-01
            :ARG1 (p2 / plant
                  :ARG0-of (p3 / power-01
                        :mod (n / nucleus)))))

# ::snt The phrase 'You do not consider "is enshrined in majuscules on the registration plate.
(p / phrase
      :ARG1-of (e / enshrine-01
            :ARG2 (m / majuscule)
            :location (p2 / plate
                  :instrument-of (r / register-02)))
      :ARG1-of (c / consider-01
            :polarity -
            :ARG0 (y / you)))

# ::snt On the opposite side, Antonio Damasio for example believes that the sensations resultant from primitive activities are born in the areas of the corporeal feeling of the cortex and the core of the brain, like Jaak Pankseep who focuses more on the just the core of the brain.
(b / believe-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Antonio"
                  :op2 "Damasio")
            :ARG0-of (e / exemplify-01))
      :ARG1 (b2 / bear-02
            :ARG1 (s / sensation
                  :ARG1-of (r / result-01
                        :ARG2 (a / activity-06
                              :mod (p2 / primitive))))
            :location (a2 / and
                  :op1 (a3 / area
                        :mod (f / feel-01
                              :ARG0 (c / cortex)
                              :mod (c2 / corporeal)))
                  :op2 (c3 / core
                        :part-of (b3 / brain)))
            :ARG1-of (r2 / resemble-01
                  :ARG2 (p3 / person
                        :name (n2 / name
                              :op1 "Jaak"
                              :op2 "Pankseep")
                        :ARG0-of (f2 / focus-01
                              :ARG2 (c4 / core
                                    :part-of (b4 / brain)
                                    :mod (j / just))
                              :ARG2-of (h / have-degree-91
                                    :ARG1 c4
                                    :ARG3 (m / more))))))
      :prep-on (s2 / side
            :ARG1-of (o / opposite-01)))

# ::snt On the screen of the machine they will find all the information about the validity of their document.
(f / find-01
      :ARG0 (t / they)
      :ARG1 (ii / information
            :mod (a / all)
            :topic (v / valid-02
                  :ARG1 (d / document
                        :poss t)))
      :location (s / screen
            :part-of (m / machine)))

# ::snt The total immersion in the English language focusses on the almost constant use of English in teaching.
(f / focus-01
      :ARG0 (ii / immigrate-01
            :ARG1 (l / language
                  :name (n / name
                        :op1 "English"))
            :mod (t / total))
      :ARG1 (u / use-01
            :ARG1 l
            :ARG2 (t2 / teach-01)
            :frequency (c / constant
                  :mod (a / almost))))

# ::snt The photo present in this article, was taken earlier this month in one of the rooms of rest reserved for employees to Microsoft's Redmond.
(t / take-01
      :ARG1 (p / photo
            :ARG1-of (p2 / present-01
                  :ARG2 (a / article
                        :mod (t2 / this))))
      :ARG3 (r / room
            :quant 1
            :ARG1-of (ii / include-91
                  :ARG2 (r2 / room
                        :mod (r3 / rest)
                        :ARG1-of (r4 / reserve-01
                              :ARG2 (p3 / person
                                    :ARG1-of (e / employ-01)
                                    :location (c / city
                                          :name (n / name
                                                :op1 "Redmond")
                                          :poss (c2 / company
                                                :name (n2 / name
                                                      :op1 "Microsoft"))))))))
      :time (b / before)
      :time (m / month
            :mod (t3 / this)))

# ::snt The most prestigious prize in fashion
(p / prize
      :ARG1-of (h / have-degree-91
            :ARG2 (p2 / prestigious)
            :ARG3 (m / most)
            :ARG5 (f / fashion)))

# ::snt Today we are starting, in March we end, in June we will make the sums.
(a / and
      :op1 (s / start-01
            :ARG0 (w / we)
            :ARG1 (m / make-01
                  :ARG0 w
                  :ARG1 (s2 / sum))
            :time (t / today))
      :op2 (e / end-01
            :ARG0 w
            :ARG1 (d / date-entity
                  :month 3))
      :op3 e
      :ARG0 w
      :ARG1 (d2 / date-entity
            :month 6))

# ::snt Who can most can say the least.
(p / possible-01
      :ARG1 (h / have-degree-91
            :ARG1 (a / amr-unknown)
            :ARG2 (p2 / possible-01
                  :ARG1 (s / say-01
                        :ARG0 a
                        :mod (l / least)))
            :ARG3 (m / most)))

# ::snt Step towards
(s / step-01
      :direction (t / towards))

# ::snt The eye of the bee plays an important role, since it is able to see in all directions, in an angle of 300 degrees.
(p / play-02
      :ARG0 (e / eye
            :part-of (b / bee))
      :ARG1 (r / role
            :ARG1-of (ii / important-01))
      :ARG1-of (c / cause-01
            :ARG0 (p2 / possible-01
                  :ARG1 (s / see-01
                        :ARG0 e
                        :direction (d / direction
                              :mod (a / all))
                        :manner (a2 / angle
                              :mod (a3 / angle-quantity
                                    :quant 300
                                    :unit (d2 / degree)))))))

# ::snt Will it be a birthday without a genuine party.
(b / birthday
      :polarity (a / amr-unknown)
      :prep-without (p / party
            :mod (g / genuine)))

# ::snt There are no precise figures: we are talking about 50 000 people who make their way through the Alps and drown themselves in tankards of beer.10 percent of visitors would have specially come from Italy this weekend.
(m / multi-sentence
      :snt1 (f / figure
            :polarity -
            :mod (p / precise)
            :location (t / there))
      :snt2 (t2 / talk-01
            :ARG0 (w / we)
            :ARG1 (p2 / person
                  :quant 50000
                  :ARG0-of (m2 / make-19
                        :ARG1 (w2 / way
                              :poss p2
                              :path (t3 / through
                                    :op1 (m3 / mountain
                                          :name (n / name
                                                :op1 "Alps")))))
                  :ARG0-of (d / drown-02
                        :ARG2 (t4 / tankard
                              :consist-of (b / beer)))
                  :ARG1-of d))
      :snt3 (c / come-01
            :ARG1 (p3 / person
                  :ARG1-of (ii / include-91
                        :ARG2 (p4 / person
                              :ARG0-of (v / visit-01))
                        :ARG3 (p5 / percentage-entity
                              :value 10)))
            :ARG3 (c2 / country
                  :name (n2 / name
                        :op1 "Italy"))
            :time (w3 / weekend
                  :mod (t5 / this))
            :manner (s / special-02)))

# ::snt However, I do not think so.
(c / contrast-01
      :ARG2 (t / think-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (s / so)))

# ::snt "Yes, we have a serious problem.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (p / problem
            :ARG1-of (s / serious-02)))

# ::snt The electronic vouchers are valid from tomorrow not only in the capital, but also in the surrounding area of the city.
(v / valid-02
      :ARG1 (v2 / voucher
            :mod (e / electronic))
      :time (f / from
            :op1 (t / tomorrow))
      :location (a / and
            :op1 (c / city
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (c2 / capital)))
            :op2 (a2 / area
                  :ARG1-of (s / surround-01
                        :ARG2 (c3 / city))
                  :mod (a3 / also))))

# ::snt Be careful of grapefruit, orange and apple juice.
(c / care-04
      :ARG0 (y / you)
      :ARG1 (a / and
            :op1 (g / grapefruit)
            :op2 (o / orange)
            :op3 (j / juice
                  :source (a2 / apple))))

# ::snt Or heels of trial of clothes.
(o / or
      :op1 (h / heel
            :topic (t / try-02
                  :ARG1 (c / clothes))))

# ::snt They have not been that according to the opposition.
(s / say-01
      :ARG0 (p / person
            :ARG0-of (o / oppose-01))
      :ARG1 (t / that
            :polarity -
            :domain (t2 / they)))

# ::snt For them, they are books - bills the market to Józsefváros, while fabriquaient stamps to Kiskunhalas.
(b / book
      :beneficiary (t / they)
      :ARG0-of (m / mean-01
            :ARG1 (c / contrast-01
                  :ARG1 (b2 / bill-01
                        :ARG2 (m2 / market)
                        :ARG3 (c2 / company
                              :name (n / name
                                    :op1 "Józsefváros")))
                  :ARG2 b2
                  :ARG2 (c3 / company
                        :name (n2 / name
                              :op1 "Fabriquaient"
                              :op2 "Stamp"))
                  :ARG3 (c4 / company
                        :name (n3 / name
                              :op1 "Kiskunhalas")))))

# ::snt The total amount of aid to the system should be divided into two parts.
(r / recommend-01
      :ARG1 (d / divide-02
            :ARG1 (a / amount
                  :quant-of (a2 / aid-01
                        :ARG2 (s / system))
                  :ARG2-of (t / total-01))
            :ARG2 (p / part
                  :quant 2)))

# ::snt The legislators thus refused to support President George Bush's call to the project.
(c / cause-01
      :ARG1 (r / refuse-01
            :ARG0 (p / person
                  :ARG0-of (l / legislate-01))
            :ARG1 (s / support-01
                  :ARG0 p
                  :ARG1 (c2 / call-03
                        :ARG0 (p2 / person
                              :name (n / name
                                    :op1 "George"
                                    :op2 "Bush")
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (p3 / president)))
                        :ARG1 (p4 / project)))))

# ::snt The process must happen in the blink of an eye.
(o / obligate-01
      :ARG2 (p / process-02
            :time (b / blink-01
                  :ARG1 (e / eye))))

# ::snt With a goal and simple methods, SV Hamburg reaches top of the league table.
(r / reach-01
      :ARG0 (t / team
            :name (n / name
                  :op1 "SV"
                  :op2 "Hamburg"))
      :ARG1 (t2 / top-01
            :ARG1 (t3 / table
                  :mod (l / league)))
      :manner (a / and
            :op1 (g / goal)
            :op2 (m / method
                  :ARG1-of (s / simple-02))))

# ::snt The stars of the flamenco like Diego El Cigala, Chano Lobato, Cristina Hoyos, Enrique Morente, El Lebrijano, Antonio Canales, Vicente Amigo, among others, are part of the selection made from around seventy artists photographed.
(ii / include-91
      :ARG1 (s / star
            :poss (f / flamenco)
            :example (a / and
                  :op1 (p / person
                        :name (n / name
                              :op1 "Diego"
                              :op2 "El"
                              :op3 "Cigala"))
                  :op2 (p2 / person
                        :name (n2 / name
                              :op1 "Chano"
                              :op2 "Lobato"))
                  :op3 (p3 / person
                        :name (n3 / name
                              :op1 "Cristina"
                              :op2 "Hoyos"))
                  :op4 (p4 / person
                        :name (n4 / name
                              :op1 "Enrique"
                              :op2 "Morente"))
                  :op5 (p5 / person
                        :name (n5 / name
                              :op1 "El"
                              :op2 "Lebrijano"))
                  :op6 (p6 / person
                        :name (n6 / name
                              :op1 "Antonio"
                              :op2 "Canales"))
                  :op7 (p7 / person
                        :name (n7 / name
                              :op1 "Vicente"
                              :op2 "Amigo"))
                  :ARG1-of (p8 / photograph-01)))
      :ARG2 (t / thing
            :ARG1-of (s2 / select-01)
            :source (a2 / artist
                  :quant (a3 / around
                        :op1 70))))

# ::snt So many other Paul Newman have gone to history.
(g / go-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Paul"
                  :op2 "Newman")
            :mod (o / other)
            :ARG1-of (h / have-quant-91
                  :ARG2 (m / many)
                  :ARG3 (s / so)))
      :ARG4 (h2 / history))

# ::snt It seems to be clear that it is better to buy a phone.
(s / seem-01
      :ARG1 (c / clear-06
            :ARG1 (g / good-02
                  :ARG1 (b / buy-01
                        :ARG1 (p / phone))
                  :ARG2-of (h / have-degree-91
                        :ARG1 b
                        :ARG3 (m / more)))))

# ::snt You trouves in front of people, of characters that sometimes you do not know or are you just a few minutes to make them a photograph.
(o / or
      :op1 (t / troupe-01
            :ARG0 (y / you)
            :location (ii / in-front-of
                  :op1 (p / person))
            :mod (c / character
                  :ARG1-of (k / know-01
                        :polarity -
                        :ARG0 y
                        :time (s / sometimes))))
      :op2 (h / have-03
            :ARG0 y
            :ARG1 (f / few
                  :op1 (t2 / temporal-quantity
                        :quant 1
                        :unit (m / minute))
                  :mod (j / just))
            :purpose (m2 / make-01
                  :ARG0 y
                  :ARG1 (p2 / photograph-01
                        :ARG1 c))
            :polarity (a / amr-unknown)))

# ::snt There was nothing left but to collect the hostages", when suddenly, "this surprise" occurred.
(l / leave-17
      :ARG1 (n / nothing
            :ARG2-of (e / except-01
                  :ARG1 (c / collect-01
                        :ARG1 (h / hostage))))
      :time (s / surprise-01
            :mod (t / this)
            :manner (s2 / sudden)))

# ::snt The trial subjects have spent half an hour in an MRI scan, meanwhile, have received 20 shock in four part to post, while watching the paint religious issue, is the one to issue more general.
(c / contrast-01
      :ARG1 (s / spend-02
            :ARG0 (s2 / subject
                  :ARG1-of (t / try-01))
            :ARG1 (t2 / temporal-quantity
                  :quant 0.5
                  :unit (h / hour))
            :ARG2 (s3 / scan-01
                  :manner (p / product
                        :name (n / name
                              :op1 "MRI"))))
      :ARG2 (r / receive-01
            :ARG0 s2
            :ARG1 (s4 / shock-01
                  :quant 20
                  :manner (p2 / part
                        :quant 4
                        :ARG1-of (p3 / post-01)))
            :time (w / watch-01
                  :ARG0 s2
                  :ARG1 (ii / issue-02
                        :ARG0 (p4 / paint)
                        :ARG1 (r2 / religion)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (g / general-02
                                    :ARG1 ii)
                              :ARG3 (m / more)))))
      :time (m2 / meanwhile))

# ::snt "People were always happy to see Zora" he said.
(s / say-01
      :ARG0 (h / he)
      :ARG1 (h2 / happy-01
            :ARG0 (s2 / see-01
                  :ARG0 (p / person)
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 "Zora")))
            :ARG1 (p3 / person)
            :time (a / always)))

# ::snt It is difficult to say, if such a concept would be likely to walk at home.
(d / difficult
      :domain (s / say-01)
      :condition (l / likely-01
            :ARG1 (w / walk-01
                  :ARG0 (c / concept
                        :mod (s2 / such))
                  :ARG2 (h / home))))

# ::snt The witness said that at 4.30 p.m., Locklear "based on substance on the accelerator, doing a lot of noise, trying to get out of the car garage, and going backwards several times, she roula on his sunglasses".
(s / say-01
      :ARG0 (p / person
            :ARG0-of (w / witness-01))
      :ARG1 (a / and
            :op1 (b / base-02
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 "Locklear"))
                  :ARG2 (s2 / substance
                        :location (a2 / accelerator)))
            :op2 (d / do-02
                  :ARG0 p2
                  :ARG1 (n2 / noise
                        :quant (l / lot)))
            :op3 (t / try-01
                  :ARG0 p2
                  :ARG1 (g / get-05
                        :ARG1 p2
                        :ARG2 (o / out-06
                              :ARG1 p2
                              :ARG2 (g2 / garage
                                    :mod (c / car)))))
            :op4 (r / roula-00
                  :ARG0 p2
                  :ARG1 (s3 / sunglasses
                        :poss p2)
                  :frequency (s4 / several)
                  :direction (b2 / backwards))
            :time (d2 / date-entity
                  :time "14:30")))

# ::snt Abuse of a father-" which led to suicide "
(l / lead-03
      :ARG0 (a / abuse-01
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (f / father))))
      :ARG2 (s / suicide))

# ::snt The shame, Mr Toews, is in this renouncing, and not elsewhere.
(s / say-01
      :ARG1 (s2 / shame-02
            :ARG2 (a / and
                  :op1 (r / renounce-01
                        :mod (t / this))
                  :op2 (r2 / renounce-01
                        :polarity -
                        :location (e / elsewhere))))
      :ARG2 (p / person
            :name (n / name
                  :op1 "Mr"
                  :op2 "Toews")))

# ::snt This case is one of the many accusations that her.
(ii / include-91
      :ARG1 (c / case-03
            :mod (t / this))
      :ARG2 (a / accuse-01
            :ARG1 (s / she)
            :quant (m / many)))

# ::snt The interests of 2009 cover seven months, from the end of September this year till the end of March.
(c / cover-02
      :ARG0 (ii / interest
            :time (d / date-entity
                  :year 2009))
      :ARG1 (t / temporal-quantity
            :quant 7
            :unit (m / month))
      :time (d2 / date-interval
            :op1 (e / end-01
                  :ARG1 (y / year
                        :mod (t2 / this))
                  :time (d3 / date-entity
                        :month 9))
            :op2 (e2 / end-01
                  :ARG1 (d4 / date-entity
                        :month 3))))

# ::snt To imitate the functions of the eye, engineers have put forth the idea of a laser rangefinder.
(p / put-out-11
      :ARG0 (p2 / person
            :ARG0-of (e / engineer-01))
      :ARG1 (ii / idea
            :topic (t / thing
                  :instrument-of (v / view-01
                        :ARG1 (l / laser))))
      :purpose (ii2 / imitate-01
            :ARG0 p2
            :ARG1 (f / function-01
                  :ARG0 (e2 / eye))))

# ::snt This whole process must reflect what the bee does to avoid other bees.
(o / obligate-01
      :ARG2 (r / reflect-01
            :ARG1 (p / process-02
                  :mod (w / whole)
                  :mod (t / this))
            :ARG2 (t2 / thing
                  :ARG1-of (d / do-02
                        :ARG0 (b / bee)
                        :purpose (a / avoid-01
                              :ARG0 b
                              :ARG1 (b2 / bee
                                    :mod (o2 / other)))))))

# ::snt They are, indeed, free of the relatively high costs of construction, operation and maintenance the mobile network.
(f / free-04
      :ARG1 (t / they)
      :ARG2 (c / cost-01
            :ARG1 (a / and
                  :op1 (c2 / construct-01
                        :ARG1 (n / network
                              :ARG1-of (m / mobile-02)))
                  :op2 (o / operate-01
                        :ARG1 n)
                  :op3 (m2 / maintain-01
                        :ARG1 n))
            :ARG1-of (h / high-02
                  :ARG2-of (r / relative-05)))
      :mod (ii / indeed))

# ::snt When the agreement was announced, one would have thought a truly revolutionary step.
(t / think-01
      :ARG0 (o / one)
      :ARG1 (s / step-01
            :ARG4 (r / revolutionary-04
                  :degree (t2 / truly)))
      :time (a / announce-01
            :ARG1 (a2 / agree-01)))

# ::snt When we will not be the most expensive
(t / time
      :time-of (h / have-degree-91
            :polarity -
            :ARG1 (w / we)
            :ARG2 (e / expensive)
            :ARG3 (m / most)))

# ::snt "I wanted to re-commemorate her because I think it is these women who have had an enormous influence in their time and now no one knows and highlights their work," says Bayón.
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Bayon"))
      :ARG1 (w / want-01
            :ARG0 p
            :ARG1 (r / recommemorate-01
                  :ARG0 p
                  :ARG1 (s2 / she)
                  :mod (a / again))
            :ARG1-of (c / cause-01
                  :ARG0 (t / think-01
                        :ARG0 p
                        :ARG1 (a2 / and
                              :op1 (ii / influence-01
                                    :ARG0 (w2 / woman
                                          :mod (t2 / this))
                                    :ARG1 (t3 / time
                                          :poss w2)
                                    :mod (e / enormous))
                              :op2 (a3 / and
                                    :op1 (k / know-01
                                          :ARG0 (n2 / no-one)
                                          :ARG1 (w3 / work-01
                                                :ARG0 w2))
                                    :op2 (h / highlight-01
                                          :ARG0 n2
                                          :ARG1 w3)
                                    :time (n3 / now)))))))

# ::snt They say so much about he, I know, many things are not true.
(k / know-01
      :ARG0 (ii / i)
      :ARG1 (t / true-01
            :polarity -
            :ARG1 (t2 / thing
                  :quant (m / many)))
      :condition (s / say-01
            :ARG0 (t3 / they)
            :ARG1 (m2 / much
                  :degree (s2 / so))
            :topic (h / he)))

# ::snt Generosity, love of life were vibrants features of the actor.
(f / feature
      :poss (p / person
            :ARG0-of (a / act-01))
      :domain (a2 / and
            :op1 (g / generous-01)
            :op2 (l / love-01
                  :ARG1 (l2 / life)))
      :mod (v / vibrant))

# ::snt Then, when I became a dancer, I was trying to take care of my way to pay.
(t / try-01
      :ARG0 (ii / i)
      :ARG1 (c / care-03
            :ARG0 ii
            :ARG1 (w / way
                  :manner-of (p / pay-01
                        :ARG0 ii)
                  :poss ii))
      :time (t2 / then
            :time-of (b / become-01
                  :ARG1 ii
                  :ARG2 (p2 / person
                        :ARG0-of (d / dance-01)))))

# ::snt Then, when I became a dancer, I was trying to take care of my way to pay.
(t / try-01
      :ARG0 (ii / i)
      :ARG1 (c / care-03
            :ARG0 ii
            :ARG1 (w / way
                  :manner-of (p / pay-01
                        :ARG0 ii)
                  :poss ii))
      :time (t2 / then
            :time-of (b / become-01
                  :ARG1 ii
                  :ARG2 (p2 / person
                        :ARG0-of (d / dance-01)))))

# ::snt The intelligent car imitates the flight of a bumblebee
(ii / imitate-01
      :ARG0 (c / car
            :ARG1-of (ii2 / intelligent-01))
      :ARG1 (f / fly-01
            :ARG0 (b / bumblebee)))

# ::snt The development of Orlando has already pushed Interstate 4 up to the west of the city.
(p / push-01
      :ARG0 (d / develop-02
            :ARG1 (c / city
                  :name (n / name
                        :op1 "Orlando")
                  :part (w / west)))
      :ARG1 (ii / Interstate
            :mod 4)
      :ARG2 (u / up-03
            :ARG1 ii
            :ARG2 w)
      :time (a / already))

# ::snt Microsoft is right, its operational system is important but also its software.
(r / right-06
      :ARG1 (c / company
            :name (n / name
                  :op1 "Microsoft"))
      :ARG2 (c2 / contrast-01
            :ARG1 (ii / important-01
                  :ARG1 (s / system
                        :purpose (o / operate-01
                              :ARG0 c)))
            :ARG2 (s2 / software
                  :poss c
                  :mod (a / also))))

# ::snt Sarkozy at the meeting of fishermen angry
(a / anger-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Sarkozy"))
      :ARG1 (p2 / person
            :ARG0-of (f / fish-01))
      :location (m / meet-03
            :ARG0 p2))

# ::snt The collar workers continue to queue to buy their sandwich matinier merchants to happen, and it is impossible to find a taxi between 16h and 19h in the week.
(a / and
      :op1 (c / continue-01
            :ARG0 (p / person
                  :ARG0-of (w / work-01)
                  :mod (c2 / collar))
            :ARG1 (q / queue-01
                  :ARG0 p
                  :purpose (b / buy-01
                        :ARG0 p
                        :ARG1 (p2 / person
                              :ARG0-of (m / merchandise-01
                                    :ARG1 (s / sandwich))
                              :mod (m2 / matinier)
                              :poss p))))
      :op2 (p3 / possible-01
            :polarity -
            :ARG1 (f / find-01
                  :ARG0 p
                  :ARG1 (t / taxi)
                  :time (b2 / between
                        :op1 (d / date-entity
                              :time "16:00")
                        :op2 (d2 / date-entity
                              :time "19:00"))
                  :time (w2 / week))))

# ::snt We can, of course, make music directly on the map memory, but little card readers know go without reduction, given the dimensions tiny memory cards used in mobile.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (m / make-01
                  :ARG0 (w / we)
                  :ARG1 (m2 / music)
                  :ARG2 (m3 / memory
                        :mod (m4 / map))
                  :ARG1-of (d / direct-02))
            :mod (o / of-course))
      :ARG2 (k / know-01
            :ARG0 (p2 / person
                  :ARG0-of (r / read-01
                        :ARG1 (c2 / card
                              :mod (m5 / memory)))
                  :mod (l / little))
            :ARG1 (g / go-06
                  :polarity -
                  :ARG0 p2
                  :ARG1 (r2 / reduce-01)
                  :ARG1-of (c3 / cause-01
                        :ARG0 (d2 / dimension
                              :mod (t / tiny)
                              :ARG1-of (u / use-01
                                    :ARG2 (m6 / mobile-02)))))))

# ::snt We advise you on how to make a choice.
(a / advise-01
      :ARG0 (w / we)
      :ARG1 (y / you)
      :ARG2 (t / thing
            :manner-of (c / choose-01
                  :ARG0 y)))

# ::snt The septuagenarian McCain has repeatedly put forward his indisputable experience in foreign policy, while emphasising the "naiveness" of his opponent in these matters that were at the heart of this first contest.
(c / contrast-01
      :ARG1 (p / put-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 "McCain")
                  :mod (s / septuagenarian))
            :ARG1 (e / experience-01
                  :ARG0 p2
                  :ARG1 (p3 / policy-01
                        :ARG2 (f / foreign))
                  :ARG1-of (d / dispute-01
                        :polarity -
                        :ARG1-of (p4 / possible-01)))
            :ARG2 (f2 / forward)
            :ARG1-of (r / repeat-01))
      :ARG2 (e2 / emphasize-01
            :ARG0 p2
            :ARG1 (n2 / niveness
                  :poss (p5 / person
                        :ARG0-of (o / oppose-01
                              :ARG1 p2))
                  :topic (m / matter
                        :mod (t / this)
                        :location (h / heart
                              :part-of (c2 / contest-02
                                    :ord (o2 / ordinal-entity
                                          :value 1)
                                    :mod t))))))

# ::snt You will achieve nothing, because in sleeping, he is not sufficiently aware to organize his thoughts.
(a / achieve-01
      :ARG0 (y / you)
      :ARG1 (n / nothing)
      :ARG1-of (c / cause-01
            :ARG0 (r / realize-01
                  :ARG0 (h / he)
                  :ARG1-of (h2 / have-degree-91
                        :polarity -
                        :ARG2 (s / suffice-01
                              :ARG0 r
                              :ARG1 (o / organize-01
                                    :ARG0 h
                                    :ARG1 (t / think-01
                                          :ARG0 h)))
                        :ARG3 (e / enough))
                  :time (s2 / sleep-01
                        :ARG0 h))))

# ::snt The song is ensured by Katerˇina Kneˇzˇínková and Adam Plachetka.
(e / ensure-01
      :ARG0 (a / and
            :op1 (p / person
                  :name (n / name
                        :op1 "Katerˇina"
                        :op2 "Kneˇzˇínková"))
            :op2 (p2 / person
                  :name (n2 / name
                        :op1 "Adam"
                        :op2 "Plachetka")))
      :ARG1 (s / song))

# ::snt They desperately need this, indeed, and I shows you an example.
(a / and
      :op1 (n / need-01
            :ARG0 (t / they)
            :ARG1 (t2 / this)
            :ARG1-of (d / desperate-02)
            :mod (ii / indeed))
      :op2 (s / show-01
            :ARG0 (ii2 / i)
            :ARG1 (e / example)
            :ARG2 (y / you)))

# ::snt For many, the main advantage of mobile phones that play music is their prices.
(a / advantage-01
      :ARG1 (p / price-01
            :ARG1 (p2 / phone
                  :ARG0-of (p3 / play-11
                        :ARG1 (m / music))
                  :ARG1-of (m2 / mobile-02)))
      :ARG2 (m3 / many)
      :mod (m4 / main))

# ::snt Sudanese soldiers had done this Sunday six of the kidnappers in the border area between Sudan, Chad and Egypt, and had arrested two of them.
(a / and
      :op1 (d / do-02
            :ARG0 (s / soldier
                  :mod (c / country
                        :name (n / name
                              :op1 "Sudan")))
            :ARG1 (p / person
                  :quant 6
                  :ARG1-of (ii / include-91
                        :ARG2 (p2 / person
                              :ARG0-of (k / kidnap-01)))
                  :ARG1-of (ii2 / include-91
                        :ARG2 (p3 / person
                              :ARG0-of (k2 / kidnap-01))))
            :time (d2 / date-entity
                  :weekday (s2 / sunday))
            :location (a2 / area
                  :ARG1-of (b / border-01
                        :ARG2 (a3 / and
                              :op1 c
                              :op2 (c2 / country
                                    :name (n2 / name
                                          :op1 "Chad"))
                              :op3 (c3 / country
                                    :name (n3 / name
                                          :op1 "Egypt"))))))
      :op2 (a4 / arrest-01
            :ARG0 s
            :ARG1 (p4 / person
                  :quant 2
                  :ARG1-of (ii3 / include-91
                        :ARG2 p3))))

# ::snt Shortly after, the witness, who initially had not recognised the actress saw Locklear stop in the middle of the motorway and get out of her car.
(s / see-01
      :ARG0 (p / person
            :ARG0-of (w / witness-01)
            :ARG1-of (r / recognize-02
                  :polarity -
                  :ARG0 p
                  :time (ii / initial)))
      :ARG1 (a / and
            :op1 (s2 / stop-01
                  :ARG0 (p2 / person
                        :name (n / name
                              :op1 "Locklear"))
                  :location (m / middle
                        :part-of (m2 / motorway)))
            :op2 (g / get-05
                  :ARG1 p2
                  :ARG2 (o / out-06
                        :ARG1 p2
                        :ARG2 (c / car
                              :poss p2))))
      :time (a2 / after
            :ARG1-of (s3 / short-07)))

# ::snt "I have changed, I do not want to take risk".
(a / and
      :op1 (c / change-01
            :ARG1 (ii / i))
      :op2 (w / want-01
            :polarity -
            :ARG0 ii
            :ARG1 (r / risk-01
                  :ARG0 ii)))

# ::snt We do not have to look too far to find examples.
(o / obligate-01
      :polarity -
      :ARG1 (w / we)
      :ARG2 (l / look-01
            :ARG0 w
            :ARG1 (e / example)
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / far)
                  :ARG3 (t / too)
                  :ARG6 (f2 / find-01
                        :ARG0 w
                        :ARG1 e))))

# ::snt But the Illhousiens goal scorer was not able to enjoy his happiness long and was be forced to return to the changing rooms a dozen minutes later and leaving his team mates with one man less.
(c / contrast-01
      :ARG2 (a / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (e / enjoy-01
                        :ARG0 (p2 / person
                              :ARG0-of (s / score-01
                                    :ARG1 (g / goal))
                              :ARG0-of (h / have-org-role-91
                                    :ARG1 (t / team
                                          :name (n / name
                                                :op1 "Illhousiens"))
                                    :ARG2 (p3 / person
                                          :ARG0-of s
                                          :ARG1 g))))
                  :ARG1 (h2 / happy-01
                        :ARG1 p2)
                  :ARG1-of (l / long-03)))
      :op2 (f / force-01
            :ARG1 p2
            :ARG2 (a2 / and
                  :op1 (r / return-01
                        :ARG1 p2
                        :ARG4 (r2 / room
                              :location-of (c2 / change-01))
                        :time (a3 / after
                              :quant (t2 / temporal-quantity
                                    :quant 6
                                    :unit (m / minute))))
                  :op2 (l2 / leave-12
                        :ARG0 p2
                        :ARG1 (p4 / person
                              :ARG0-of (h3 / have-rel-role-91
                                    :ARG1 p2
                                    :ARG2 (t3 / team)
                                    :ARG3 (m2 / man
                                          :quant 1
                                          :mod (l3 / less))))))))

# ::snt It is better for this way, as they will still need their strength.
(c / cause-01
      :ARG0 (n / need-01
            :ARG0 (t / they)
            :ARG1 (s / strong-02
                  :ARG1 t)
            :mod (s2 / still))
      :ARG1 (h / have-degree-91
            :ARG1 (ii / it)
            :ARG2 (g / good-04
                  :ARG1 ii
                  :ARG2 (w / way
                        :mod (t2 / this)))
            :ARG3 (m / more)))

# ::snt You are what you divulge about yourself.
(t / thing
      :ARG1-of (d / divulge-01
            :ARG0 (y / you)
            :topic y)
      :domain y)

# ::snt The right-wing camp is intact, it is only inside the party that voters have become more aware, more critical and more stubborn.
(a / and
      :op1 (ii / intact
            :domain (c / camp
                  :ARG1-of (r / right-08)))
      :op2 (b / become-01
            :ARG1 (p / person
                  :ARG0-of (v / vote-01))
            :ARG2 (a2 / and
                  :op1 (r2 / realize-01
                        :ARG0 p
                        :ARG2-of (h / have-degree-91
                              :ARG1 p
                              :ARG3 (m / more)))
                  :op2 (c2 / criticize-01
                        :ARG0 p)
                  :op3 (s / stubborn
                        :ARG2-of (h2 / have-degree-91
                              :ARG1 p
                              :ARG3 (m2 / more))))
            :location (ii2 / inside
                  :op1 (p2 / party))
            :mod (o / only)))

# ::snt Microsoft is seeking a virtual (see)
(s / seek-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Microsoft"))
      :ARG1 (v / virtual)
      :ARG1-of (s2 / see-01))

# ::snt The other research - The University of California, Berkeley, claims also to be researching in a new adhesive.
(c / claim-01
      :ARG0 (r / research-01
            :ARG0 (u / university
                  :name (n / name
                        :op1 "University"
                        :op2 "of"
                        :op3 "California")
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "Berkeley")))
            :mod (o / other))
      :ARG1 (r2 / research-01
            :ARG0 u
            :ARG1 (a / adhesive
                  :ARG1-of (n3 / new-01))
            :mod (a2 / also)))

# ::snt The Thai authorities stopped him at passport control, and in the end, he went to Hong Kong.
(a / and
      :op1 (s / stop-03
            :ARG0 (a2 / authority
                  :mod (c / country
                        :name (n / name
                              :op1 "Thailand")))
            :ARG1 (h / he)
            :location (c2 / control-01
                  :ARG1 (p / passport)))
      :op2 (g / go-02
            :ARG0 h
            :ARG4 (c3 / city
                  :name (n2 / name
                        :op1 "Hong"
                        :op2 "Kong"))
            :time (e / end-01)))

# ::snt The experts say a technology still in its infancy, from the fact that the marine energy dispelling fears about the environmental impact.
(s / say-01
      :ARG0 (p / person
            :ARG1-of (e / expert-01))
      :ARG1 (t / technology
            :mod (ii / infancy
                  :mod (s2 / still))
            :ARG1-of (c / cause-01
                  :ARG0 (d / dispelling-01
                        :ARG0 (e2 / energy
                              :mod (m / marine))
                        :ARG1 (f / fear-01
                              :ARG1 (ii2 / impact-01
                                    :ARG0 (e3 / environment)))))))

# ::snt The public is waiting for the time, without really hiding it, when Google will reveal its true nature.
(w / wait-01
      :ARG1 (p / public)
      :ARG2 (t / time
            :time-of (r / reveal-01
                  :ARG0 (c / company
                        :name (n / name
                              :op1 "Google"))
                  :ARG1 (n2 / nature
                        :ARG1-of (t2 / true-01)
                        :poss c)))
      :manner (h / hide-01
            :polarity -
            :ARG0 p
            :ARG1 t
            :ARG1-of (r2 / real-04)))

# ::snt The wrong time to spoil the rat of Pozoblanco
(t / time
      :ARG1-of (w / wrong-04
            :ARG2 (s / spoil-01
                  :ARG1 (r / rat
                        :mod (c / city
                              :name (n / name
                                    :op1 "Pozoblanco"))))))

# ::snt Not in front, because that way we create a block, and not all the yellow caps on the same benches, we must distribute them in the hall! '
(c / cause-01
      :ARG0 (c2 / contrast-01
            :ARG1 (c3 / create-01
                  :ARG0 (w / we)
                  :ARG1 (b / block)
                  :manner (w2 / way
                        :mod (t / that)))
            :ARG2 (c4 / cap
                  :ARG1-of (y / yellow-02)
                  :location (b2 / bench
                        :ARG1-of (s / same-01))
                  :mod (a / all
                        :polarity -)))
      :ARG1 (o / obligate-01
            :ARG1 w
            :ARG2 (d / distribute-01
                  :ARG0 w
                  :ARG1 c4
                  :ARG2 (h / hall)))
      :location (f / front
            :polarity -))

# ::snt The stock exchange of Warsaw made a proposal to buy the stock exchange of Prague
(p / propose-01
      :ARG0 (e / exchange
            :mod (s / stock)
            :location (c / city
                  :name (n / name
                        :op1 "Warsaw")))
      :ARG1 (b / buy-01
            :ARG0 e
            :ARG1 (e2 / exchange
                  :mod (s2 / stock)
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "Czech"
                              :op2 "City")))))

# ::snt The supercolle to walk on the walls.
(s / supercolle
      :ARG0-of (w / walk-01
            :ARG2 (w2 / wall)))

# ::snt To support the sector, one would need between 16 and 18 million per year.
(n / need-01
      :ARG0 (o / one)
      :ARG1 (r / rate-entity-91
            :ARG1 (b / between
                  :op1 16000000
                  :op2 18000000)
            :ARG2 (t / temporal-quantity
                  :quant 1
                  :unit (y / year)))
      :purpose (s / support-01
            :ARG0 o
            :ARG1 (s2 / sector)))

# ::snt But before the course begins, it was for me to appear.
(c / contrast-01
      :ARG2 (a / appear-01
            :ARG1 (ii / i)
            :time (b / before
                  :op1 (b2 / begin-01
                        :ARG1 (c2 / course)))))

# ::snt In short - But victorious of Kovalev
(c / contrast-01
      :ARG2 (w / win-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Kovalev")))
      :mod (ii / in-short))

# ::snt Now that the election in Parliament of the Land of Bavaria fell, a union of BayernLB with the bank from Baden-Wuttenberg could be taken first.
(p / possible-01
      :ARG1 (t / take-01
            :ARG1 (u / union-02
                  :ARG1 (c / company
                        :name (n / name
                              :op1 "BayernLB"))
                  :ARG2 (b / bank
                        :name (n2 / name
                              :op1 "Baden-Wuttenberg")))
            :ord (o / ordinal-entity
                  :value 1))
      :time (n3 / now
            :time-of (f / fall-05
                  :ARG1 (e / elect-01
                        :location (g / government-organization
                              :name (n4 / name
                                    :op1 "Parliament")
                              :mod (s / state
                                    :name (n5 / name
                                          :op1 "Land"
                                          :op2 "of"
                                          :op3 "Bavaria")))))))

# ::snt This is what we think will bring in more customers.
(t / think-01
      :ARG0 (w / we)
      :ARG1 (b / bring-01
            :ARG0 (t2 / this)
            :ARG1 (c / customer
                  :quant (m / more))))

# ::snt With a camera and a system of recognition of forms and faces, this "see" can know how many people in the place, which they are - including remember what they occupy positions - and listen and hear the keywords of their conversations.
(p / possible-01
      :ARG1 (a / and
            :op1 (k / know-01
                  :ARG0 (s / see-01
                        :mod (t / this))
                  :ARG1 (n / number
                        :quant-of (p2 / person
                              :location (p3 / place)
                              :ARG2-of (ii / include-01
                                    :ARG1 (r / remember-01
                                          :ARG0 s
                                          :ARG1 (o / occupy-01
                                                :ARG0 p2
                                                :ARG1 (p4 / position)))))))
            :op2 (l / listen-01
                  :ARG0 s
                  :ARG1 (k2 / keyword
                        :part-of (c / converse-01
                              :ARG0 (t2 / they))))
            :op3 (h / hear-01
                  :ARG0 s
                  :ARG1 k2))
      :instrument (a2 / and
            :op1 (c2 / camera)
            :op2 (s2 / system
                  :ARG0-of (r2 / recognize-02
                        :ARG1 (a3 / and
                              :op1 (f / form)
                              :op2 (f2 / face))))))

# ::snt This is the second weekend of the beer festival, known as the 'weekend of Italians'.
(w / weekend
      :ord (o / ordinal-entity
            :value 2)
      :part-of (f / festival
            :mod (b / beer)
            :ARG1-of (k / know-02
                  :ARG2 (w2 / weekend
                        :poss (p / person
                              :mod (c / country
                                    :name (n / name
                                          :op1 "Italy"))))))
      :domain (t / this))

# ::snt Since its creation, on 28 September 1998, Héma-Quebec has applied the precautionary principle.
(a / apply-02
      :ARG0 (p / province
            :name (n / name
                  :op1 "Héma-Quebec"))
      :ARG1 (p2 / principle
            :mod (p3 / precaution-02))
      :time (s / since
            :op1 (c / create-01
                  :ARG1 p
                  :time (d / date-entity
                        :year 1998
                        :month 9
                        :day 28))))

# ::snt The directorate of the Polish football league PZPN has been suspended by the National Olympic Committee after many scandals and replaced by Robert Zawlocki, an independent administrator.
(a / and
      :op1 (s / suspend-01
            :ARG0 (o / organization
                  :name (n / name
                        :op1 "National"
                        :op2 "Olympic"
                        :op3 "Committee"))
            :ARG1 (d / directorate
                  :mod (l / league
                        :name (n2 / name
                              :op1 "PZPN")
                        :mod (f / football)
                        :mod (c / country
                              :name (n3 / name
                                    :op1 "Poland"))))
            :time (a2 / after
                  :op1 (s2 / scandal
                        :quant (m / many))))
      :op2 (r / replace-01
            :ARG1 d
            :ARG2 (p / person
                  :name (n4 / name
                        :op1 "Robert"
                        :op2 "Zawlocki")
                  :ARG0-of (a3 / administrate-01)
                  :mod (ii / independent))))

# ::snt Vodafone heads rather its attention on the performance of the requests for its own 3G licences.
(h / head-02
      :ARG0 (c / company
            :name (n / name
                  :op1 "Vodafone"))
      :ARG1 (a / attend-02
            :ARG0 c
            :ARG1 (p / perform-02
                  :ARG0 (r / request-01
                        :ARG1 (l / license-01
                              :ARG1 c
                              :ARG2 (p2 / product
                                    :name n
                                    :op1 "3G")))))
      :ARG1-of (ii / instead-of-91))

# ::snt But given the attitude of mobile operators that are, the indifference of the Czech regulators is disconcerting.
(c / contrast-01
      :ARG2 (d / disconcert-01
            :ARG0 (ii / indifferent-01
                  :ARG1 (o / organization
                        :ARG0-of (r / regulate-01)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech"
                                    :op2 "Union")))
                  :ARG2 (o2 / operate-01
                        :ARG1-of (m / mobile-02)))
            :ARG1-of (c3 / cause-01
                  :ARG0 (a / attitude
                        :poss o2))))

# ::snt None of the Czech operators has a dominant position on such a market.
(p / position-01
      :ARG0 (c / company
            :ARG0-of (o / operate-01)
            :mod (c2 / country
                  :name (n / name
                        :op1 "Czech"))
            :quant (n2 / none))
      :ARG2 (m / market
            :mod (s / such))
      :ARG0-of (d / dominate-01))

# ::snt Especially as it is relatively saturated from the point of view of the provision of services. "
(c / cause-01
      :ARG0 (s / saturate-01
            :ARG1 (ii / it)
            :ARG2-of (r / relative-05)
            :source (p / point-of-view-08
                  :ARG1 (p2 / provide-01
                        :ARG1 (s2 / serve-01))))
      :mod (e / especially))

# ::snt The psychology of one-upmanship: Why are we spending more money?
(p / psychology
      :mod (u / upmanship
            :quant 1)
      :domain (s / spend-01
            :ARG0 (w / we)
            :ARG3 (m / money
                  :quant (m2 / more))
            :ARG1-of (c / cause-01
                  :ARG0 (a / amr-unknown))))

# ::snt The installation in all the institutions of the Presidency of the Council is now complete with the Palais Chigi.
(c / complete-01
      :ARG1 (ii / install-01
            :ARG2 (ii2 / institution
                  :mod (a / all)
                  :part-of (p / presidency
                        :part-of (o / organization
                              :name (n / name
                                    :op1 "Council")))))
      :ARG2 (p2 / palace
            :name (n2 / name
                  :op1 "Palais"
                  :op2 "Chigi"))
      :time (n3 / now))

# ::snt They launched a watermelons of their car '.
(l / launch-01
      :ARG0 (t / they)
      :ARG1 (w / watermelon)
      :location (c / car
            :poss t))

# ::snt The answer is simple, there is a lack of competition.
(s / simple-02
      :ARG1 (a / answer-01
            :ARG2 (l / lack-01
                  :ARG1 (c / compete-01))))

# ::snt We have already led the negotiations about that possibility several times with all the Czech mobile operators.
(l / lead-02
      :ARG0 (w / we)
      :ARG1 (n / negotiate-01
            :ARG0 w
            :ARG1 (c / company
                  :ARG0-of (o / operate-01
                        :ARG1 (m / mobile))
                  :mod (c2 / country
                        :name (n2 / name
                              :op1 "Czech"))
                  :mod (a / all))
            :ARG2 (t / that
                  :ARG1-of (p / possible-01)))
      :time (a2 / already)
      :frequency (s / several))

# ::snt The fourth world aircraft manufacturer, Embraer, maintains its forecast for 2008 with 215 aircraft deliveries left, reaffirmed Fredrico Fleury Curado, its chairman.
(r / reaffirm-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Fredrico"
                  :op2 "Fleury"
                  :op3 "Curado")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / company
                        :name (n2 / name
                              :op1 "Embraer")
                        :ARG0-of (m / manufacture-01
                              :ARG1 (a / aircraft))
                        :location (w / world
                              :ord (o / ordinal-entity
                                    :value 4)))
                  :ARG2 (c2 / chairman)))
      :ARG1 (f / forecast-01
            :ARG0 c
            :ARG1 (d / date-entity
                  :year 2008)
            :ARG1-of (c3 / cause-01
                  :ARG0 (l / leave-17
                        :ARG1 (d2 / deliver-01
                              :ARG1 (a2 / aircraft)
                              :quant 215)))))

# ::snt When energy gives birth to waves, big ones moves.
(m / move-02
      :ARG0 (o / one
            :mod (b / big))
      :time (b2 / bear-02
            :ARG0 (e / energy)
            :ARG1 (w / wave)))

# ::snt They have not been that according to the opposition.
(s / say-01
      :ARG0 (p / person
            :ARG0-of (o / oppose-01))
      :ARG1 (t / that
            :polarity -
            :domain (t2 / they)))

# ::snt The price of the production of paper, the activities of the print edition and have not changed.
(c / change-01
      :polarity -
      :ARG1 (a / and
            :op1 (m / monetary-quantity
                  :ARG2-of (p / price-01
                        :ARG1 (p2 / produce-01
                              :ARG1 (p3 / paper))))
            :op2 (a2 / activity-06
                  :ARG0 (e / edition
                        :mod (p4 / print-01)))))

# ::snt People say that Naomi is a person with a warm heart.
(s / say-01
      :ARG0 (p / person)
      :ARG1 (h / have-03
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 "Naomi"))
            :ARG1 (h2 / heart
                  :ARG1-of (w / warm-07))))

# ::snt But what a great long distance athlete.
(c / contrast-01
      :ARG2 (a / athlete
            :mod (d / distance
                  :ARG1-of (l / long-03)
                  :mod (g / great))))

# ::snt What does it mean?
(m / mean-01
      :ARG1 (ii / it)
      :ARG2 (a / amr-unknown))

# ::snt Behemoths in the attack.
(b / behemoths
      :ARG0-of (a / attack-01))

# ::snt Other operators also refer to the specific nature of the Czech market.
(r / refer-01
      :ARG0 (p / person
            :ARG0-of (o / operate-01)
            :mod (o2 / other))
      :ARG1 (n / nature
            :ARG1-of (s / specific-02)
            :poss (m / market
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Czech"))))
      :mod (a / also))

# ::snt HSV beat Gladbach 1: 0
(b / beat-03
      :ARG0 (t / team
            :name (n / name
                  :op1 "HSV"))
      :ARG1 (t2 / team
            :name (n2 / name
                  :op1 "Gladbach"))
      :ARG2 (r / ratio-of
            :op1 1
            :op2 0))

# ::snt The new law also seeks to limit the so-called golden parachutes for the managers of companies participating in the programme and it will establish a committee, which will ensure the supervision of the funds.
(a / and
      :op1 (s / seek-01
            :ARG0 (l / law
                  :ARG1-of (n / new-01))
            :ARG1 (l2 / limit-01
                  :ARG0 l
                  :ARG1 (p / parachute
                        :mod (g / golden)
                        :mod (s2 / so-called)
                        :beneficiary (p2 / person
                              :ARG0-of (m / manage-01
                                    :ARG1 (c / company
                                          :ARG0-of (p3 / participate-01
                                                :ARG1 (p4 / program)))))))
            :mod (a2 / also))
      :op2 (e / establish-01
            :ARG0 l
            :ARG1 (c2 / committee
                  :ARG0-of (e2 / ensure-01
                        :ARG1 (s3 / supervise-01
                              :ARG1 (f / fund))))))

# ::snt The driver control the validity of the voucher registered.
(c / control-01
      :ARG0 (p / person
            :ARG0-of (d / drive-01))
      :ARG1 (v / valid-02
            :ARG1 (v2 / voucher
                  :ARG1-of (r / register-02))))

# ::snt Therefore ordered interceptions against Dal Torrione, the entry write, is émergée 'willingness to marry the requirements of a businessman, representing a group known, close to the Piromalli, unifying the choice of the public administration to the interests of the clan.
(c / cause-01
      :ARG1 (o / order-01
            :ARG2 (ii / intercept-01
                  :ARG1 (p / person
                        :name (n / name
                              :op1 "Dal"
                              :op2 "Torrione")))
            :ARG1-of (w / write-01
                  :ARG0 (e / enter-02))
            :ARG1-of c
            :ARG0 (w2 / will-02
                  :ARG0 (p2 / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG2 (e2 / émergée))
                        :ARG0-of (r / represent-01
                              :ARG1 (g / group
                                    :ARG1-of (k / know-02)
                                    :ARG1-of (c2 / close-10
                                          :ARG2 (c3 / city
                                                :name (n2 / name
                                                      :op1 "Piromalli")))))
                        :ARG0-of (u / unify-01
                              :ARG1 (c4 / choose-01
                                    :ARG1 (g2 / government-organization
                                          :ARG0-of (a / administrate-01)
                                          :ARG1-of (p3 / public-02)))
                              :ARG2 (ii2 / interest
                                    :poss (c5 / clan)))))))

# ::snt I believe that yes, but in the end it joined and these activities have a lot in common.
(c / contrast-01
      :ARG1 (b / believe-01
            :ARG0 (ii / i)
            :ARG1 (t / that))
      :ARG2 (a / and
            :op1 (j / join-04
                  :ARG0 (ii2 / it))
            :op2 (s / share-01
                  :ARG0 ii2
                  :ARG1 (l / lot)
                  :ARG2 (a2 / activity-06
                        :mod (t2 / this)))
            :time (e / end-01)))

# ::snt The government has provided £14 billion to protect the deposits of 2.6 million savers of Bradford & Bingleys.
(p / provide-01
      :ARG0 (g / government-organization
            :ARG0-of (g2 / govern-01))
      :ARG1 (m / monetary-quantity
            :quant 14000000000
            :unit (p2 / pound))
      :purpose (p3 / protect-01
            :ARG0 g
            :ARG1 (d / deposit-01
                  :ARG0 (p4 / person
                        :quant 2400000
                        :ARG0-of (s / save-01)
                        :mod (c / company
                              :name (n / name
                                    :op1 "Bradford"
                                    :op2 "&"
                                    :op3 "Bingleys"))))))

# ::snt In their experiment, three groups bid against a partner, in different circumstances.
(b / bid-01
      :ARG0 (g / group
            :quant 3)
      :ARG1 (p / person
            :ARG0-of (p2 / partner-01))
      :time (e / experiment-01
            :ARG0 g)
      :manner (c / circumstance
            :ARG1-of (d / differ-02)))

# ::snt So many other Paul Newman have gone to history.
(g / go-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Paul"
                  :op2 "Newman")
            :mod (o / other)
            :ARG1-of (h / have-quant-91
                  :ARG2 (m / many)
                  :ARG3 (s / so)))
      :ARG4 (h2 / history))

# ::snt In the first half of 2008, the night flights and hotels were less expensive than the previous year.
(h / have-degree-91
      :ARG1 (a / and
            :op1 (f / fly-01
                  :time (d / date-entity
                        :dayperiod (n / night)))
            :op2 (h2 / hotel))
      :ARG2 (e / expensive)
      :ARG3 (l / less)
      :ARG4 (y / year
            :mod (p / previous))
      :time (h3 / half
            :ord (o / ordinal-entity
                  :value 1)
            :part-of (d2 / date-entity
                  :year 2008)))

# ::snt The board of AIG met Sunday evening to examine possible cessions, according to FT.
(s / say-01
      :ARG0 (n / newspaper
            :name (n2 / name
                  :op1 "FT"))
      :ARG1 (m / meet-03
            :ARG0 (b / board
                  :part-of (c / company
                        :name (n3 / name
                              :op1 "AIG")))
            :time (d / date-entity
                  :weekday (s2 / sunday)
                  :dayperiod (e / evening))
            :purpose (e2 / examine-01
                  :ARG0 b
                  :ARG1 (r / recession-02
                        :ARG1-of (p / possible-01)))))

# ::snt The future is perhaps promising.
(p / possible-01
      :ARG1 (p2 / promise-01
            :ARG0 (f / future)))

# ::snt Readers, however, have the advantage of having an order easy.
(c / contrast-01
      :ARG2 (a / advantage-01
            :ARG1 (p / person
                  :ARG0-of (r / read-01))
            :ARG2 (h / have-03
                  :ARG0 p
                  :ARG1 (o / order-02
                        :ARG1-of (e / easy-05)))))

# ::snt That is the timetable set by the Capitol for the work of the Commission for the future of Rome" which took place this morning at the new headquarters, behind the Thermes of Caracalla.
(t / timetable
      :ARG1-of (s / set-02
            :ARG0 (g / government-organization
                  :name (n / name
                        :op1 "Capitol"))
            :purpose (w / work-01
                  :ARG0 (g2 / government-organization
                        :name (n2 / name
                              :op1 "Commission"))
                  :ARG1 (f / future
                        :poss (c / city
                              :name (n3 / name
                                    :op1 "Rome"))))
            :time (d / date-entity
                  :dayperiod (m / morning)
                  :mod (t2 / today))
            :location (h / headquarters
                  :ARG1-of (n4 / new-01)
                  :location (b / behind
                        :op1 (b2 / building
                              :name (n5 / name
                                    :op1 "Thermes"
                                    :op2 "of"
                                    :op3 "Caracalla")))))
      :domain (t3 / that))

# ::snt It was the best that could mark the jets at a time.
(g / good-02
      :ARG1 (ii / it)
      :ARG2-of (h / have-degree-91
            :ARG1 ii
            :ARG3 (m / most))
      :ARG0-of (m2 / mark-01
            :ARG1 (j / jet)
            :manner (a / at-a-time)
            :ARG1-of (p / possible-01)))

# ::snt The answer is simple, there is a lack of competition.
(s / simple-02
      :ARG1 (a / answer-01
            :ARG2 (l / lack-01
                  :ARG1 (c / compete-01))))

# ::snt Special prosecutor, Nora Dannehy now will inquire to know whether the officers lied to their interrogators, hence obstructing justice, during their investigation.
(ii / inquire-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Nora"
                  :op2 "Dannehy")
            :ARG0-of (p2 / prosecute-01
                  :ARG1-of (s / special-02)))
      :ARG1 (k / know-01
            :ARG0 p
            :ARG1 (t / truth-value
                  :polarity-of (l / lie-08
                        :ARG0 (o / officer)
                        :ARG2 (p3 / person
                              :ARG0-of (ii2 / interrogate-01)
                              :poss o)
                        :ARG0-of (c / cause-01
                              :ARG1 (o2 / obstruct-01
                                    :ARG0 o
                                    :ARG1 (j / justice))
                              :time (ii3 / investigate-01
                                    :ARG0 o)))))
      :time (n2 / now))

# ::snt The high court of Truro has stated that he regularly bound his step-daughter, Stéphanie Randle, during her childhood, when she was between 5 and 7 years old.
(s / state-01
      :ARG0 (c / court
            :mod (h / high)
            :poss (p / person
                  :name (n / name
                        :op1 "Truckro")))
      :ARG1 (b / bind-01
            :ARG0 p
            :ARG1 (p2 / person
                  :name (n2 / name
                        :op1 "Stéphanie"
                        :op2 "Randle")
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 p
                        :ARG2 (s2 / stepdaughter)))
            :ARG1-of (r / regular-02)
            :time (c2 / childhood
                  :time-of (a / age-01
                        :ARG1 p2
                        :ARG2 (b2 / between
                              :op1 (t / temporal-quantity
                                    :quant 5
                                    :unit (y / year))
                              :op2 (t2 / temporal-quantity
                                    :quant 7
                                    :unit (y2 / year)))))))

# ::snt The circumstances around a shooting before the release of the hostages are still unclear: Well, the kidnappers were close to put an end to the kidnapping, in the words of an Egyptian security official, before the Sudanese army killed six of the kidnappers without shout station.
(m / multi-sentence
      :snt1 (c / clear-06
            :polarity -
            :ARG1 (c2 / circumstance
                  :location (a / around
                        :op1 (s / shoot-02
                              :time (b / before
                                    :op1 (r / release-01
                                          :ARG1 (h / hostage))))))
            :mod (s2 / still))
      :snt2 (c3 / close-10
            :ARG1 (p / person
                  :ARG0-of (k / kidnap-01))
            :ARG2 (e / end-01
                  :ARG0 p
                  :ARG1 (k2 / kidnap-01))
            :ARG1-of (s3 / say-01
                  :ARG0 (p2 / person
                        :ARG0-of (h2 / have-org-role-91
                              :ARG1 (c4 / country
                                    :name (n / name
                                          :op1 "Egypt"))
                              :ARG2 (o / official
                                    :topic (s4 / security))))
                  :time (b2 / before
                        :op1 (k3 / kill-01
                              :ARG0 (a2 / army
                                    :mod (c5 / country
                                          :name (n2 / name
                                                :op1 "Sudan")))
                              :ARG1 (p3 / person
                                    :quant 6
                                    :ARG0-of (k4 / kidnap-01)
                                    :ARG0-of (h3 / have-03
                                          :polarity -
                                          :ARG1 (s5 / station
                                                :mod (s6 / shout-01)))))))
            :mod (w / well)))

# ::snt However, I do not think so.
(c / contrast-01
      :ARG2 (t / think-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (s / so)))

# ::snt What matters most is consumer awareness and making this information open to the public domain.
(m / matter-01
      :ARG1 (a / and
            :op1 (r / realize-01
                  :ARG0 (p / person
                        :ARG0-of (c / consume-01)))
            :op2 (m2 / make-02
                  :ARG1 (o / open-05
                        :ARG1 (ii / information
                              :mod (t / this))
                        :ARG2 (d / domain
                              :ARG1-of (p2 / public-02)))))
      :ARG2-of (h / have-degree-91
            :ARG1 a
            :ARG3 (m3 / most)))

# ::snt The Hypo Real Estate should now pay interest on the fraction to what it would have law.
(r / recommend-01
      :ARG1 (p / pay-01
            :ARG0 (r2 / real-estate
                  :mod (h / huge))
            :ARG1 (ii / interest
                  :prep-on (f / fraction))
            :ARG3 (t / thing
                  :ARG1-of (h2 / have-03
                        :ARG0 r2)
                  :mod (l / law))
            :time (n / now)))

# ::snt It could participate in the Beijing games because of a hypothetical poorly on the back, but he promised to win in Berlin, improving its third marathon, his personal record of nearly five minutes.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (p2 / participate-01
                  :ARG0 (ii / it)
                  :ARG1 (g / game
                        :location (c2 / city
                              :name (n / name
                                    :op1 "Beijing")))
                  :ARG1-of (c3 / cause-01
                        :ARG0 (p3 / poor
                              :location (b / back)
                              :ARG1-of (h / hypothetical-02)))))
      :ARG2 (p4 / promise-01
            :ARG0 (h2 / he)
            :ARG1 (w / win-01
                  :ARG0 h2
                  :location (c4 / city
                        :name (n2 / name
                              :op1 "Berlin"))
                  :manner (ii2 / improve-01
                        :ARG0 h2
                        :ARG1 (r / run-02
                              :ARG0 h2
                              :ord (o / ordinal-entity
                                    :value 3)
                              :ARG1-of (m / mean-01
                                    :ARG2 (r2 / record-01
                                          :ARG1 h2
                                          :ARG1-of (p5 / personal-02)
                                          :duration (n3 / nearly
                                                :op1 (t / temporal-quantity
                                                      :quant 5
                                                      :unit (m2 / minute))))))))))

# ::snt Least ten five hours of the morning.
(t / temporal-quantity
      :quant 10
      :unit (h / hour)
      :mod (a / at-least)
      :time (d / date-entity
            :dayperiod (m / morning)))

# ::snt The interpretation of the dominant market position is one of the many points of contention.
(ii / include-91
      :ARG1 (ii2 / interpret-01
            :ARG1 (p / position-01
                  :ARG1 (m / market)
                  :ARG0-of (d / dominate-01)))
      :ARG2 (p2 / point
            :quant (m2 / many)
            :ARG2-of (c / contend-02)))

# ::snt It was the biggest loss of points in the space of a day in history.
(l / lose-02
      :ARG1 (p / point)
      :ARG1-of (h / have-degree-91
            :ARG2 (b / big)
            :ARG3 (m / most))
      :time (s / space-01
            :ARG1 (t / temporal-quantity
                  :quant 1
                  :unit (d / day))
            :ARG2 (h2 / history)))

# ::snt You can listen to the four new versions on the server iHNed.cz.
(p / possible-01
      :ARG1 (l / listen-01
            :ARG0 (y / you)
            :ARG1 (v / version
                  :quant 4
                  :ARG1-of (n / new-01))
            :medium (s / server
                  :name (n2 / name
                        :op1 "iHNed.cz"))))

# ::snt Obama has said that he is the future.
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (f / future
            :domain p))

# ::snt The reason for this striptease of thought is the relations of the press towards Ryan's new film "The Women" - which tells the story of an adulterer.
(c / cause-01
      :ARG0 (r / relation-03
            :ARG0 (p / press)
            :ARG2 (f / film
                  :name (n / name
                        :op1 "The"
                        :op2 "Women")
                  :ARG1-of (n2 / new-01)
                  :poss (p2 / person
                        :name (n3 / name
                              :op1 "Ryan"))
                  :ARG0-of (t / tell-01
                        :ARG1 (s / story
                              :topic (p3 / person
                                    :ARG0-of (r2 / rape-01))))))
      :ARG1 (s2 / striptease
            :mod (t2 / this)
            :mod (t3 / think-01)))

# ::snt Much to Eatonville, as Ms Jones, a teacher courageous and which has a low for the red lively, have always fear that their insular community is understood.
(f / fear-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Ms"
                  :op2 "Jones")
            :ARG0-of (t / teach-01)
            :mod (c / courageous)
            :ARG0-of (l / low-04
                  :ARG1 (p2 / person
                        :mod (l2 / lively)
                        :ARG1-of (r / red-02))))
      :ARG1 (u / understand-01
            :ARG1 (c2 / community
                  :poss p
                  :mod (ii / insular)))
      :time (a / always)
      :topic (c3 / city
            :name (n2 / name
                  :op1 "Eatonville"))
      :mod (m / much))

# ::snt The sale price manufacturers to export rose by 1.1 percent compared to those of July 2008, as compared to those of a year ago, they fell by 3.9 percent.
(a / and
      :op1 (r / rise-01
            :ARG1 (t / thing
                  :ARG2-of (p / price-01
                        :ARG1 (t2 / thing
                              :ARG1-of (s / sell-01)
                              :ARG3-of (e / export-01
                                    :ARG0 (c / company
                                          :ARG0-of (m / manufacture-01))))))
            :ARG2 (p2 / percentage-entity
                  :value 1.1)
            :ARG1-of (c2 / compare-01
                  :ARG2 (r2 / rise-01
                        :ARG1 t
                        :time (d / date-entity
                              :month 7
                              :year 2008))))
      :op2 (f / fall-01
            :ARG1 t
            :ARG2 (p3 / percentage-entity
                  :value 3.9)
            :ARG1-of (c3 / compare-01
                  :ARG2 (r3 / rise-01
                        :ARG1 t2
                        :time (b / before
                              :op1 (n / now)
                              :quant (t3 / temporal-quantity
                                    :quant 1
                                    :unit (y / year)))))))

# ::snt Later, the Dow Jones was a little overtaken.
(o / overtake-01
      :ARG1 (m / market-sector
            :name (n / name
                  :op1 "Dow"
                  :op2 "Jones"))
      :degree (l / little)
      :time (a / after))

# ::snt This, the representatives of the ÚOHS must very well know, but their interests are apparently elsewhere.
(c / contrast-01
      :ARG1 (o / obligate-01
            :ARG2 (k / know-01
                  :ARG0 (p / person
                        :ARG0-of (r / represent-01
                              :ARG1 (o2 / organization
                                    :name (n / name
                                          :op1 "English"
                                          :op2 "National"
                                          :op3 "Health"
                                          :op4 "Organization"))))
                  :ARG1 (t / this)
                  :degree (w / well
                        :degree (v / very))))
      :ARG2 (ii / interest-01
            :ARG1 p
            :location (e / elsewhere)
            :ARG1-of (a / appear-02)))

# ::snt Renièrent legislators and supports the call to the project of President George Bush.
(a / and
      :op1 (p / person
            :ARG0-of (l / legislate-01)
            :ARG1-of (r / radical-02))
      :op2 (s / support-01
            :ARG0 p
            :ARG1 (c / call-03
                  :ARG1 (p2 / project
                        :poss (p3 / person
                              :name (n / name
                                    :op1 "George"
                                    :op2 "Bush")
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (p4 / president)))))))

# ::snt However, I do not think so.
(c / contrast-01
      :ARG2 (t / think-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (s / so)))

# ::snt These drinks, consumed especially the summer because désaltérantes and rich in vitamins, if associated with some vital medicines, to alter the popular absorbement or reducing in the case, their effectiveness, with the same serious consequences for health.
(h / have-condition-91
      :ARG1 (a / alter-01
            :ARG0 (d / drink
                  :mod (t / this)
                  :ARG1-of (c / consume-01
                        :time (d2 / date-entity
                              :season (s / summer)
                              :mod (e / especially))))
            :ARG1 (e2 / effective-04
                  :ARG0 d)
            :ARG0-of (r / reduce-01
                  :ARG1 (o / or
                        :op1 (a2 / absorb-01
                              :ARG1 d
                              :ARG1-of (p / popular-02))
                        :op2 r
                        :ARG1 e2
                        :condition (c2 / case-04))))
      :ARG1-of (c3 / consequence-03
            :ARG2 (h2 / health)
            :ARG1-of (s2 / serious-02)
            :ARG1-of (s3 / same-01))
      :ARG2 (a3 / associate-01
            :ARG1 d
            :ARG2 (m / medicine
                  :mod (v / vital)
                  :mod (s4 / some))))

# ::snt Tuesday, at the beginning of trade, the stock exchange of Prague renoua with his downfall of the day before, when it lost almost six percent.
(a / and
      :op1 (e / exchange-01
            :ARG0 (c / city
                  :name (n / name
                        :op1 "Pradesh"))
            :ARG1 (s / stock))
      :op2 (f / fall-05
            :ARG1 (h / he)
            :time (b / before
                  :op1 (n2 / now)
                  :quant (t / temporal-quantity
                        :quant 1
                        :unit (d / day)))
            :time (l / lose-02
                  :ARG0 e
                  :ARG1 (a2 / almost
                        :op1 (p / percentage-entity
                              :value 6))))
      :time (d2 / date-entity
            :weekday (t2 / tuesday))
      :time (b2 / begin-01
            :ARG1 (t3 / trade-01)))

# ::snt We have seen many its binette allowed to grace the vinaigrette pots, sauces, biscuits and other foods, judging the process of poor taste, albeit joke at the outset.
(s / see-01
      :ARG0 (w / we)
      :ARG1 (a / and
            :op1 (a2 / allow-01
                  :ARG1 (g / grace-01
                        :ARG0 (b / binette
                              :poss (ii / it)
                              :quant (m / many))
                        :ARG1 (a3 / and
                              :op1 (p / pot
                                    :mod (v / vinaigrette))
                              :op2 (s2 / sauce)
                              :op3 (b2 / biscuit)
                              :op4 (f / food
                                    :mod (o / other)))))
            :op2 (j / judge-01
                  :ARG0 b
                  :ARG1 (p2 / process-02
                        :ARG1 (t / taste
                              :mod (p3 / poor)))
                  :concession (j2 / joke-01
                        :time (o2 / outset)))))

# ::snt While no result had yet been announced, many young people came to demonstrate against the power of President Alexander Lukashenko: "The dictator, resign".
(c / come-01
      :ARG1 (p / person
            :mod (y / young)
            :quant (m / many))
      :purpose (d / demonstrate-01
            :ARG0 p
            :ARG1 (s / say-01
                  :ARG0 p
                  :ARG1 (r / resign-01
                        :mode imperative
                        :ARG0 (p2 / person
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (d2 / dictator))))
                  :ARG2 p2)
            :manner (a / against
                  :op1 (p3 / power
                        :poss (p4 / person
                              :name (n / name
                                    :op1 "Alexander"
                                    :op2 "Lukashenko")
                              :ARG0-of (h2 / have-org-role-91
                                    :ARG2 (p5 / president))))))
      :concession (a2 / announce-01
            :polarity -
            :ARG1 (t / thing
                  :ARG2-of (r2 / result-01))
            :time (y2 / yet)))

# ::snt None of the Czech operators did of a dominant position on such a market.
(p / position-01
      :polarity -
      :ARG0 (p2 / person
            :ARG0-of (o / operate-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Czech"))
            :quant (n2 / none))
      :ARG2 (m / market
            :mod (s / such))
      :ARG0-of (d / dominate-01))

# ::snt The question, if it is really a matter of chance, pops up naturally.
(p / pop-up-03
      :ARG1 (q / question-01)
      :ARG1-of (n / natural-03)
      :condition (m / matter
            :domain q
            :ARG1-of (r / real-04)
            :topic (c / chance-02)))

# ::snt The price of the production of paper, the activities of the print edition and have not changed.
(c / change-01
      :polarity -
      :ARG1 (a / and
            :op1 (m / monetary-quantity
                  :ARG2-of (p / price-01
                        :ARG1 (p2 / produce-01
                              :ARG1 (p3 / paper))))
            :op2 (a2 / activity-06
                  :ARG0 (e / edition
                        :mod (p4 / print-01)))))

# ::snt This was repeated during the three years in the elections of the Bundestag of 2005, i.e. at the time of the much-discussed Stoiber.
(r / repeat-01
      :ARG1 (t / this)
      :time (e / elect-01
            :ARG1 (g / government-organization
                  :name (n / name
                        :op1 "Bundestag"))
            :time (d / date-entity
                  :year 2005)
            :time (t2 / thing
                  :name (n2 / name
                        :op1 "Stoiber")
                  :ARG1-of (d2 / discuss-01
                        :degree (m / much)))
            :duration (t3 / temporal-quantity
                  :quant 3
                  :unit (y / year))))

# ::snt Later, the other two houses no longer does not rejoignèrent.
(r / rejoign-01
      :polarity -
      :ARG0 (h / house
            :quant 2
            :mod (o / other))
      :time (n / no-longer)
      :time (a / after))

# ::snt On the contrary, the mobile operators like to complain that the Czech market is extremely concurrenciez.
(c / contrast-01
      :ARG2 (l / like-01
            :ARG0 (c2 / company
                  :ARG0-of (o / operate-01
                        :ARG1-of (m / mobile-02)))
            :ARG1 (c3 / complain-01
                  :ARG0 c2
                  :ARG1 (r / reasonable-02
                        :ARG1 (m2 / market
                              :mod (c4 / country
                                    :name (n / name
                                          :op1 "Czech")))
                        :degree (e / extreme)))))

# ::snt The work has just started, and there is still much to do in the two countries'.
(a / and
      :op1 (s / start-01
            :ARG1 (w / work-01)
            :time (j / just))
      :op2 (d / do-02
            :ARG1 (m / much
                  :mod (s2 / still))
            :location (c / country
                  :quant 2)))

# ::snt Other operators would also refer to the nature of the Czech market.
(r / refer-01
      :ARG0 (p / person
            :ARG0-of (o / operate-01)
            :mod (o2 / other))
      :ARG1 (n / nature
            :poss (m / market
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Czech"))))
      :mod (a / also))

# ::snt The course of the obligations, however, are particularly well.
(h / have-concession-91
      :ARG1 (w / well-09
            :ARG1 (c / course
                  :mod (o / obligate-01))
            :mod (p / particular)))

# ::snt Sooner or later it will eventually a fatal accident, "he said, there is a years, Ty´den.cz.
(s / say-01
      :ARG0 (h / he)
      :ARG1 (a / accident
            :mod (f / fatal)
            :time (e / eventual)
            :domain (ii / it)
            :ARG1-of s
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Ty"
                        :op2 "den.cz"))))

# ::snt This should particularly bring nights of insomnia to long term creditors on the decision of whether they should secede from their commitments or not.
(r / recommend-01
      :ARG1 (b / bring-01
            :ARG0 (t / this)
            :ARG1 (n / night
                  :mod (ii / insomnia))
            :ARG2 (p / person
                  :ARG0-of (o / owe-01)
                  :ARG2-of o
                  :ARG1-of (l / long-03)
                  :ARG0-of (d / decide-01
                        :ARG1 (t2 / truth-value
                              :polarity-of (r2 / recommend-01
                                    :ARG1 (s / secede-01
                                          :ARG0 p
                                          :ARG1 (c / commit-01
                                                :ARG1 p))))))
            :mod (p2 / particular)))

# ::snt The cap wage is not mentioned in any specificity: the limitations depend on how the secretariat of the Treasury offers its aid to the company.
(m / mention-01
      :polarity -
      :ARG1 (w / wage
            :mod (c / cap-01))
      :manner (s / specificity
            :mod (a / any))
      :ARG1-of (c2 / cause-01
            :ARG0 (d / depend-01
                  :ARG0 (l / limit-01)
                  :ARG1 (t / thing
                        :manner-of (o / offer-01
                              :ARG0 (s2 / secretariat
                                    :poss (g / government-organization
                                          :name (n / name
                                                :op1 "Treasury")))
                              :ARG1 (a2 / aid-01
                                    :ARG0 s2
                                    :ARG2 (c3 / company)))))))

# ::snt But pay attention, the Belgian brand does not make only tank tops.
(c / contrast-01
      :ARG2 (a / attend-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1-of (c2 / cause-01
                  :ARG0 (m / make-01
                        :polarity -
                        :ARG0 (b / brand
                              :mod (c3 / country
                                    :name (n / name
                                          :op1 "Belgium")))
                        :ARG1 (t / top
                              :mod (t2 / tank)
                              :mod (o / only))))))

# ::snt "I have changed, I do not want to take risk".
(a / and
      :op1 (c / change-01
            :ARG1 (ii / i))
      :op2 (w / want-01
            :polarity -
            :ARG0 ii
            :ARG1 (r / risk-01
                  :ARG0 ii)))

# ::snt The future is perhaps promising.
(p / possible-01
      :ARG1 (p2 / promise-01
            :ARG0 (f / future)))

# ::snt Without egos ultimate amount of quality.
(h / have-03
      :polarity -
      :ARG1 (a / amount
            :quant-of (q / quality)
            :mod (u / ultimate))
      :manner (e / ego))

# ::snt We have four versions - one each with solo male or female voices, an interpretation with choir and an instrumental version.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (v / version
            :quant 4
            :ARG0-of h
            :ARG1 (a / and
                  :op1 (v2 / voice
                        :mod (m / male)
                        :mod (s / solo))
                  :op2 (v3 / voice
                        :mod (f / female)
                        :mod s)
                  :op3 (ii / interpret-01
                        :accompanier (c / choir))
                  :op4 (v4 / version
                        :mod (ii2 / instrumental))))
      :mod (e / each))

# ::snt The larger editorial houses are working their way to the Internet, seen by many as the "murderer" of the paper newspaper.
(w / work-01
      :ARG0 (h / house
            :mod (e / editorial)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (l / large)
                  :ARG3 (m / more))
            :ARG1-of (s / see-01
                  :ARG0 (m2 / many)
                  :ARG2 (p / person
                        :ARG0-of (m3 / murder-01
                              :ARG1 (n / newspaper
                                    :mod (p2 / paper))))))
      :ARG1 (w2 / way
            :path-of (ii / internet)
            :poss h))

# ::snt This, the representatives of the ÚOHS must very well know, but their interests are apparently elsewhere.
(c / contrast-01
      :ARG1 (o / obligate-01
            :ARG2 (k / know-01
                  :ARG0 (p / person
                        :ARG0-of (r / represent-01
                              :ARG1 (o2 / organization
                                    :name (n / name
                                          :op1 "English"
                                          :op2 "National"
                                          :op3 "Health"
                                          :op4 "Organization"))))
                  :ARG1 (t / this)
                  :degree (w / well
                        :degree (v / very))))
      :ARG2 (ii / interest-01
            :ARG1 p
            :location (e / elsewhere)
            :ARG1-of (a / appear-02)))

# ::snt To refer, indeed, "we need a sketch of strategic reference, or firm or stand still, to allow our city, to improve, which it has absolutely necessary, while thinking about its future now a spirit of unity,".
(n / need-01
      :ARG0 (w / we)
      :ARG1 (o / or
            :op1 (s / sketch
                  :mod (r / reference-04
                        :mod (s2 / strategy)))
            :op2 (f / firm-03
                  :ARG1 s)
            :op3 (s3 / stand-01
                  :ARG1 s
                  :mod (s4 / still)))
      :purpose (a / allow-01
            :ARG0 w
            :ARG1 (ii / improve-01
                  :ARG1 (c / city
                        :poss w)
                  :ARG1-of (n2 / need-01
                        :ARG0 c
                        :degree (a2 / absolute)
                        :time (t / think-01
                              :ARG0 w
                              :ARG1 (f2 / future
                                    :poss c)
                              :ARG2 (s5 / spirit
                                    :mod (u / unity))
                              :time (n3 / now)))))
      :mod (ii2 / indeed))

# ::snt For many, the main advantage of mobile phones that play music is their prices.
(a / advantage-01
      :ARG1 (p / price-01
            :ARG1 (p2 / phone
                  :ARG0-of (p3 / play-11
                        :ARG1 (m / music))
                  :ARG1-of (m2 / mobile-02)))
      :ARG2 (m3 / many)
      :mod (m4 / main))

# ::snt The community has begun to hold a festival in honour of Hurston to demonstrate the catastrophic consequences that the motorway would have created.
(b / begin-01
      :ARG0 (c / community)
      :ARG1 (h / hold-04
            :ARG0 c
            :ARG1 (f / festival
                  :ARG1-of (h2 / honor-01
                        :ARG2 (c2 / city
                              :name (n / name
                                    :op1 "Hurston"))))
            :purpose (d / demonstrate-01
                  :ARG0 c
                  :ARG1 (c3 / consequence-03
                        :ARG1 (m / motorway)
                        :mod (c4 / catastrophic)
                        :ARG1-of (c5 / create-01
                              :ARG0 m)))))

# ::snt Other operators would also refer to the nature of the Czech market.
(r / refer-01
      :ARG0 (p / person
            :ARG0-of (o / operate-01)
            :mod (o2 / other))
      :ARG1 (n / nature
            :poss (m / market
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Czech"))))
      :mod (a / also))

# ::snt In the end, read the mangas, that is what I prefer already for years.
(r / read-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / mangas
            :ARG1-of (p / prefer-01
                  :ARG0 (ii / i)
                  :time (a / already)
                  :duration (m2 / multiple
                        :op1 (t / temporal-quantity
                              :quant 1
                              :unit (y2 / year)))))
      :time (e / end-01))

# ::snt On Saturday evening, representatives of legislators met the US Treasury Secretary Henry Paulson, in order to give a final form to the government fund.
(m / meet-03
      :ARG0 (p / person
            :ARG0-of (r / represent-01
                  :ARG1 (p2 / person
                        :ARG0-of (l / legislate-01))))
      :ARG1 (p3 / person
            :name (n / name
                  :op1 "Henry"
                  :op2 "Paulson")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g / government-organization
                        :name (n2 / name
                              :op1 "Treasury")
                        :poss (c / country
                              :name (n3 / name
                                    :op1 "US")))
                  :ARG2 (s / secretary)))
      :purpose (g2 / give-01
            :ARG0 p
            :ARG1 (f / form
                  :mod (f2 / final))
            :ARG2 (f3 / fund
                  :mod (g3 / government-organization
                        :ARG0-of (g4 / govern-01))))
      :time (d / date-entity
            :weekday (s2 / saturday)
            :dayperiod (e / evening)))

# ::snt This means that companies will have to find £81 million to settle the interests of the first year.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (o / obligate-01
            :ARG1 (c / company)
            :ARG2 (f / find-01
                  :ARG0 c
                  :ARG1 (m2 / monetary-quantity
                        :quant 81000000
                        :unit (p / pound))
                  :purpose (s / settle-02
                        :ARG0 c
                        :ARG1 (ii / interest
                              :time (y / year
                                    :ord (o2 / ordinal-entity
                                          :value 1)))))))

# ::snt To place the blame on the CˇTÚ is a fairly common in communications, through which the ÚOHS is washing his hands of the matter.
(c / common
      :domain (p / place-01
            :ARG1 (b / blame-01)
            :ARG2 (c2 / criminal-organization
                  :name (n / name
                        :op1 "CˇTÚ")))
      :manner (c3 / communicate-01
            :instrument-of (w / wash-01
                  :ARG0 (p2 / person
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (o / organization
                                    :name n
                                    :op1 "English"
                                    :op2 "Defense"
                                    :op3 "Organization"))
                        :ARG2 (m / member)))
            :ARG1 (h2 / hand
                  :part-of p2)
            :ARG2 (m2 / matter))
      :ARG1-of (f / fair-04))

# ::snt For me, it was clear that I had to travel there some day.
(c / clear-06
      :ARG1 (o / obligate-01
            :ARG1 (ii / i)
            :ARG2 (t / travel-01
                  :ARG0 ii
                  :ARG4 (t2 / there)
                  :time (d / day
                        :mod (s / some))))
      :beneficiary ii)

# ::snt Well the four achievements of the new version of the national anthem.
(a / achieve-01
      :quant 4
      :ARG0 (v / version
            :ARG1-of (n / new-01)
            :mod (a2 / anthem
                  :mod (n2 / nation)))
      :mod (w / well))

# ::snt Of course, there is an analysis of relevant markets drawn up by the CˇTÚ that telecommunications are, from the point of view of economic competition, a single market.
(a / analyze-01
      :ARG1 (m / market
            :ARG1-of (r / relevant-01))
      :ARG1-of (d / draw-up-03
            :ARG0 (c / court-decision
                  :name (n / name
                        :op1 "CˇTÚ")))
      :ARG1-of (c2 / cause-01
            :ARG0 (m2 / market
                  :ARG1-of (s / single-02)
                  :domain (t / telecommunication)
                  :ARG1-of (v / view-02
                        :ARG0 (c3 / compete-01
                              :mod (e / economy)))))
      :mod (o / of-course))

# ::snt The choice of operators is unfortunately miserable and is limited, in most cases, to radio tubes.
(a / and
      :op1 (m / miserable
            :domain (c / choose-01
                  :ARG1 (p / person
                        :ARG0-of (o / operate-01)))
            :ARG2-of (f / fortunate-01
                  :polarity -))
      :op2 (l / limit-01
            :ARG1 c
            :ARG2 (t / tube
                  :mod (r / radio))
            :mod (c2 / case-04
                  :quant (m2 / most))))

# ::snt The Czech market is in comparison with other very specific.
(c / compare-01
      :ARG1 (m / market
            :mod (c2 / country
                  :name (n / name
                        :op1 "Czech")))
      :ARG2 (m2 / market
            :mod (o / other)
            :ARG1-of (s / specific-02
                  :degree (v / very))))

# ::snt Despite this, Iraq has been, for the most part, the weakness of Bush.
(w / weak-02
      :ARG1 (c / country
            :name (n / name
                  :op1 "Iraq"))
      :ARG2 (p / person
            :name (n2 / name
                  :op1 "Bush"))
      :mod (m / most)
      :concession (t / this))

# ::snt However, in view of the dynamics and unpredictability of the crisis, there is no certainty.
(c / contrast-01
      :ARG2 (c2 / certainty
            :polarity -
            :ARG1-of (v / view-02
                  :ARG2 (a / and
                        :op1 (d / dynamics
                              :poss (c3 / crisis))
                        :op2 (p / possible-01
                              :polarity -
                              :ARG1 (p2 / predict-01
                                    :ARG1 c3))))))

# ::snt She asked me to go up for a cause if noble, but if it had asked to make the poirier, I would have done anyway.
(c / contrast-01
      :ARG1 (a / ask-02
            :ARG0 (s / she)
            :ARG1 (g / go-01
                  :ARG1 (ii / i)
                  :ARG4 (u / up)
                  :purpose (c2 / cause
                        :mod (n / noble)))
            :ARG2 ii)
      :ARG2 (h / have-condition-91
            :ARG1 (d / do-02
                  :ARG0 ii
                  :mod (a2 / anyway))
            :ARG2 (a3 / ask-02
                  :ARG0 (ii2 / it)
                  :ARG1 (m / make-02
                        :ARG0 ii2
                        :ARG1 (h2 / have-degree-91
                              :ARG1 ii2
                              :ARG2 (h3 / handsome)
                              :ARG3 (m2 / more))))))

# ::snt They have not been that according to the opposition.
(s / say-01
      :ARG0 (p / person
            :ARG0-of (o / oppose-01))
      :ARG1 (t / that
            :polarity -
            :domain (t2 / they)))

# ::snt Elena attack by Luca, then the embraces.
(a / and
      :op1 (a2 / attack-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Luca"))
            :ARG1 (p2 / person
                  :name (n2 / name
                        :op1 "Elena")))
      :op2 (e / embrace-01
            :time (t / then)))

# ::snt We are facing a government that is the only, of all the Western countries involved, not to have brought back its national trapped in the concentration camp at Guantánamo.
(f / face-01
      :ARG0 (w / we)
      :ARG1 (g / government-organization
            :ARG0-of (g2 / govern-01)
            :ARG0-of (b / bring-01
                  :polarity -
                  :ARG1 (n / nation
                        :poss g
                        :ARG1-of (t / trap-01
                              :location (c / concentration-camp
                                    :location (f2 / facility
                                          :name (n2 / name
                                                :op1 "Guantanamo"
                                                :op2 "namo")))))
                  :direction (b2 / back))
            :mod (o / only)
            :ARG1-of (ii / include-91
                  :ARG2 (c2 / country
                        :location (w2 / world-region
                              :name (n3 / name
                                    :op1 "West"))
                        :mod (a / all)
                        :ARG1-of (ii2 / involve-01)))))

# ::snt On trade terms, the stock exchange of Prague fell
(f / fall-01
      :ARG1 (e / exchange-01
            :ARG1 (s / stock)
            :location (c / city
                  :name (n / name
                        :op1 "Prague")))
      :manner (t / term
            :mod (t2 / trade-01)))

# ::snt Well the four achievements of the new version of the national anthem.
(a / achieve-01
      :quant 4
      :ARG0 (v / version
            :ARG1-of (n / new-01)
            :mod (a2 / anthem
                  :mod (n2 / nation)))
      :mod (w / well))

# ::snt With the show of strength of fishermen who have severely disrupted Monday the access of several ports in Brittany and Normandy, the President of the Republic has decided to go on Tuesday morning at the port of Guilvinec, in the Finisterre, to meet their representatives.
(d / decide-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Republic"))
                  :ARG2 (p2 / president)))
      :ARG1 (g / go-02
            :ARG0 p
            :ARG4 (p3 / port
                  :name (n2 / name
                        :op1 "Guilvinec")
                  :location (p4 / province
                        :name (n3 / name
                              :op1 "Finisterre")))
            :time (d2 / date-entity
                  :weekday (t / tuesday)
                  :dayperiod (m / morning))
            :purpose (m2 / meet-03
                  :ARG0 p
                  :ARG1 (p5 / person
                        :ARG0-of (r / represent-01
                              :ARG1 p))))
      :ARG1-of (c2 / cause-01
            :ARG0 (s / show-01
                  :ARG0 (s2 / strong-02
                        :ARG1 (p6 / person
                              :ARG0-of (f / fish-01)
                              :ARG0-of (d3 / disrupt-01
                                    :ARG1 (a / access-01
                                          :ARG1 (p7 / port
                                                :quant (s3 / several)
                                                :location (a2 / and
                                                      :op1 (p8 / province
                                                            :name (n4 / name
                                                                  :op1 "Brune"))
                                                      :op2 (c3 / country-region
                                                            :name (n5 / name
                                                                  :op1 "Normandy"))))
                                          :time (d4 / date-entity
                                                :weekday (m3 / monday)))
                                    :degree (s4 / severe)))))))

# ::snt In the MDAX, the actions of Arcandor fell after the announcement of an increase in the capital.
(f / fall-05
      :ARG1 (a / act-02
            :ARG0 (c / city
                  :name (n / name
                        :op1 "Arcandor")))
      :time (a2 / after
            :op1 (a3 / announce-01
                  :ARG1 (ii / increase-01
                        :ARG1 (c2 / city
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (c3 / capital))))))
      :location (o / organization
            :name (n2 / name
                  :op1 "MDAX")))

# ::snt I am pleased to have a wonderful family who will at best ".
(p / please-01
      :ARG0 (h / have-03
            :ARG0 (ii / i)
            :ARG1 (f / family
                  :ARG1-of (w / wonderful-03)
                  :ARG0-of (h2 / have-03
                        :polarity -
                        :mod (a / at-best))))
      :ARG1 ii)

# ::snt The detainee, A. A. J. of 28 years, has been in custody for achieving the various steps and will be judged in the next few hours.
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (p / person
                  :name (n / name
                        :op1 "A."
                        :op2 "A."
                        :op3 "J.")
                  :age (t / temporal-quantity
                        :quant 28
                        :unit (y / year))
                  :ARG1-of (d / detain-01))
            :ARG2 (c / custody)
            :ARG1-of (c2 / cause-01
                  :ARG0 (a2 / achieve-01
                        :ARG0 p
                        :ARG1 (s / step-01
                              :mod (v / various)))))
      :op2 (j / judge-01
            :ARG1 p
            :time (f / few
                  :op1 t
                  :quant 1
                  :unit (h / hour))
            :mod (n2 / next)))

# ::snt Other operators also refer to the specific nature of the Czech market.
(r / refer-01
      :ARG0 (p / person
            :ARG0-of (o / operate-01)
            :mod (o2 / other))
      :ARG1 (n / nature
            :ARG1-of (s / specific-02)
            :poss (m / market
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Czech"))))
      :mod (a / also))

# ::snt The stock exchange of Warsaw made a proposal to buy the stock exchange of Prague
(p / propose-01
      :ARG0 (e / exchange
            :mod (s / stock)
            :location (c / city
                  :name (n / name
                        :op1 "Warsaw")))
      :ARG1 (b / buy-01
            :ARG0 e
            :ARG1 (e2 / exchange
                  :mod (s2 / stock)
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "Czech"
                              :op2 "City")))))

# ::snt The driver of the coach tried to avoid it by swerving hard, but still grazed the right side of the lorry.
(c / contrast-01
      :ARG1 (t / try-01
            :ARG0 (p / person
                  :ARG0-of (d / drive-01
                        :ARG1 (c2 / coach)))
            :ARG1 (a / avoid-01
                  :ARG0 p
                  :ARG1 (ii / it)
                  :manner (s / swerve-01
                        :ARG0 p
                        :ARG1-of (h / hard-02))))
      :ARG2 (g / graz-01
            :ARG0 p
            :ARG1 (s2 / side
                  :ARG1-of (r / right-04)
                  :part-of (l / lorry))
            :mod (s3 / still)))

# ::snt The work has just started, and there is still much to do in the two countries'.
(a / and
      :op1 (s / start-01
            :ARG1 (w / work-01)
            :time (j / just))
      :op2 (d / do-02
            :ARG1 (m / much
                  :mod (s2 / still))
            :location (c / country
                  :quant 2)))

# ::snt Elena attack by Luca, then the embraces.
(a / and
      :op1 (a2 / attack-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Luca"))
            :ARG1 (p2 / person
                  :name (n2 / name
                        :op1 "Elena")))
      :op2 (e / embrace-01
            :time (t / then)))

# ::snt In Masi, "the choice of rotating doors is important to a symbolic point of view.
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Masi"))
      :ARG1 (ii / important-01
            :ARG1 (c / choose-01
                  :ARG1 (d / door
                        :ARG1-of (r / rotate-01)))
            :ARG2 (h / have-point-of-view-08
                  :ARG1-of (s2 / symbolize-01))))

# ::snt His step-daughter left for Plymouth.
(l / leave-11
      :ARG0 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (h2 / he)
                  :ARG2 (s / stepdaughter)))
      :ARG2 (c / city
            :name (n / name
                  :op1 "Plymouth")))

# ::snt Tourists kidnapped in Egypt are free
(f / free-04
      :ARG1 (p / person
            :ARG1-of (k / kidnap-01
                  :location (c / country
                        :name (n / name
                              :op1 "Egypt")))
            :ARG0-of (t / tour-01)))

# ::snt This, the representatives of the ÚOHS must very well know, but their interests are apparently the other.
(c / contrast-01
      :ARG1 (o / obligate-01
            :ARG2 (k / know-01
                  :ARG0 (p / person
                        :ARG0-of (r / represent-01
                              :ARG1 (o2 / organization
                                    :name (n / name
                                          :op1 "English"
                                          :op2 "National"
                                          :op3 "Health"
                                          :op4 "Organization"))))
                  :ARG1 (t / this)
                  :degree (w / well
                        :degree (v / very))))
      :ARG2 (ii / interest-01
            :ARG1 (t2 / they)
            :ARG2 (o3 / other)
            :ARG1-of (a / appear-02)))

# ::snt The police began their continued until the vehicle stops two miles up the low-hand, where the two occupants took to flee in a forested area.
(b / begin-01
      :ARG0 (p / police)
      :ARG1 (c / continue-01
            :ARG1 p)
      :time (u / until
            :op1 (s / stop-01
                  :ARG1 (v / vehicle)
                  :location (r / relative-position
                        :op1 (l / low-hand)
                        :quant (d / distance-quantity
                              :quant 2
                              :unit (m / mile))
                        :direction (u2 / up)
                        :location-of (t / take-10
                              :ARG0 (p2 / person
                                    :quant 2
                                    :ARG1-of (o / occupy-01
                                          :ARG0 p))
                              :ARG1 (f / flee-05
                                    :ARG0 p2
                                    :ARG1 (a / area
                                          :mod (f2 / forest))))))))

# ::snt The Nobel Prize for economy has been awarded to the American Paul Krugman for his research on trade models and localisation of business.
(a / award-01
      :ARG1 (a2 / award
            :name (n / name
                  :op1 "Nobel"
                  :op2 "Prize"
                  :op3 "for"
                  :op4 "Economics"))
      :ARG2 (p / person
            :name (n2 / name
                  :op1 "Paul"
                  :op2 "Krugman")
            :mod (c / country
                  :name (n3 / name
                        :op1 "America")))
      :ARG3 (r / research-01
            :ARG0 p
            :ARG1 (a3 / and
                  :op1 (m / model-01
                        :ARG1 (t / trade-01))
                  :op2 (l / localize-01
                        :ARG1 (b / business)))))

# ::snt The price of the production of paper, the activities of the print edition and have not changed.
(c / change-01
      :polarity -
      :ARG1 (a / and
            :op1 (m / monetary-quantity
                  :ARG2-of (p / price-01
                        :ARG1 (p2 / produce-01
                              :ARG1 (p3 / paper))))
            :op2 (a2 / activity-06
                  :ARG0 (e / edition
                        :mod (p4 / print-01)))))

# ::snt The stock exchange of Warsaw made a proposal to buy the stock exchange of Prague
(p / propose-01
      :ARG0 (e / exchange
            :mod (s / stock)
            :location (c / city
                  :name (n / name
                        :op1 "Warsaw")))
      :ARG1 (b / buy-01
            :ARG0 e
            :ARG1 (e2 / exchange
                  :mod (s2 / stock)
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "Czech"
                              :op2 "City")))))

# ::snt The PCA (format used by the company and its Apple iPods taken from them), meanwhile, is less course.
(h / have-mod-91
      :ARG1 (f / format
            :name (n / name
                  :op1 "PCA")
            :ARG1-of (u / use-01
                  :ARG0 (c / company)
                  :ARG2 (t / take-01
                        :ARG1 (p / product
                              :name (n2 / name
                                    :op1 "Apple"
                                    :op2 "Pipod")
                              :poss c)
                        :ARG3 c)))
      :ARG2 (c2 / course
            :mod (l / less))
      :time (m / meanwhile))

# ::snt The work has just started, and there is still much to do in the two countries'.
(a / and
      :op1 (s / start-01
            :ARG1 (w / work-01)
            :time (j / just))
      :op2 (d / do-02
            :ARG1 (m / much
                  :mod (s2 / still))
            :location (c / country
                  :quant 2)))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
(f / form-01
      :ARG0 (ii / inherit-01
            :ARG1 (p / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :ARG1 (c / class
            :ARG1-of (n / new-01)
            :ARG2-of (u / use-01
                  :ARG1 (c2 / class
                        :ARG1-of (d / define-01
                              :time (a / already)))))
      :manner (w / way))

# ::snt To explain further vector space models, basically a document is characterized by a vector.
(c / characterize-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG1-of (v / vector-02))
      :manner (b / basic)
      :purpose (e / explain-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (f / further)))))

# ::snt Bayes’ theorem was names after Rev Thomas Bayes and is a method used in probability theory.
(a / and
      :op1 (n / name-02
            :ARG1 (t / theorem
                  :poss (p / person
                        :name (n2 / name
                              :op1 "Thomas"
                              :op2 "Bayes")
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (r / reverend))))
            :ARG2 (n3 / name-01
                  :ARG1 t))
      :op2 (m / method
            :ARG1-of (u / use-01
                  :ARG2 (t2 / theory
                        :mod (p2 / probability)))
            :domain t))

# ::snt If a term appears in the document then its value in the vector is non-zero.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG2 (a / appear-01
            :ARG1 t
            :location d))

# ::snt • P(A|B) is the conditional probability of A, given B.
(p / probability
      :mod (c / conditional)
      :domain (s / string-entity
            :value "A")
      :ARG1-of (g / give-01
            :ARG2 (s2 / string-entity
                  :value "B"))
      :domain (s3 / string-entity
            :value "P"))

# ::snt The differing application has a direct influence on what the definition of the term means.
(ii / influence-01
      :ARG0 (a / apply-02
            :ARG1-of (d / differ-02))
      :ARG1 (t / thing
            :ARG2-of (d2 / define-01
                  :ARG1 (t2 / term)))
      :ARG1-of (d3 / direct-02))

# ::snt Thus, the "program" is the optimal plan of action that is being produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02)
            :ARG1-of (o / optimal-02)
            :domain (p2 / program)))

# ::snt Thus, the "program" is the optimal plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02
                  :ARG1-of (p2 / produce-01))
            :ARG1-of (o / optimal-02)
            :domain (p3 / program)))

# ::snt One of the best known schemes is tf-idf weighting (see the example below).
(ii / include-91
      :ARG1 (w / weight-01
            :manner (t / thing
                  :name (n / name
                        :op1 "FTF-idf")))
      :ARG2 (s / scheme-01
            :ARG1-of (k / know-02
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s)
                        :ARG3 (m / most))))
      :ARG3 (o / one)
      :ARG1-of (s2 / see-01
            :mode imperative
            :ARG0 (y / you)
            :location (b / below)))

# ::snt It is "previous" in the sense that it does not take into account any information about B.
(s / spoil-01
      :ARG1 (ii / it)
      :manner (s2 / sense
            :domain (t / take-into-account-04
                  :polarity -
                  :ARG0 ii
                  :ARG1 (ii2 / information
                        :mod (a / any)
                        :topic (t2 / thing
                              :name (n / name
                                    :op1 "B"))))))

# ::snt The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model.
(c / call-01
      :ARG1 (m / model
            :mod (m2 / mathematics)
            :ARG0-of (r / represent-01
                  :ARG1 (a / and
                        :op1 (d / document
                              :mod (t / text))
                        :op2 (o / object))
                  :ARG2 (t2 / thing
                        :ARG2-of (ii / identify-01
                              :ARG1 (t3 / thing)
                              :ARG1 t3))
                  :ARG3 (t4 / thing
                        :ARG2-of (v / vector-01))))
      :ARG2 (m3 / model
            :mod (s / space
                  :mod (t5 / thing
                        :ARG2-of (v2 / vector-01)))))

# ::snt Secondly to define the value of the optimal solution recursively.
(d / define-01
      :li 2
      :ARG1 (v / value-01
            :ARG1 (s / solution
                  :ARG1-of (o / optimal-02)))
      :manner (r / retrospective))

# ::snt There are two main approaches for dynamic programming.
(a / approach-02
      :quant 2
      :ARG1 (p / program-01
            :manner (d / dynamic))
      :mod (m / main))

# ::snt P(A), or the probability that the student is a girl regardless of any other information.
(p / probability
      :li "A"
      :domain (g / girl
            :domain (p2 / person
                  :ARG0-of (s / study-01)))
      :ARG1-of (r / regardless-91
            :ARG2 (ii / information
                  :mod (a / any)
                  :mod (o / other))))

# ::snt For instance, a events schedule at an exhibition is sometimes called a program.
(e / exemplify-01
      :ARG0 (c / call-01
            :ARG1 (s / schedule-01
                  :ARG1 (e2 / event)
                  :location (e3 / exhibit-01))
            :ARG2 (p / program)
            :frequency (s2 / sometimes)))

# ::snt This can be useful when the number of times a word appears is not considered important.
(p / possible-01
      :ARG1 (u / useful-05
            :ARG1 (t / this))
      :time (c / consider-01
            :ARG1 (ii / important-01
                  :polarity -
                  :ARG1 (n / number
                        :quant-of (w / word)))))

# ::snt Define value of optimal solution recursively.
(d / define-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (v / value-01
            :ARG1 (s / solution
                  :mod (o / optimal))
            :ARG1-of (r / recurs-01
                  :ARG0 y)))

# ::snt It was first used in the SMART Information Retrieval System.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (s / system
            :name (n / name
                  :op1 "SMART"
                  :op2 "Information"
                  :op3 "Retrieval"
                  :op4 "System"))
      :ord (o / ordinal-entity
            :value 1))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
(r / represent-01
      :ARG1 (d / document
            :ARG2-of (r2 / retrieve-01
                  :ARG1 (ii / information)))
      :ARG2 (v / vectors)
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
(v / value-01
      :ARG1 (t / term
            :location (d / document))
      :ARG2 (t2 / thing
            :mod (z / zero)
            :ARG2-of (v2 / vector-00)))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
(r / result-01
      :ARG1 (r2 / representation-02
            :ARG1 (s / space
                  :ARG1-of (v / Vector-01)))
      :ARG2 (l / lose-02
            :ARG1 (o / order
                  :ARG2-of (o2 / order-01)
                  :location (d / document))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
(w / way
      :manner-of (l / look-01
            :ARG1 (ii / inherit-01)
            :ARG2 (r / relation-03
                  :ARG1 ii
                  :mod (k / kind)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt If a term exists in a document, its value in the vector is not equal to zero.
(e / equal-01
      :polarity -
      :ARG1 (t / thing
            :ARG2-of (v / value-01
                  :ARG1 (t2 / thing
                        :ARG2-of (v2 / vector-01))))
      :ARG2 (t3 / thing
            :quant 0)
      :condition (e2 / exist-01
            :ARG1 t2
            :location (d / document)))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
(r / result-01
      :ARG1 (r2 / representation-02
            :ARG1 (s / space
                  :ARG1-of (v / Vector-01)))
      :ARG2 (l / lose-02
            :ARG1 (o / order
                  :ARG2-of (o2 / order-01)
                  :location (d / document))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector)
      :manner (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt Thus, the "program" is the optimal plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02
                  :ARG1-of (p2 / produce-01))
            :ARG1-of (o / optimal-02)
            :domain (p3 / program)))

# ::snt A document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector))

# ::snt The value of a vector is non-zero if a term occurs in the document.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / thing
                        :ARG1-of (v2 / vector-01))))
      :ARG2 (t2 / term
            :location (d / document)))

# ::snt A page that is linked to by many pages with high PageRank receives a high rank itself.
(r / receive-01
      :ARG0 (p / page
            :ARG1-of (l / link-01
                  :ARG0 (p2 / page
                        :quant (m / many)
                        :ARG0-of (h / have-03
                              :ARG1 (r2 / rank-01
                                    :ARG1 p
                                    :ARG1-of (h2 / high-02))))))
      :ARG1 (r3 / rank-01
            :ARG1 p
            :ARG1-of (h3 / high-02)))

# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
(d / develop-02
      :ARG1 (w / way
            :manner-of (c / compute-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w2 / weight
                                    :mod (t2 / term))
                              :mod (a / also))))
            :ARG1-of (d2 / differ-02)
            :quant (s / several)))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector)
      :manner (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt The PageRank is computed iteratively, and it is found that the PageRank values converge fairly rapidly.
(a / and
      :op1 (c / compute-01
            :ARG1 (t / thing
                  :ARG3-of (r / rank-01
                        :ARG2 (p / page)))
            :manner (ii / iterative))
      :op2 (f / find-01
            :ARG1 (c2 / converge-01
                  :ARG0 (t2 / thing
                        :ARG2-of (v / value-01
                              :ARG1 t))
                  :manner (r2 / rapid
                        :ARG1-of (f2 / fair-04)))))

# ::snt In general, we can solve a problem with optimal substructure using a three-step process: 1.
(p / possible-01
      :ARG1 (s / solve-01
            :ARG0 (w / we)
            :ARG1 (p2 / problem
                  :topic (s2 / substructure
                        :mod (o / optimal)))
            :ARG2 (p3 / process-02
                  :mod (s3 / step-01
                        :quant 3)
                  :ARG1-of (m / mean-01
                        :ARG2 1)))
      :ARG1-of (g / general-02))

# ::snt In the vector space model a document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG2-of (v / vector-02))
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt One of its uses is calculating posterior probabilities given observations.
(u / use-01
      :ARG1 (c / calculate-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :ARG1-of (ii / include-91
            :ARG2 (u2 / use-01
                  :ARG1 (ii2 / it))))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (v2 / vector)))
      :ARG2 (a / appear-01
            :ARG1 (t2 / term)
            :location (d / document)))

# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
(l / lose-02
      :li "-1"
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
(d / develop-02
      :ARG1 (w / way
            :manner-of (c / compute-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w2 / weight
                                    :mod (t2 / term))
                              :mod (a / also))))
            :ARG1-of (d2 / differ-02)
            :quant (s / several)))

# ::snt To derive the theorem, we begin with the definition of conditional probability.
(b / begin-01
      :ARG0 (w / we)
      :ARG1 (d / define-01
            :ARG0 w
            :ARG1 (p / probability
                  :mod (c / conditional)))
      :purpose (d2 / derive-01
            :ARG0 w
            :ARG1 (t / theorem)))

# ::snt The way that a 'term' is defined depends on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term)
            :manner (w / way))
      :ARG1 (a / apply-02))

# ::snt Its first application was in the SMART Information Retrieval System.
(a / application
      :ord (o / ordinal-entity
            :value 1)
      :poss (ii / it)
      :location (s / system
            :name (n / name
                  :op1 "SMART"
                  :op2 "Information"
                  :op3 "Retrieval"
                  :op4 "System")))

# ::snt It doesn't take into account any information about B, so it is "prior".
(c / cause-01
      :ARG0 (t / take-into-account-04
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (ii2 / information
                  :topic (t2 / thing
                        :name (n / name
                              :op1 "B"))
                  :mod (a / any)))
      :ARG1 (p / privilege-01
            :ARG1 ii))

# ::snt Following this, each web page is given a ranking of 0-10 according to its relevance to a search.
(g / give-01
      :ARG1 (r / rank-01
            :ARG1 (p / page
                  :mod (w / web)
                  :mod (e / each))
            :ARG2 (b / between
                  :op1 0
                  :op2 10))
      :ARG2 p
      :ARG1-of (f / follow-01
            :ARG2 (t / this))
      :ARG1-of (c / cause-01
            :ARG0 (r2 / relevant-01
                  :ARG1 p
                  :ARG2 (s / search-01))))

# ::snt Thus, the program is the best plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (p2 / produce-01)
            :domain (p3 / program)
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 p)
                  :ARG3 (m / most))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt These subproblems are not, however, independent.
(c / contrast-01
      :ARG2 (d / depend-01
            :polarity -
            :ARG0 (p / problem
                  :mod (t / this))))

# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
(k / key-02
      :ARG1 (f / find-01
            :ARG1 (s / structure-01
                  :ARG1 (s2 / solution
                        :ARG1-of (o / optimal-02))))
      :ARG2 (p / program-01
            :manner (d / dynamic)))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt Bayes Theorem is a mathematical formula used to calculate conditional probabilities.
(f / formula
      :name (n / name
            :op1 "Bayes"
            :op2 "Theorem")
      :mod (m / mathematics)
      :ARG1-of (u / use-01
            :ARG2 (c / calculate-01
                  :ARG1 (p / probability
                        :mod (c2 / conditional)))))

# ::snt Thus, the program is the best plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (p2 / produce-01)
            :domain (p3 / program)
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 p)
                  :ARG3 (m / most))))

# ::snt It is usually used to calculate posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :mod (u2 / usual))

# ::snt The methodology takes much less time rather than naive methods.
(t / take-10
      :ARG0 (m / methodology)
      :ARG1 (t2 / time
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less
                        :quant (m2 / much))
                  :ARG4 (t3 / time
                        :ARG1-of (t4 / take-10
                              :ARG0 (m3 / method
                                    :mod (n / naive)))))))

# ::snt The methodology takes much less time rather than naive methods.
(t / take-10
      :ARG0 (m / methodology)
      :ARG1 (t2 / time
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less
                        :quant (m2 / much))
                  :ARG4 (t3 / time
                        :ARG1-of (t4 / take-10
                              :ARG0 (m3 / method
                                    :mod (n / naive)))))))

# ::snt The definition of term is dependent on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term))
      :ARG1 (a / apply-02))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt Characterise structure of an optimal solution.
(c / characterise-01
      :ARG1 (s / structure-01
            :ARG1 (s2 / solution
                  :ARG1-of (o / optimal-02))))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
(u / use-01
      :ARG1 (t / theorem)
      :frequency (o / often)
      :time (a / and
            :op1 (o2 / observe-01
                  :ARG0 (w / we))
            :op2 (w2 / wish-01
                  :ARG0 w
                  :ARG1 (c / compute-01
                        :ARG0 w
                        :ARG1 (p / probability
                              :mod (p2 / posterior))))))

# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
(a / advantage-01
      :ARG1 (d / differentiate-101
            :ARG1 (t / thing
                  :ARG2-of (u / use-01)
                  :mod (t2 / this)))
      :frequency (o / occasional)
      :ARG1-of (c / cause-01
            :ARG0 (p / possible-01
                  :polarity -
                  :ARG1 (n / notice-01
                        :ARG1 (d2 / differentiate-01
                              :source (c2 / context))))))

# ::snt Construct an optimal solution from computed values.
(c / construct-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / solution
            :mod (o / optimal))
      :ARG2 (v / value
            :ARG1-of (c2 / compute-01)))

# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
(a / advantage-01
      :ARG1 (d / differentiate-101
            :ARG1 (t / thing
                  :ARG2-of (u / use-01)
                  :mod (t2 / this)))
      :frequency (o / occasional)
      :ARG1-of (c / cause-01
            :ARG0 (p / possible-01
                  :polarity -
                  :ARG1 (n / notice-01
                        :ARG1 (d2 / differentiate-01
                              :source (c2 / context))))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
(u / use-01
      :ARG0 (p / person
            :mod (m / mathematics))
      :ARG1 (w / word)
      :ARG2 (d / describe-01
            :ARG0 p
            :ARG1 (s / set
                  :consist-of (r / rule)
                  :ARG1-of (f / follow-02
                        :ARG0 (a / anyone)
                        :purpose (s2 / solve-01
                              :ARG0 a
                              :ARG1 (p2 / problem))
                        :ARG1-of (p3 / possible-01)))))

# ::snt Whilst Bayesians describe probabilities in terms of beliefs and degrees of uncertainty.
(c / contrast-01
      :ARG2 (d / describe-01
            :ARG0 (p / person
                  :mod (b / bayesian))
            :ARG1 (p2 / probability)
            :ARG2 (a / and
                  :op1 (t / thing
                        :ARG1-of (b2 / believe-01))
                  :op2 (d2 / degree
                        :degree-of (c2 / certain
                              :polarity -)))))

# ::snt It is used in information filtering, information retrieval, indexing and relevancy rankings.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (a / and
            :op1 (f / filter-02
                  :ARG1 (ii2 / information))
            :op2 (r / retrieve-01
                  :ARG1 (ii3 / information))
            :op3 (ii4 / index-01)
            :op4 (r2 / rank-01
                  :ARG3 (r3 / relevancy))))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
(r / relate-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG1 (a / and
            :op1 (p2 / probability
                  :mod (c / conditional))
            :op2 (p3 / probability
                  :ARG1-of (m / marginal-02))
            :poss (e / event
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t2 / theory
            :mod (p4 / probability)))

# ::snt Outbound, links from your page to others.
(l / link-01
      :ARG2 (p / page
            :poss (y / you))
      :ARG3 (o / other)
      :ARG1-of (b / bind-01
            :polarity -))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
(r / result-01
      :ARG1 (r2 / representation-02
            :ARG1 (s / space
                  :ARG1-of (v / Vector-01)))
      :ARG2 (l / lose-02
            :ARG1 (o / order
                  :ARG2-of (o2 / order-01)
                  :location (d / document))))

# ::snt In computer science; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure.
(h / have-manner-91
      :ARG1 (s / solve-01
            :ARG1 (p / problem))
      :ARG2 (p2 / program-01
            :manner (d / dynamic))
      :ARG1-of (c / consist-01
            :ARG2 (a / and
                  :op1 (s2 / subproblem
                        :ARG1-of (o / overlap-01))
                  :op2 (s3 / substructure
                        :ARG1-of (o2 / optimal-02))))
      :topic (s4 / science
            :mod (c2 / computer)))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (v2 / vector)))
      :ARG2 (a / appear-01
            :ARG1 (t2 / term)
            :location (d / document)))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
(r / represent-01
      :ARG1 (d / document
            :ARG2-of (r2 / retrieve-01
                  :ARG1 (ii / information)))
      :ARG2 (v / vectors)
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
(c / call-01
      :ARG1 (s / schedule-01
            :ARG1 (e / event
                  :location (e2 / exhibition))
            :ARG1-of (f / finalize-01))
      :ARG2 (p / program)
      :frequency (s2 / sometimes)
      :ARG0-of (e3 / exemplify-01))

# ::snt Several different ways of computing these values, also known as (term) weights, have been developed.
(d / develop-02
      :ARG1 (w / way
            :manner-of (c / compute-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w2 / weight
                                    :mod (t2 / term))
                              :mod (a / also))))
            :ARG1-of (d2 / differ-02)
            :quant (s / several)))

# ::snt If a term exists in a document, its value in the vector is not equal to zero.
(e / equal-01
      :polarity -
      :ARG1 (t / thing
            :ARG2-of (v / value-01
                  :ARG1 (t2 / thing
                        :ARG2-of (v2 / vector-01))))
      :ARG2 (t3 / thing
            :quant 0)
      :condition (e2 / exist-01
            :ARG1 t2
            :location (d / document)))

# ::snt A hyperlink to a page counts as a vote of support.
(c / count-04
      :ARG1 (h / hyperlink-01
            :ARG2 (p / page))
      :ARG2 (v / vote-01
            :ARG1 (s / support-01)))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt Most of these languages provide an “extend” keyword, which is used to subclass another.
(p / provide-01
      :ARG0 (l / language
            :quant (m / most)
            :ARG1-of (ii / include-91
                  :ARG2 (l2 / language
                        :mod (t / this))))
      :ARG1 (k / keyword
            :mod (e / extend-01)
            :ARG1-of (u / use-01
                  :ARG2 (s / subclass-01
                        :ARG0 l
                        :ARG1 (l3 / language
                              :mod (a / another))))))

# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
(c / call-01
      :ARG1 (s / schedule-01
            :ARG1 (e / event
                  :location (e2 / exhibition))
            :ARG1-of (f / finalize-01))
      :ARG2 (p / program)
      :frequency (s2 / sometimes)
      :ARG0-of (e3 / exemplify-01))

# ::snt The value of a vector is non-zero if a term occurs in the document.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / thing
                        :ARG1-of (v2 / vector-01))))
      :ARG2 (t2 / term
            :location (d / document)))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
(u / use-01
      :ARG1 (t / theorem)
      :frequency (o / often)
      :time (a / and
            :op1 (o2 / observe-01
                  :ARG0 (w / we))
            :op2 (w2 / wish-01
                  :ARG0 w
                  :ARG1 (c / compute-01
                        :ARG0 w
                        :ARG1 (p / probability
                              :mod (p2 / posterior))))))

# ::snt Other possible uses for vector space models are indexing and also to rank the relevancy of differing documents.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (m / model
                  :mod (s / space
                        :ARG1-of (v / vector-01)))
            :ARG2 (a / and
                  :op1 (ii / index-01)
                  :op2 (r / rank-01
                        :ARG1 (r2 / relevancy
                              :poss (d / document
                                    :ARG1-of (d2 / differ-02)))
                        :mod (a2 / also)))))

# ::snt The correct answer can be computed using Bayes' theorem.
(p / possible-01
      :ARG1 (c / compute-01
            :ARG1 (t / thing
                  :ARG2-of (a / answer-01)
                  :ARG1-of (c2 / correct-02))
            :manner (u / use-01
                  :ARG1 (t2 / theorem
                        :poss (p2 / person
                              :name (n / name
                                    :op1 "Bayes"))))))

# ::snt P(B|A) is the conditional probability of B given A.
(p / probability
      :mod (c / conditional)
      :domain (v / variable
            :name (n / name
                  :op1 "P")
            :ARG1-of (g / give-01
                  :ARG2 (v2 / variable
                        :name (n2 / name
                              :op1 "A"))))
      :mod (v3 / variable
            :name (n3 / name
                  :op1 "B")))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
(c / cause-01
      :ARG0 (a / algorithm
            :domain (r / rank-01
                  :ARG2 (p / page))
            :ARG1-of (u / use-01
                  :ARG2 (e / engine
                        :mod (c2 / company
                              :name (n / name
                                    :op1 "Google"))))
            :ARG1-of (h / have-degree-91
                  :ARG2 (ii / important-01
                        :ARG1 a)
                  :ARG3 (m / most))))

# ::snt Nevertheless, the patent is assigned to the University of Stanford and not to Google.
(h / have-concession-91
      :ARG1 (a / and
            :op1 (a2 / assign-01
                  :ARG1 (p / patent-01)
                  :ARG2 (u / university
                        :name (n / name
                              :op1 "University"
                              :op2 "of"
                              :op3 "Stanford")))
            :op2 (a3 / assign-01
                  :polarity -
                  :ARG1 p
                  :ARG2 (c / company
                        :name (n2 / name
                              :op1 "Google")))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt In the vector space model a document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG2-of (v / vector-02))
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt This can be useful when the number of times a word appears is not considered important.
(p / possible-01
      :ARG1 (u / useful-05
            :ARG1 (t / this))
      :time (c / consider-01
            :ARG1 (ii / important-01
                  :polarity -
                  :ARG1 (n / number
                        :quant-of (w / word)))))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
(r / relate-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG1 (a / and
            :op1 (p2 / probability
                  :mod (c / conditional))
            :op2 (p3 / probability
                  :ARG1-of (m / marginal-02))
            :poss (e / event
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t2 / theory
            :mod (p4 / probability)))

# ::snt The definition of term depends on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term))
      :ARG1 (a / apply-02))

# ::snt Break up the problem different smaller subproblems.
(b / break-up-08
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / problem)
      :ARG3 (p2 / problem
            :ARG1-of (h / have-degree-91
                  :ARG2 (s / small)
                  :ARG3 (m / more)
                  :ARG4 p)))

# ::snt Inheritance is a method of forming new classes using predefined classes.
(m / method
      :manner-of (f / form-01
            :ARG1 (c / class
                  :ARG1-of (n / new-01))
            :ARG2-of (u / use-01
                  :ARG1 (c2 / class
                        :ARG1-of (p / predefined-02))))
      :domain (ii / inherit-01))

# ::snt So the same rule applies with keywords and indeed longer phrases.
(c / cause-01
      :ARG1 (a / apply-02
            :ARG1 (r / rule
                  :ARG1-of (s / same-01))
            :ARG2 (a2 / and
                  :op1 (k / keyword)
                  :op2 (p / phrase
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / long-03
                                    :ARG1 p)
                              :ARG3 (m / more)
                              :mod (ii / indeed))))))

# ::snt There is also Conditional Probability which is usually interested in the way variables relate to each other.
(ii / interest-01
      :ARG1 (p / probability
            :mod (c / condition-01))
      :ARG2 (w / way
            :manner-of (r / relate-01
                  :ARG1 (v / variable)
                  :ARG2 (o / other
                        :mod (e / each))))
      :mod (u / usual)
      :mod (a / also))

# ::snt Thus, the program is the best plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (p2 / produce-01)
            :domain (p3 / program)
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 p)
                  :ARG3 (m / most))))

# ::snt Inheritance is a basic concept in object oriented programming.
(c / concept
      :mod (b / basic)
      :topic (p / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :domain (ii / inherit-01))

# ::snt Programming, in this sense, means finding an acceptable plan of action.
(m / mean-01
      :ARG1 (p / program-01)
      :ARG2 (f / find-01
            :ARG1 (p2 / plan-01
                  :ARG1 (a / act-02)
                  :ARG1-of (a2 / accept-01
                        :ARG1-of (p3 / possible-01))))
      :mod (s / sense
            :mod (t / this)))

# ::snt The vector space model has some limitations: 1.
(l / limit-01
      :li 1
      :ARG1 (m / model
            :mod (s / space
                  :ARG1-of (v / vector-01)))
      :mod (s2 / some))

# ::snt Using the vector space model for Information Retrieval models all pages and queries as high-dimensional sparse vectors.
(u / use-01
      :ARG1 (m / model
            :mod (s / space
                  :mod (v / vector))
            :mod (p / product
                  :name (n / name
                        :op1 "Information"
                        :op2 "Retrieval")))
      :ARG2 (a / and
            :op1 (p2 / page)
            :op2 (q / query-01)
            :mod (a2 / all))
      :prep-as (v2 / vector
            :mod (d / dimension
                  :ARG1-of (h / high-02))
            :mod (s2 / sparse)))

# ::snt One of the most famous schemes is tf-idf weighting.
(ii / include-91
      :ARG1 (w / weight-01
            :instrument (p / product
                  :name (n / name
                        :op1 "TF-idF")))
      :ARG2 (s / scheme-01
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / fame-01
                        :ARG1 s)
                  :ARG3 (m / most))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector)
      :manner (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
(r / result-01
      :ARG1 (r2 / representation-02
            :ARG1 (s / space
                  :ARG1-of (v / Vector-01)))
      :ARG2 (l / lose-02
            :ARG1 (o / order
                  :ARG2-of (o2 / order-01)
                  :location (d / document))))

# ::snt P(A) is the probability of the student being a girl (which is 2/5).
(p / probability
      :li "A"
      :domain (g / girl
            :domain (p2 / person
                  :ARG0-of (s / study-01)))
      :ARG1-of (e / equal-01
            :ARG2 "2/5"))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
(ii / idea
      :mod (b / basic)
      :domain (r / represent-01
            :ARG1 (d / document
                  :mod (e / each))
            :ARG2 (v / vector
                  :consist-of (f / frequency
                        :mod (w / word)
                        :ARG1-of (w2 / weight-01)
                        :mod (c / certain)))))

# ::snt Therefore, the "program" is the optimal plan for action that is produced.
(c / cause-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (o / optimal-02)
            :domain (p2 / program)))

# ::snt This is highly used in dynamic programming.
(u / use-01
      :ARG1 (t / this)
      :ARG2 (p / program-01
            :mod (d / dynamic))
      :degree (h / high-02))

# ::snt Other ways of computing these values, or weights, have been developed.
(d / develop-01
      :ARG1 (w / way
            :mod (o / other)
            :instrument-of (c / compute-01
                  :ARG1 (o2 / or
                        :op1 (v / value
                              :mod (t / this))
                        :op2 (m / mass-quantity
                              :ARG2-of (w2 / weigh-01))))))

# ::snt It is usually be used to compute posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / compute-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :mod (u2 / usual))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
(r / relate-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG1 (a / and
            :op1 (p2 / probability
                  :mod (c / conditional))
            :op2 (p3 / probability
                  :ARG1-of (m / marginal-02))
            :poss (e / event
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t2 / theory
            :mod (p4 / probability)))

# ::snt P(B) is the prior or marginal probability of B, and acts as a normalizing constant.
(a / and
      :op1 (p / probability
            :domain (v / variable
                  :name (n / name
                        :op1 "B"))
            :time (p2 / prior)
            :ARG1-of (m / marginal-02))
      :op2 (a2 / act-01
            :ARG0 (v2 / variable
                  :name (n2 / name
                        :op1 "P"))
            :ARG1 (n3 / normalize-01
                  :ARG0 v2
                  :ARG1 (c / constant))))

# ::snt A website’s page rank, is how ‘important’ it is on the web.
(r / rank-01
      :ARG1 (p / page
            :poss (w / website))
      :ARG3 (t / thing
            :degree-of (ii / important-01
                  :ARG1 w
                  :location (w2 / web))))

# ::snt In computer science; dynamic programming is a way of solving problems consist of overlapping subproblems and optimal substructure.
(h / have-manner-91
      :ARG1 (s / solve-01
            :ARG1 (p / problem))
      :ARG2 (p2 / program-01
            :manner (d / dynamic))
      :ARG1-of (c / consist-01
            :ARG2 (a / and
                  :op1 (s2 / subproblem
                        :ARG1-of (o / overlap-01))
                  :op2 (s3 / substructure
                        :ARG1-of (o2 / optimal-02))))
      :topic (s4 / science
            :mod (c2 / computer)))
Th
# ::snt The most popular is tf-idf weighting.
(h / have-degree-91
      :ARG1 (w / weight-01
            :instrument (p / product
                  :name (n / name
                        :op1 "TF-idF")))
      :ARG2 (p2 / popular-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt This method is used in the Google Toolbar, which reports back actual site visits to Google.
(u / use-01
      :ARG1 (m / method
            :mod (t / this))
      :location (p / product
            :name (n / name
                  :op1 "Google"
                  :op2 "Toolbar")
            :ARG0-of (r / report-01
                  :ARG1 (v / visit-01
                        :ARG1 (c / company
                              :name n
                              :op1 "Google"))
                  :ARG1-of (a / actual-02)
                  :mod (s / site))
            :direction (b / back)))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
(o / obligate-01
      :ARG2 (n / note-01
            :ARG0 (p / person
                  :ARG0-of (p2 / program-01))
            :ARG1 (a / and
                  :op1 (g / generalize-01
                        :ARG1 (a2 / aspect
                              :mod (v / various)
                              :part-of p2))
                  :op2 (r / resemble-01
                        :ARG1 a2)))
      :purpose (a3 / achieve-01
            :ARG0 p
            :ARG1 (t / this)))

# ::snt Construct an optimal solution from computed values.
(c / construct-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / solution
            :mod (o / optimal))
      :ARG2 (v / value
            :ARG1-of (c2 / compute-01)))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
(v / value
      :quant 0
      :domain (t / thing
            :ARG2-of (v2 / vector-01))
      :condition (b / be-located-at-91
            :polarity -
            :ARG1 (t2 / term)
            :ARG2 (d / document)))

# ::snt This is a much quicker method than other more naive methods.
(h / have-degree-91
      :ARG1 (m / method
            :domain (t / this))
      :ARG2 (q / quick-02
            :ARG1 m)
      :ARG3 (m2 / more
            :quant (m3 / much))
      :ARG4 (m4 / method
            :mod (n / naive)
            :mod (o / other)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 n
                  :ARG3 (m5 / more))))

# ::snt P(B) is the prior or marginal probability of B, and acts to normalise the probability.
(a / and
      :op1 (p / probability
            :mod (o / or
                  :op1 (p2 / prior)
                  :op2 (m / marginal-02))
            :domain (v / variable
                  :name (n / name
                        :op1 "B")))
      :op2 (a2 / act-02
            :ARG0 v
            :ARG1 (n2 / normalize-01
                  :ARG0 v
                  :ARG1 p)))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
(f / form-01
      :ARG0 (ii / inherit-01
            :ARG1 (p / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :ARG1 (c / class
            :ARG1-of (n / new-01)
            :ARG2-of (u / use-01
                  :ARG1 (c2 / class
                        :ARG1-of (d / define-01
                              :time (a / already)))))
      :manner (w / way))

# ::snt They also inherit the attributes and methods of its superclass.
(ii / inherit-01
      :ARG0 (t / they)
      :ARG1 (a / and
            :op1 (a2 / attribute-01
                  :ARG2 (c / class
                        :mod (s / super)
                        :poss (ii2 / it)))
            :op2 (m / method
                  :poss c))
      :mod (a3 / also))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
(v / value-01
      :ARG1 (t / term
            :location (d / document))
      :ARG2 (t2 / thing
            :mod (z / zero)
            :ARG2-of (v2 / vector-00)))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (v2 / vector)))
      :ARG2 (a / appear-01
            :ARG1 (t2 / term)
            :location (d / document)))

# ::snt The order in which terms appear in the document is lost in a vector space representation.
(l / lose-02
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt However, the vector space model has limitations.
(c / contrast-01
      :ARG2 (l / limit-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (v / vector)))))

# ::snt The method can be abused when people deliberately link to sites in order to raise a site's PageRank.
(p / possible-01
      :ARG1 (a / abuse-01
            :ARG1 (m / method)
            :condition (l / link-01
                  :ARG0 (p2 / person)
                  :ARG2 (s / site)
                  :manner (d / deliberate)
                  :purpose (r / raise-01
                        :ARG0 p2
                        :ARG1 (r2 / rank-01
                              :ARG1 (s2 / site)
                              :ARG2 (p3 / page))))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
(ii / idea
      :mod (b / basic)
      :domain (r / represent-01
            :ARG1 (d / document
                  :mod (e / each))
            :ARG2 (v / vector
                  :consist-of (f / frequency
                        :mod (w / word)
                        :ARG1-of (w2 / weight-01)
                        :mod (c / certain)))))

# ::snt Programming, in this sense, means finding an acceptable plan of action.
(m / mean-01
      :ARG1 (p / program-01)
      :ARG2 (f / find-01
            :ARG1 (p2 / plan-01
                  :ARG1 (a / act-02)
                  :ARG1-of (a2 / accept-01
                        :ARG1-of (p3 / possible-01))))
      :mod (s / sense
            :mod (t / this)))

# ::snt Google’s payoff is that it gets to track the behaviour of actual users.
(p / pay-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Google"))
      :ARG3 (g / get-22
            :ARG0 c
            :ARG1 (t / track-01
                  :ARG0 c
                  :ARG1 (b / behave-01
                        :ARG0 (p2 / person
                              :ARG0-of (u / use-01)
                              :ARG1-of (a / actual-02))))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt Bayes’ theorem was names after Rev Thomas Bayes and is a method used in probability theory.
(a / and
      :op1 (n / name-02
            :ARG1 (t / theorem
                  :poss (p / person
                        :name (n2 / name
                              :op1 "Thomas"
                              :op2 "Bayes")
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (r / reverend))))
            :ARG2 (n3 / name-01
                  :ARG1 t))
      :op2 (m / method
            :ARG1-of (u / use-01
                  :ARG2 (t2 / theory
                        :mod (p2 / probability)))
            :domain t))

# ::snt Dynamic Programming solves problems by combining the solutions of subproblems.
(s / solve-01
      :ARG0 (p / program
            :name (n / name
                  :op1 "Dynamic"
                  :op2 "Programming"))
      :ARG1 (p2 / problem)
      :manner (c / combine-01
            :ARG0 p
            :ARG1 (s2 / solution
                  :topic (p3 / problem))))

# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
(m / mean-01
      :ARG1 (t / term)
      :ARG2 (o / or
            :op1 (w / word)
            :op2 (u / unit
                  :ARG0-of (ii / index-01)
                  :mod (a / any)
                  :ARG1-of (u2 / use-01
                        :ARG2 (ii2 / identify-01
                              :ARG1 (t2 / thing
                                    :ARG1-of (c / contain-01
                                          :ARG0 (t3 / text)))))))
      :mod (b / basic))

# ::snt The vector space model are the documents which are represented as “bags of words”.
(d / document
      :ARG1-of (r / represent-01
            :ARG0 (b / bag
                  :consist-of (w / word)))
      :domain (m / model
            :name (n / name
                  :op1 " vector"
                  :op2 "Space"
                  :op3 "Model")))

# ::snt Thus, the "program" is the optimal plan of action that is being produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02)
            :ARG1-of (o / optimal-02)
            :domain (p2 / program)))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
(o / obligate-01
      :ARG2 (n / note-01
            :ARG0 (p / person
                  :ARG0-of (p2 / program-01))
            :ARG1 (a / and
                  :op1 (g / generalize-01
                        :ARG1 (a2 / aspect
                              :mod (v / various)
                              :part-of p2))
                  :op2 (r / resemble-01
                        :ARG1 a2)))
      :purpose (a3 / achieve-01
            :ARG0 p
            :ARG1 (t / this)))

# ::snt Subclasses are said to extend or specialise their superclasses.
(s / say-01
      :ARG1 (o / or
            :op1 (e / extend-01
                  :ARG0 (s2 / subclass)
                  :ARG1 (c / class
                        :poss s2))
            :op2 (s3 / specialize-01
                  :ARG0 s2
                  :ARG1 c)))

# ::snt It is also called the posterior probability because it is derived from or depends upon the specified value of B.
(c / cause-01
      :ARG0 (o / or
            :op1 (d / derive-01
                  :ARG1 (ii / it)
                  :ARG2 (v / value
                        :mod (v2 / variable
                              :name (n / name
                                    :op1 "B"))
                        :ARG1-of (s / specify-01)))
            :op2 (d2 / depend-01
                  :ARG0 ii
                  :ARG1 v))
      :ARG1 (c2 / call-01
            :ARG1 ii
            :ARG2 (p / probability
                  :mod (p2 / posterior))
            :mod (a / also)))

# ::snt This can be useful when the number of times a word appears is not considered important.
(p / possible-01
      :ARG1 (u / useful-05
            :ARG1 (t / this))
      :time (c / consider-01
            :ARG1 (ii / important-01
                  :polarity -
                  :ARG1 (n / number
                        :quant-of (w / word)))))

# ::snt Java allows object inheritance.
(a / allow-01
      :ARG0 (l / language
            :name (n / name
                  :op1 "Java"))
      :ARG1 (ii / inherit-01
            :ARG1 (o / object)))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
(u / use-01
      :ARG0 (p / person
            :mod (m / mathematics))
      :ARG1 (w / word)
      :ARG2 (d / describe-01
            :ARG0 p
            :ARG1 (s / set
                  :consist-of (r / rule)
                  :ARG1-of (f / follow-02
                        :ARG0 (a / anyone)
                        :purpose (s2 / solve-01
                              :ARG0 a
                              :ARG1 (p2 / problem))
                        :ARG1-of (p3 / possible-01)))))

# ::snt Virtual attributes and methods can be shadowed/overridden.
(p / possible-01
      :ARG1 (s / slash
            :op1 (s2 / shadow-01
                  :ARG1 (a / and
                        :op1 (a2 / attribute-01)
                        :op2 (m / method)
                        :mod (v / virtual)))
            :op2 (o / overridden
                  :domain a)))

# ::snt One of the best known schemes is tf-idf weighting, proposed by Salton, Wong and Yang.
(ii / include-91
      :ARG1 (w / weight-01
            :ARG2 (t / thing
                  :name (n / name
                        :op1 "TF-idf"))
            :ARG1-of (p / propose-01
                  :ARG0 (a / and
                        :op1 (p2 / person
                              :name (n2 / name
                                    :op1 "Salton"))
                        :op2 (p3 / person
                              :name (n3 / name
                                    :op1 "Wong"))
                        :op3 (p4 / person
                              :name (n4 / name
                                    :op1 "Yang")))))
      :ARG2 (s / scheme-01
            :ARG1-of (k / know-02
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s)
                        :ARG3 (m / most)))))

# ::snt In the vector space model a document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG2-of (v / vector-02))
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt It is intended to help reuse existing code with little or no modification.
(ii / intend-01
      :ARG1 (h / help-01
            :ARG0 (ii2 / it)
            :ARG1 (r / reuse-01
                  :ARG1 (c / code
                        :ARG1-of (e / exist-01))
                  :manner (o / or
                        :op1 (m / modify-01
                              :ARG1 c
                              :degree (l / little))
                        :op2 (m2 / modify-01
                              :polarity -
                              :ARG1 c)))))

# ::snt It is often used to compute posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / compute-01
            :ARG0 ii
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :frequency (o2 / often))

# ::snt When any sub-problem is met again, it can be found and re-used to solve another problem.
(p / possible-01
      :ARG1 (a / and
            :op1 (f / find-01
                  :ARG1 (p2 / problem
                        :mod (s / sub)
                        :mod (a2 / any)))
            :op2 (r / reuse-01
                  :ARG1 p2)
            :purpose (s2 / solve-01
                  :ARG0 p2
                  :ARG1 (p3 / problem
                        :mod (a3 / another))))
      :time (m / meet-03
            :ARG1 (p4 / problem
                  :mod s)
            :mod (a4 / again)))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
(p / peropos
      :domain (ii / inherit-01
            :location (p2 / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :purpose (m / minimize-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / code
                        :ARG1-of (e / exist-01))
                  :manner (m2 / modify-01
                        :polarity -
                        :ARG1 c)))
      :ARG0-of m)

# ::snt Every dimension is precisely related to a separate term.
(r / relate-01
      :ARG1 (d / dimension
            :mod (e / every))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :manner (p / precise))

# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
(m / method
      :mod (t / top-down)
      :domain (m2 / method
            :ARG0-of (c / combine-01
                  :ARG1 (m3 / memorize-01)
                  :ARG2 (r / recursion)))
      :mod (o / other))

# ::snt P(A), or the probability that the student is a girl regardless of any other information.
(p / probability
      :li "A"
      :domain (g / girl
            :domain (p2 / person
                  :ARG0-of (s / study-01)))
      :ARG1-of (r / regardless-91
            :ARG2 (ii / information
                  :mod (a / any)
                  :mod (o / other))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
(o / obligate-01
      :ARG2 (n / note-01
            :ARG0 (p / person
                  :ARG0-of (p2 / program-01))
            :ARG1 (a / and
                  :op1 (g / generalize-01
                        :ARG1 (a2 / aspect
                              :mod (v / various)
                              :part-of p2))
                  :op2 (r / resemble-01
                        :ARG1 a2)))
      :purpose (a3 / achieve-01
            :ARG0 p
            :ARG1 (t / this)))

# ::snt The vector space model are the documents which are represented as “bags of words”.
(d / document
      :ARG1-of (r / represent-01
            :ARG0 (b / bag
                  :consist-of (w / word)))
      :domain (m / model
            :name (n / name
                  :op1 " vector"
                  :op2 "Space"
                  :op3 "Model")))

# ::snt The vector space model is one of these methods, and it is an algebraic model.
(a / and
      :op1 (ii / include-91
            :ARG1 (m / model
                  :name (n / name
                        :op1 " vector"
                        :op2 "Space"
                        :op3 "Model"))
            :ARG2 (m2 / method
                  :mod (t / this)))
      :op2 (m3 / model
            :mod (m4 / mathematics)
            :domain m))

# ::snt The vector space model has the following limitations: 1.
(l / limit-01
      :li 1
      :ARG1 (m / model
            :mod (s / space
                  :ARG1-of (v / vector-01)))
      :ARG1-of (f / follow-04))

# ::snt However an object cannot be cast to a class which is no relative of it.
(c / contrast-01
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (c2 / cast-01
                  :ARG1 (o / object)
                  :ARG2 (c3 / class
                        :ARG1-of (r / relative-05
                              :polarity -
                              :ARG2 o)))))

# ::snt The vector is then constucted of the frequency of eacher word (dimension).
(c / constuct-01
      :ARG1 (t / thing
            :ARG2-of (v / vector-01))
      :ARG3 (f / frequency
            :poss (w / word
                  :name (n / name
                        :op1 "Eacher")
                  :ARG1-of (m / mean-01
                        :ARG2 (d / dimension))))
      :time (t2 / then))

# ::snt Typically terms are single words, keywords, or longer phrases.
(o / or
      :op1 (w / word
            :ARG1-of (s / single-02))
      :op2 (k / keyword)
      :op3 (p / phrase
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / long-03
                        :ARG1 p)
                  :ARG3 (m / more)))
      :domain (t / term)
      :ARG1-of (t2 / typical-02))

# ::snt It does not take into account any information about B and therefore is considered “prior”.
(c / cause-01
      :ARG0 (t / take-into-account-04
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (ii2 / information
                  :topic (t2 / thing
                        :name (n / name
                              :op1 "B"))
                  :mod (a / any)))
      :ARG1 (c2 / consider-01
            :ARG1 (p / prior
                  :domain ii)))

# ::snt The PageRank depends on the PageRank rating and number of all pages that have links to it.
(d / depend-01
      :ARG0 (t / thing
            :name (n / name
                  :op1 "Page"
                  :op2 "Rank"))
      :ARG1 (a / and
            :op1 (r / rate-01
                  :ARG1 t)
            :op2 (n2 / number
                  :quant-of (p / page
                        :mod (a2 / all)
                        :ARG0-of (l / link-01
                              :ARG2 t)))))

# ::snt Construct an optimal solution from computed values.
(c / construct-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / solution
            :mod (o / optimal))
      :ARG2 (v / value
            :ARG1-of (c2 / compute-01)))

# ::snt Single words, keywords and occasionally longer phrases are used for terms.
(u / use-01
      :ARG1 (a / and
            :op1 (w / word
                  :ARG1-of (s / single-02))
            :op2 (k / keyword)
            :op3 (p / phrase
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 p)
                        :ARG3 (m / more
                              :frequency (o / occasional)))))
      :ARG2 (t / term))

# ::snt The vector space model has several disadvantages.
(d / disadvantage
      :quant (s / several)
      :domain (m / model
            :mod (s2 / space
                  :ARG1-of (v / vector-01))))

# ::snt Every dimension is precisely related to a separate term.
(r / relate-01
      :ARG1 (d / dimension
            :mod (e / every))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :manner (p / precise))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt This is highly used in dynamic programming.
(u / use-01
      :ARG1 (t / this)
      :ARG2 (p / program-01
            :mod (d / dynamic))
      :degree (h / high-02))

# ::snt The idea of inheritance is to reuse the existing code with little or no modification at all.
(ii / idea
      :topic (ii2 / inherit-01)
      :consist-of (r / reuse-01
            :ARG1 (c / code
                  :ARG1-of (e / exist-01))
            :manner (o / or
                  :op1 (m / modify-01
                        :ARG1 c
                        :degree (l / little))
                  :op2 (m2 / modify-01
                        :polarity -
                        :ARG1 c
                        :degree (a / at-all)))))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
(p / peropos
      :domain (ii / inherit-01
            :location (p2 / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :purpose (m / minimize-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / code
                        :ARG1-of (e / exist-01))
                  :manner (m2 / modify-01
                        :polarity -
                        :ARG1 c)))
      :ARG0-of m)

# ::snt A document is represented as a vector and each dimension corresponds to a separate term.
(a / and
      :op1 (r / represent-01
            :ARG1 (d / document)
            :ARG2 (v / vector))
      :op2 (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt It is valid in all common interpretations of probability.
(v / valid-02
      :ARG1 (ii / it)
      :location (ii2 / interpret-01
            :ARG1 (p / probability)
            :mod (c / common)
            :mod (a / all)))

# ::snt The order in which the terms appear in the document is lost in the vector space representation.
(l / lose-02
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt Since it is a formal theorem, Bayes' theorem holds in all popular interpretations of probability.
(h / hold-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :location (ii / interpret-01
            :ARG1 (p2 / probability)
            :ARG1-of (p3 / popular-02)
            :mod (a / all))
      :ARG1-of (c / cause-01
            :ARG0 (t2 / theorem
                  :mod (f / formal)
                  :domain t)))

# ::snt The methodology takes much less time rather than naive methods.
(t / take-10
      :ARG0 (m / methodology)
      :ARG1 (t2 / time
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less
                        :quant (m2 / much))
                  :ARG4 (t3 / time
                        :ARG1-of (t4 / take-10
                              :ARG0 (m3 / method
                                    :mod (n / naive)))))))

# ::snt The most popular is tf-idf weighting.
(h / have-degree-91
      :ARG1 (w / weight-01
            :instrument (p / product
                  :name (n / name
                        :op1 "TF-idF")))
      :ARG2 (p2 / popular-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt The value of a vector is non-zero if a term occurs in the document.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / thing
                        :ARG1-of (v2 / vector-01))))
      :ARG2 (t2 / term
            :location (d / document)))

# ::snt The value of a vector is non-zero if a term occurs in the document.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / thing
                        :ARG1-of (v2 / vector-01))))
      :ARG2 (t2 / term
            :location (d / document)))

# ::snt The way that a 'term' is defined depends on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term)
            :manner (w / way))
      :ARG1 (a / apply-02))

# ::snt The similarity measures largely identify the retrieval efficiency of a particular information retrieval system.
(ii / identify-01
      :ARG0 (m / measure-01
            :ARG1 (r / resemble-01))
      :ARG1 (e / efficient-01
            :ARG1 (s / system
                  :ARG0-of (r2 / retrieve-01
                        :ARG1 (ii2 / information))
                  :mod (p / particular))
            :ARG2 (r3 / retrieve-01
                  :ARG1 ii2))
      :degree (l / large))

# ::snt Typically terms are keywords, single words or longer phrases.
(o / or
      :op1 (k / keyword)
      :op2 (w / word
            :ARG1-of (s / single-02))
      :op3 (p / phrase
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / long-03
                        :ARG1 p)
                  :ARG3 (m / more)))
      :domain (t / term)
      :ARG1-of (t2 / typical-02))

# ::snt The vector space model is one of these methods, and it is an algebraic model.
(a / and
      :op1 (ii / include-91
            :ARG1 (m / model
                  :name (n / name
                        :op1 " vector"
                        :op2 "Space"
                        :op3 "Model"))
            :ARG2 (m2 / method
                  :mod (t / this)))
      :op2 (m3 / model
            :mod (m4 / mathematics)
            :domain m))

# ::snt Therefore, the "program" is the optimal plan for action that is produced.
(c / cause-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (o / optimal-02)
            :domain (p2 / program)))

# ::snt Construct an optimal solution from computed values.
(c / construct-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / solution
            :mod (o / optimal))
      :ARG2 (v / value
            :ARG1-of (c2 / compute-01)))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
(u / use-01
      :ARG1 (t / theorem)
      :frequency (o / often)
      :time (a / and
            :op1 (o2 / observe-01
                  :ARG0 (w / we))
            :op2 (w2 / wish-01
                  :ARG0 w
                  :ARG1 (c / compute-01
                        :ARG0 w
                        :ARG1 (p / probability
                              :mod (p2 / posterior))))))

# ::snt Generalise the structure of an optimal solution 2.
(g / generalize-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / structure-01
            :ARG1 (s2 / solution
                  :mod 2
                  :mod (o / optimal))))

# ::snt The vector space model is one of these methods, and it is an algebraic model.
(a / and
      :op1 (ii / include-91
            :ARG1 (m / model
                  :name (n / name
                        :op1 " vector"
                        :op2 "Space"
                        :op3 "Model"))
            :ARG2 (m2 / method
                  :mod (t / this)))
      :op2 (m3 / model
            :mod (m4 / mathematics)
            :domain m))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
(v / value
      :quant 0
      :domain (t / thing
            :ARG2-of (v2 / vector-01))
      :condition (b / be-located-at-91
            :polarity -
            :ARG1 (t2 / term)
            :ARG2 (d / document)))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt Overlapping subproblems means that the same subproblems are used to solve many different larger problems.
(m / mean-01
      :ARG1 (o / overlay-01))

# ::snt The differing application has a direct influence on what the definition of the term means.
(ii / influence-01
      :ARG0 (a / apply-02
            :ARG1-of (d / differ-02))
      :ARG1 (t / thing
            :ARG2-of (d2 / define-01
                  :ARG1 (t2 / term)))
      :ARG1-of (d3 / direct-02))

# ::snt The differing application has a direct influence on what the definition of the term means.
(ii / influence-01
      :ARG0 (a / apply-02
            :ARG1-of (d / differ-02))
      :ARG1 (t / thing
            :ARG2-of (d2 / define-01
                  :ARG1 (t2 / term)))
      :ARG1-of (d3 / direct-02))

# ::snt Inheritance is an important feature in object orientated programming.
(f / feature
      :ARG1-of (ii / important-01)
      :domain (ii2 / inherit-01)
      :part-of (p / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object))))

# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
(r / relate-01
      :ARG1 (p / probability
            :time (p2 / prior)
            :mod (c / conditional)
            :domain (p3 / probability
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t / theorem
            :poss (p4 / person
                  :name (n / name
                        :op1 "Bayes")))
      :topic (t2 / theory
            :mod (p5 / probability)))

# ::snt Without a proof of correctness, such an algorithm is likely to fail.
(l / likely-01
      :ARG1 (f / fail-01
            :ARG1 (a / algorithm
                  :mod (s / such))
            :condition (p / prove-01
                  :polarity -
                  :ARG1 (c / correct-02))))

# ::snt So in essence it is a popularity contest between WebPages.
(c / contest-02
      :ARG0 (p / publication
            :name (n / name
                  :op1 "WebPages"))
      :ARG1 (p2 / popularity)
      :mod (e / essence)
      :ARG1-of (ii / infer-01))

# ::snt Several different ways of computing these values, additionally known as (term) weights, have been developed.
(d / develop-02
      :ARG1 (w / way
            :manner-of (c / compute-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w2 / weight
                                    :mod (t2 / term))
                              :mod (a / additional))))
            :ARG1-of (d2 / differ-02)
            :quant (s / several)))

# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
(m / method
      :mod (t / top-down)
      :domain (m2 / method
            :ARG0-of (c / combine-01
                  :ARG1 (m3 / memorize-01)
                  :ARG2 (r / recursion)))
      :mod (o / other))

# ::snt The order in which terms appear in the document is lost in a vector space representation.
(l / lose-02
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt The method takes much less time than naive methods.
(t / take-10
      :ARG0 (m / method)
      :ARG1 (t2 / time
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less
                        :quant (m2 / much))
                  :ARG4 (m3 / method
                        :mod (n / naive)))))

# ::snt Inheritance is one of the basic concepts of Object Oriented Programming.
(ii / include-91
      :ARG1 (ii2 / inherit-01)
      :ARG2 (c / concept
            :mod (b / basic)
            :poss (p / program
                  :ARG1-of (d / develop-02)
                  :ARG1-of (ii3 / integrate-01
                        :ARG2 (o / object)))))

# ::snt As a formal theorem, Bayes' theorem is valid in all common interpretations of probability.
(v / valid-02
      :ARG1 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :prep-as (t2 / theorem
            :mod (f / formal))
      :location (ii / interpret-01
            :ARG1 (p2 / probability)
            :mod (a / all)
            :mod (c / common)))

# ::snt Thus, the program is the best plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (p2 / produce-01)
            :domain (p3 / program)
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 p)
                  :ARG3 (m / most))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
(ii / idea
      :mod (b / basic)
      :domain (r / represent-01
            :ARG1 (d / document
                  :mod (e / each))
            :ARG2 (v / vector
                  :consist-of (f / frequency
                        :mod (w / word)
                        :ARG1-of (w2 / weight-01)
                        :mod (c / certain)))))

# ::snt Object oriented programming is a style of programming that supports encapsulation, inheritance, and polymorphism.
(s / style
      :mod (p / program-01)
      :ARG0-of (s2 / support-01
            :ARG1 (a / and
                  :op1 (e / encapsulate-01)
                  :op2 (ii / inherit-01)
                  :op3 (p2 / polymorphism)))
      :domain (p3 / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object))))

# ::snt The vector space model has some limitations: 1.
(l / limit-01
      :li 1
      :ARG1 (m / model
            :mod (s / space
                  :ARG1-of (v / vector-01)))
      :mod (s2 / some))

# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :domain (o / outcome
                        :poss (e / event
                              :quant 1))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (e2 / event
                              :time (p2 / previous)))))
      :mod (m / main))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
(u / use-01
      :ARG1 (t / theorem)
      :frequency (o / often)
      :time (a / and
            :op1 (o2 / observe-01
                  :ARG0 (w / we))
            :op2 (w2 / wish-01
                  :ARG0 w
                  :ARG1 (c / compute-01
                        :ARG0 w
                        :ARG1 (p / probability
                              :mod (p2 / posterior))))))

# ::snt This can be useful when the number of times a word appears is not considered important.
(p / possible-01
      :ARG1 (u / useful-05
            :ARG1 (t / this))
      :time (c / consider-01
            :ARG1 (ii / important-01
                  :polarity -
                  :ARG1 (n / number
                        :quant-of (w / word)))))

# ::snt In probability theory, Bayes' theorem relates the conditional and marginal probabilities of two random events.
(r / relate-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG1 (a / and
            :op1 (p2 / probability
                  :mod (c / conditional))
            :op2 (p3 / probability
                  :ARG1-of (m / marginal-02))
            :poss (e / event
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t2 / theory
            :mod (p4 / probability)))

# ::snt One of the best known schemes is tf-idf weighting (see the example below).
(ii / include-91
      :ARG1 (w / weight-01
            :manner (t / thing
                  :name (n / name
                        :op1 "FTF-idf")))
      :ARG2 (s / scheme-01
            :ARG1-of (k / know-02
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s)
                        :ARG3 (m / most))))
      :ARG3 (o / one)
      :ARG1-of (s2 / see-01
            :mode imperative
            :ARG0 (y / you)
            :location (b / below)))

# ::snt It is therefore used to create relationships between one object and another.
(c / cause-01
      :ARG1 (u / use-01
            :ARG1 (ii / it)
            :ARG2 (c2 / create-01
                  :ARG1 (r / relation-03
                        :ARG0 (o / object)
                        :ARG2 (o2 / object
                              :mod (a / another))))))

# ::snt Then, using this, the best overall path can be found, thereby demonstrating the dynamic programming principle.
(c / cause-01
      :ARG0 (u / use-01
            :ARG1 (t / this))
      :ARG1 (p / possible-01
            :ARG1 (f / find-01
                  :ARG1 (p2 / path
                        :mod (o / overall)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (g / good-02
                                    :ARG1 p2)
                              :ARG3 (m / most))))
            :ARG0-of (d / demonstrate-01
                  :ARG1 (p3 / principle
                        :topic (p4 / program-01
                              :manner (d2 / dynamic))))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt To achieve this, the programmer has to note generalisations and similarities about various aspects of the program.
(o / obligate-01
      :ARG2 (n / note-01
            :ARG0 (p / person
                  :ARG0-of (p2 / program-01))
            :ARG1 (a / and
                  :op1 (g / generalize-01
                        :ARG1 (a2 / aspect
                              :mod (v / various)
                              :part-of p2))
                  :op2 (r / resemble-01
                        :ARG1 a2)))
      :purpose (a3 / achieve-01
            :ARG0 p
            :ARG1 (t / this)))

# ::snt The further down an inheritance tree you get, the more specific the classes become.
(c / correlate-91
      :ARG1 (m / more
            :ARG3-of (h / have-quant-91
                  :ARG1 (f / further
                        :ARG3-of (h2 / have-degree-91
                              :ARG1 (t / tree
                                    :mod (ii / inherit-01))
                              :ARG2 (l / long-03
                                    :ARG1 t)))))
      :ARG2 (m2 / more
            :ARG3-of (h3 / have-degree-91
                  :ARG1 (b / become-01
                        :ARG1 (c2 / class))
                  :ARG2 (s / specific-02
                        :ARG1 c2))))

# ::snt The algebraic model for representing text documents and objects as vectors of identifiers is called the vector space model.
(c / call-01
      :ARG1 (m / model
            :mod (m2 / mathematics)
            :ARG0-of (r / represent-01
                  :ARG1 (a / and
                        :op1 (d / document
                              :mod (t / text))
                        :op2 (o / object))
                  :ARG2 (t2 / thing
                        :ARG2-of (ii / identify-01
                              :ARG1 (t3 / thing)
                              :ARG1 t3))
                  :ARG3 (t4 / thing
                        :ARG2-of (v / vector-01))))
      :ARG2 (m3 / model
            :mod (s / space
                  :mod (t5 / thing
                        :ARG2-of (v2 / vector-01)))))

# ::snt In general, dynamic programming is used on optimisation problems, where the most efficient solution is needed.
(u / use-01
      :ARG1 (p / program-01
            :mod (d / dynamic))
      :ARG2 (p2 / problem
            :topic (o / optimize-01)
            :location-of (n / need-01
                  :ARG1 (s / solution
                        :ARG1-of (h / have-degree-91
                              :ARG2 (e / efficient-01
                                    :ARG1 s)
                              :ARG3 (m / most)))))
      :ARG1-of (g / general-02))

# ::snt It is used in information filtering, information retrieval, indexing and relevancy rankings.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (a / and
            :op1 (f / filter-02
                  :ARG1 (ii2 / information))
            :op2 (r / retrieve-01
                  :ARG1 (ii3 / information))
            :op3 (ii4 / index-01)
            :op4 (r2 / rank-01
                  :ARG3 (r3 / relevancy))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
(w / way
      :manner-of (l / look-01
            :ARG1 (ii / inherit-01)
            :ARG2 (r / relation-03
                  :ARG1 ii
                  :mod (k / kind)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt This means that inheritance is used when types have common factors and these would be put into the superclass.
(m / mean-01
      :ARG1 (t / this)
      :ARG2 (a / and
            :op1 (u / use-01
                  :ARG1 (ii / inherit-01)
                  :time (h / have-03
                        :ARG0 (t2 / type)
                        :ARG1 (f / factor
                              :ARG1-of (s / share-01))))
            :op2 (p / put-01
                  :ARG1 ii
                  :ARG2 (c / class
                        :mod (s2 / super)))))

# ::snt Driver backs into stroller with child, drives off
(a / and
      :op1 (b / back-02
            :ARG0 (p / person
                  :ARG0-of (d / drive-01))
            :ARG1 (s / stroller)
            :accompanier (c / child))
      :op2 d
      :ARG0 p
      :direction (o / off))

# ::snt Spain Princess Testifies in Historic Fraud Probe
(t / testify-01
      :ARG0 (p / princess
            :mod (c / country
                  :name (n / name
                        :op1 "Spain")))
      :subevent-of (p2 / probe-01
            :ARG1 (d / defraud-01
                  :mod (h / history))))

# ::snt Senate confirms Obama nominee to key appeals court
(c / confirm-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate"))
      :ARG1 (n2 / nominate-01
            :ARG1 (p / person
                  :name (n3 / name
                        :op1 "Obama"))
            :ARG2 (c2 / court
                  :ARG2-of (a / appeal-01)
                  :ARG1-of (k / key-02))))

# ::snt U.N. rights chief presses Egypt on Mursi detention
(p / press-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 "U.N."))
                  :ARG2 (c / chief
                        :topic (r / right-05))))
      :ARG1 (c2 / country
            :name (n2 / name
                  :op1 "Egypt"))
      :ARG2 (d / detain-01
            :ARG1 (p3 / person
                  :name (n3 / name
                        :op1 "Mursi"))))

# ::snt US Senate confirms Janet Yellen as US Federal Reserve chief
(c / confirm-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate")
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "US")))
      :ARG1 (p / person
            :name (n3 / name
                  :op1 "Janet"
                  :op2 "Yellen")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g2 / government-organization
                        :name (n4 / name
                              :op1 "US"
                              :op2 "Federal"
                              :op3 "Reserve"))
                  :ARG2 (c3 / chief))))

# ::snt Syrian Rebel Groups Battle Each Other in North
(b / battle-01
      :ARG0 (g / group
            :ARG0-of (r / rebel-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Syria")))
      :ARG1 g
      :location (n2 / north))

# ::snt Mayawati demands president's rule in Kashmir
(d / demand-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Mayawati"))
      :ARG1 (r / rule-03
            :ARG0 (p2 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (p3 / president)))
            :location (w / world-region
                  :name (n2 / name
                        :op1 "Kashmir"))))

# ::snt Uganda's president signs anti-gay bill
(s / sign-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Uganda"))
                  :ARG2 (p2 / president)))
      :ARG1 (b / bill
            :ARG0-of (o / oppose-01
                  :ARG1 (g / gay-01))))

# ::snt Rocks, Tear Gas Fly as Thai Protests Heat Up
(a / and
      :op1 (r / rock)
      :op2 (g / gas
            :ARG2-of (t / tear-01))
      :time (h / heat-up-02
            :ARG1 (p / protest-01
                  :ARG0 (c / country
                        :name (n / name
                              :op1 "Thailand")))))

# ::snt Boston bombing suspect buried in Virginia
(b / bury-01
      :ARG1 (p / person
            :ARG2-of (s / suspect-01
                  :ARG1 (b2 / bomb-01
                        :location (c / city
                              :name (n / name
                                    :op1 "Boston")))))
      :location (s2 / state
            :name (n2 / name
                  :op1 "Virginia")))

# ::snt Six dead in Philippine restaurant blast
(d / die-01
      :ARG1 (p / person
            :quant 6)
      :ARG1-of (c / cause-01
            :ARG0 (b / blast-05
                  :ARG1 (r / restaurant
                        :location (c2 / country
                              :name (n / name
                                    :op1 "Philippines"))))))

# ::snt China army newspaper hits out at US's PRISM programme
(h / hit-out-03
      :ARG0 (n / newspaper
            :mod (a / army)
            :mod (c / country
                  :name (n2 / name
                        :op1 "China")))
      :ARG2 (p / program
            :name (n3 / name
                  :op1 "PRISM")
            :poss (c2 / country
                  :name (n4 / name
                        :op1 "US"))))

# ::snt Silvio Berlusconi expelled from Italy's parliament
(e / expel-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Silvio"
                  :op2 "Berlusconi"))
      :ARG2 (p2 / parliament
            :poss (c / country
                  :name (n2 / name
                        :op1 "Italy"))))

# ::snt Two killed in Bahrain car explosion
(k / kill-01
      :ARG0 (e / explode-01
            :ARG1 (c / car)
            :location (c2 / country
                  :name (n / name
                        :op1 "Bahrain")))
      :ARG1 (p / person
            :quant 2))

# ::snt Russia warns it will respond if interests attacked in Ukraine
(w / warn-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Russia"))
      :ARG1 (r / respond-01
            :ARG0 c
            :condition (a / attack-01
                  :ARG1 (ii / interest)
                  :location (c2 / country
                        :name (n2 / name
                              :op1 "Ukraine")))))

# ::snt Hosni Mubarak retrial adjourned until 8 June
(a / adjourn-01
      :ARG1 (r / retry-01
            :ARG1 (p / person
                  :name (n / name
                        :op1 "Hosni"
                        :op2 "Mubarak")))
      :time (u / until
            :op1 (d / date-entity
                  :month 6
                  :day 8)))

# ::snt US drone strike kills eight in Waziristan
(k / kill-01
      :ARG0 (s / strike-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "US"))
            :ARG2 (d / drone))
      :ARG1 (p / person
            :quant 8)
      :location (c2 / country-region
            :name (n2 / name
                  :op1 "Waziristan")))

# ::snt Egypt protesters defy cabinet threat to end sit-ins
(d / defy-01
      :ARG0 (p / person
            :ARG0-of (p2 / protest-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Egypt")))
      :ARG1 (t / threaten-01
            :ARG0 (c2 / cabinet)
            :ARG1 (e / end-01
                  :ARG0 c2
                  :ARG1 (s / sit-in-06))))

# ::snt Couple marry in the UK's first Scientology wedding
(m / marry-01
      :ARG1 (c / couple)
      :location (w / wed-01
            :mod (r / religious-group
                  :name (n / name
                        :op1 "Scientology"))
            :ord (o / ordinal-entity
                  :value 1)
            :location (c2 / country
                  :name (n2 / name
                        :op1 "UK"))))

# ::snt Russian opposition leader under house arrest
(a / arrest-01
      :ARG1 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (o / oppose-01))
            :mod (c / country
                  :name (n / name
                        :op1 "Russia")))
      :location (h / house))

# ::snt Senate confirms Janet Yellen as chair of US Federal Reserve
(c / confirm-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate"))
      :ARG1 (h / have-org-role-91
            :ARG0 (p / person
                  :name (n2 / name
                        :op1 "Janet"
                        :op2 "Yellen"))
            :ARG1 (g2 / government-organization
                  :name (n3 / name
                        :op1 "US"
                        :op2 "Federal"
                        :op3 "Reserve"))
            :ARG2 (c2 / chair)))

# ::snt Qatar's emir hands power to his son
(h / hand-01
      :ARG0 (p / person
            :ARG0-of (h2 / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Qatar"))
                  :ARG2 (e / emir)))
      :ARG1 (p2 / power)
      :ARG2 (p3 / person
            :ARG0-of (h3 / have-rel-role-91
                  :ARG1 p
                  :ARG2 (s / son))))

# ::snt Philippines typhoon death toll feared to hit 7,000
(f / fear-01
      :ARG1 (h / hit-01
            :ARG0 (t / toll
                  :quant-of (d / die-01)
                  :mod (t2 / typhoon
                        :location (c / country
                              :name (n / name
                                    :op1 "Philippines"))))
            :ARG1 7000))

# ::snt Egypt braces for 'Friday of anger' after carnage
(b / brace-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Egypt"))
      :ARG1 c
      :ARG2 (d / date-entity
            :weekday (f / friday)
            :mod (a / anger-01))
      :time (a2 / after
            :op1 (c2 / carnage)))

# ::snt Red Sox Beat Tigers 5-2 to Advance to World Series
(b / beat-03
      :ARG0 (t / team
            :name (n / name
                  :op1 "Red"
                  :op2 "Sox"))
      :ARG1 (t2 / team
            :name (n2 / name
                  :op1 "Tigers"))
      :ARG2 (s / score-entity
            :op1 5
            :op2 2)
      :purpose (a / advance-01
            :ARG1 t
            :ARG4 (g / game
                  :name (n3 / name
                        :op1 "World"
                        :op2 "Series"))))

# ::snt China lands Jade Rabbit robot rover on Moon
(l / land-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (r / rover
            :name (n2 / name
                  :op1 "Jade"
                  :op2 "Rabbit")
            :mod (r2 / robot))
      :location (m / moon))

# ::snt Ukrainian parliament dismisses president
(d / dismiss-01
      :ARG0 (p / parliament
            :mod (c / country
                  :name (n / name
                        :op1 "Ukraine")))
      :ARG1 (p2 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 c
                  :ARG2 (p3 / president))))

# ::snt Venezuela lawmakers brawl amid election tensions
(b / brawl-01
      :ARG0 (p / person
            :ARG0-of (l / legislate-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Venezuela")))
      :time (t / tension
            :mod (e / elect-01)))

# ::snt North Korea Warns Foreigners in South, Advising Evacuation
(a / and
      :op1 (w / warn-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "North"
                        :op2 "Korea"))
            :ARG2 (p / person
                  :mod (f / foreign)
                  :location (c2 / country
                        :name (n2 / name
                              :op1 "South"))))
      :op2 (a2 / advance-01
            :ARG1 c))

# ::snt Captain of sunken South Korean ferry arrested
(a / arrest-01
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (f / ferry
                        :ARG1-of (s / sink-01)
                        :poss (c / country
                              :name (n / name
                                    :op1 "South"
                                    :op2 "Korea")))
                  :ARG2 (c2 / captain))))

# ::snt Cars, drivers plunge into river after Wash. I-5 bridge collapse
(p / plunge-01
      :ARG1 (a / and
            :op1 (c / car)
            :op2 (p2 / person
                  :ARG0-of (d / drive-01)))
      :ARG4 (r / river)
      :time (a2 / after
            :op1 (c2 / collapse-01
                  :ARG1 (b / bridge
                        :name (n / name
                              :op1 "I-5"))
                  :location (s / state
                        :name (n2 / name
                              :op1 "Washington")))))

# ::snt Death toll in Syria now tops 100,000
(t / top-02
      :ARG0 (t2 / toll
            :quant-of (d / die-01)
            :location (c / country
                  :name (n / name
                        :op1 "Syria")))
      :ARG1 100000
      :time (n2 / now))

# ::snt Communist rebels ambush Philippine police, kill 7
(a / and
      :op1 (a2 / ambush-01
            :ARG0 (p / person
                  :ARG0-of (r / rebel-01)
                  :mod (p2 / political-movement
                        :name (n / name
                              :op1 "communism")))
            :ARG1 (p3 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country
                              :name (n2 / name
                                    :op1 "Philippines"))
                        :ARG2 (p4 / police))))
      :op2 (k / kill-01
            :ARG0 p
            :ARG1 (p5 / person
                  :quant 7)))

# ::snt Egypt's Morsi faces trial for prison break, murder, says prosecution
(s / say-01
      :ARG0 (p / prosecute-01)
      :ARG1 (f / face-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 "Morsi")
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Egypt")))
            :ARG1 (t / try-02
                  :ARG1 p2
                  :ARG3 (a / and
                        :op1 (b / break-13
                              :ARG0 p2
                              :ARG1 (p3 / prison))
                        :op2 (m / murder-01
                              :ARG0 p2)))))

# ::snt Iran Nuclear Talks Enter Third Day
(e / enter-01
      :ARG0 (t / talk-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Iran"))
            :ARG1 (n2 / nucleus))
      :ARG1 (d / day
            :ord (o / ordinal-entity
                  :value 3)))

# ::snt Jurors find Jodi Arias eligible for death penalty
(f / find-02
      :ARG0 (j / juror)
      :ARG1 (q / qualify-02
            :ARG1 (p / person
                  :name (n / name
                        :op1 "Jodi"
                        :op2 "Arias"))
            :ARG2 (p2 / penalize-01
                  :manner (d / die-01))))

# ::snt Thai army declares martial law
(d / declare-02
      :ARG0 (a / army
            :mod (c / country
                  :name (n / name
                        :op1 "Thailand")))
      :ARG1 (l / law
            :mod (m / martial)))

# ::snt Woman dies while riding roller coaster in Texas
(d / die-01
      :ARG1 (w / woman)
      :time (r / ride-01
            :ARG0 w
            :ARG1 (r2 / roller-coaster)
            :location (s / state
                  :name (n / name
                        :op1 "Texas"))))

# ::snt Nobel author Doris Lessing dies at 94
(d / die-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Doris"
                  :op2 "Lessing")
            :ARG0-of (a / author-01)
            :mod (n2 / Nobel))
      :time (a2 / age-01
            :ARG1 p
            :ARG2 (t / temporal-quantity
                  :quant 94
                  :unit (y / year))))

# ::snt Over 100 dead as typhoon slams central Philippines
(d / die-01
      :ARG1 (p / person
            :quant (o / over
                  :op1 100))
      :ARG1-of (c / cause-01
            :ARG0 (s / slam-02
                  :ARG0 (t / typhoon)
                  :ARG1 (c2 / country
                        :name (n / name
                              :op1 "Philippines")
                        :part (c3 / center)))))

# ::snt First post office savings bank ATM opens in Chennai
(o / open-01
      :ARG1 (b / bank
            :name (n / name
                  :op1 "ATM")
            :mod (s / savings)
            :part-of (p / post-office)
            :ord (o2 / ordinal-entity
                  :value 1))
      :location (c / city
            :name (n2 / name
                  :op1 "Chennai")))

# ::snt Israel agrees to 12 hour ceasefire
(a / agree-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Israel"))
      :ARG1 (c2 / cease-01
            :ARG1 (f / fire-01)
            :duration (t / temporal-quantity
                  :quant 12
                  :unit (h / hour))))

# ::snt Twitter reports blocking in Venezuela
(r / report-01
      :ARG0 (p / publication
            :name (n / name
                  :op1 "Twitter"))
      :ARG1 (b / block-01
            :location (c / country
                  :name (n2 / name
                        :op1 "Venezuela"))))

# ::snt Quake of 6.2 magnitude strikes off Indonesia's Sumatra - USGS
(s / strike-01
      :ARG0 (q / quake
            :quant (s2 / seismic-quantity
                  :quant 6.2))
      :ARG1 (o / off
            :op1 (ii / island
                  :name (n / name
                        :op1 "Sumatra")
                  :location (c / country
                        :name (n2 / name
                              :op1 "Indonesia"))))
      :ARG1-of (d / describe-01
            :ARG0 (p / publication
                  :name (n3 / name
                        :op1 "USGS"))))

# ::snt US Supreme Court limits president's recess appointments power
(l / limit-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Supreme"
                  :op2 "Court")
            :mod (c / country
                  :name n
                  :op1 "US"))
      :ARG1 (p / power
            :mod (a / appoint-01
                  :ARG0 (p2 / person
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (p3 / president)))
                  :ARG1-of (r / recess-02))))

# ::snt British stuntman fell to his death in wing suit mishap
(f / fall-01
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (s / stuntman))
            :mod (c / country
                  :name (n / name
                        :op1 "Britain")))
      :ARG4 (d / die-01
            :ARG1 p)
      :ARG1-of (c2 / cause-01
            :ARG0 (m / mishap
                  :mod (s2 / suit
                        :mod (w / wing)))))

# ::snt Euro crisis is over, says France's Francois Hollande
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Francois"
                  :op2 "Hollande")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "France"))
                  :ARG2 (p2 / president)))
      :ARG1 (o / over-01
            :ARG1 (c2 / crisis
                  :mod (e / euro))))

# ::snt White diamond breaks record in Hong Kong auction
(b / break-01
      :ARG0 (d / diamond
            :ARG1-of (w / white-03))
      :ARG1 (r / record)
      :time (a / auction-01
            :location (c / city
                  :name (n / name
                        :op1 "Hong"
                        :op2 "Kong"))))

# ::snt Goa building collapse death toll touches 15
(t / touch-01
      :ARG0 (t2 / toll
            :quant-of (d / die-01)
            :poss (b / building
                  :location (c / city
                        :name (n / name
                              :op1 "Goa"))))
      :ARG1 (p / person
            :quant 15))

# ::snt Pak religious body endorses underage marriage
(e / endorse-01
      :ARG0 (b / body
            :mod (r / religious)
            :mod (c / country
                  :name (n / name
                        :op1 "Pakistan")))
      :ARG1 (m / marry-01
            :mod (u / underage)))

# ::snt Treasury proposal sees 1.5% increase in income tax
(s / see-01
      :ARG0 (t / thing
            :ARG1-of (p / propose-01
                  :ARG0 (g / government-organization
                        :name (n / name
                              :op1 "Treasury"))))
      :ARG1 (ii / increase-01
            :ARG1 (t2 / tax-01
                  :ARG3 (ii2 / income))
            :ARG2 (p2 / percentage-entity
                  :value 1.5)))

# ::snt EU Ministers of Employment and Social policy will discuss how to boost employment, integrate social and economic policies
(d / discuss-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 "EU"))
                  :ARG2 (m / minister
                        :topic (a / and
                              :op1 (e / employ-01)
                              :op2 (p2 / policy-01
                                    :ARG2 (s / social))))))
      :ARG1 (a2 / and
            :op1 (t / thing
                  :manner-of (b / boost-01
                        :ARG0 p
                        :ARG1 (e2 / employ-01)))
            :op2 (ii / integrate-01
                  :ARG0 p
                  :ARG1 (a3 / and
                        :op1 (p3 / policy-01
                              :ARG2 (s2 / society))
                        :op2 (p4 / policy-01
                              :ARG2 (e3 / economy))))))

# ::snt Hamas Urges Hizbullah to Pull Fighters Out of Syria
(u / urge-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "Hamas"))
      :ARG1 o
      :name (n2 / name
            :op1 "Hizbullah")
      :ARG2 (p / pull-out-02
            :ARG1 (p2 / person
                  :ARG0-of (f / fight-01))
            :ARG2 (c / country
                  :name (n3 / name
                        :op1 "Syria"))))

# ::snt U.S. and Russia reach a deal on Syria's chemical weapons
(r / reach-01
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "U.S."))
            :op2 (c2 / country
                  :name (n2 / name
                        :op1 "Russia")))
      :ARG1 (d / deal-01
            :ARG0 a
            :ARG2 (w / weapon
                  :mod (c3 / chemical)
                  :poss (c4 / country
                        :name (n3 / name
                              :op1 "Syria")))))

# ::snt PSNI failed RUC officers, tribunal told
(t / tell-01
      :ARG0 (t2 / tribunal)
      :ARG1 (f / fail-01
            :ARG1 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (g / government-organization
                              :name (n / name
                                    :op1 "PSNI"))
                        :ARG2 (o / officer)))
            :ARG2 (h2 / have-org-role-91
                  :ARG0 p
                  :ARG1 (o2 / organization
                        :name (n2 / name
                              :op1 "RUC")))))

# ::snt Stocks edge lower following retail earnings
(e / edge-01
      :ARG1 (s / stock)
      :ARG2 (l / lower-05)
      :ARG1-of (f / follow-01
            :ARG2 (e2 / earn-01
                  :ARG0 (r / retail-01))))

# ::snt Police helicopter crashes into Scottish pub
(c / crash-01
      :ARG1 (h / helicopter
            :mod (p / police))
      :location (p2 / pub
            :mod (c2 / country
                  :name (n / name
                        :op1 "Scotland"))))

# ::snt US ups pressure on Israel as UN demands Gaza truce
(ii / increase-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "US"))
      :ARG1 (p / pressure-01
            :ARG0 c
            :ARG1 (c2 / country
                  :name (n2 / name
                        :op1 "Israel")))
      :time (d / demand-01
            :ARG0 (o / organization
                  :name (n3 / name
                        :op1 "UN"))
            :ARG1 (t / truce
                  :location (c3 / country-region
                        :name (n4 / name
                              :op1 "Gaza")))))

# ::snt Australian PM says 'Very confident' signals are from black box
(s / say-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Australia"))
                  :ARG2 (m / minister
                        :mod (p2 / prime))))
      :ARG1 (s2 / signal-07
            :ARG1 (c2 / confident-01
                  :degree (v / very))
            :source (b / box
                  :ARG1-of (b2 / black-07))))

# ::snt Mt Gox reveals 200,000 'forgotten' bitcoin haul
(r / reveal-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Mt"
                  :op2 "Gox"))
      :ARG1 (h / haul-01
            :quant 200000
            :ARG1 (c / currency
                  :name (n2 / name
                        :op1 "bitcoin"))
            :ARG1-of (f / forget-01)))

# ::snt Mandela's condition has 'improved'
(ii / improve-01
      :ARG1 (c / condition
            :poss (p / person
                  :name (n / name
                        :op1 "Mandela"))))

# ::snt Chinese lunar rover lands on moon
(l / land-01
      :ARG1 (r / rover
            :mod (m / moon)
            :mod (c / country
                  :name (n / name
                        :op1 "China")))
      :location (m2 / moon))

# ::snt Boy, 14, arrested for sex attacks around a university campus
(a / arrest-01
      :ARG1 (b / boy
            :age (t / temporal-quantity
                  :quant 14
                  :unit (y / year)))
      :ARG2 (a2 / attack-01
            :ARG0 b
            :manner (s / sex-01)
            :location (a3 / around
                  :op1 (c / campus
                        :mod (u / university)))))

# ::snt Philippe becomes king of Belgium
(b / become-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Philippe"))
      :ARG2 (k / king
            :poss (c / country
                  :name (n2 / name
                        :op1 "Belgium"))))

# ::snt India anti-graft party takes charge in New Delhi
(c / charge-06
      :ARG0 (p / political-party
            :mod (c2 / country
                  :name (n / name
                        :op1 "India"))
            :ARG0-of (o / oppose-01
                  :ARG1 (g / graft)))
      :location (c3 / city
            :name (n2 / name
                  :op1 "New"
                  :op2 "Delhi")))

# ::snt Spain approves new restrictive abortion law
(a / approve-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Spain"))
      :ARG1 (l / law
            :ARG0-of (r / restrict-01
                  :ARG1 (a2 / abort-01))
            :ARG1-of (n2 / new-01)))

# ::snt Obama orders Syria 'gas attack' inquiry
(o / order-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG2 (ii / inquire-01
            :ARG1 (a / attack-01
                  :ARG1 (g / gas))
            :mod (c / country
                  :name (n2 / name
                        :op1 "Syria"))))

# ::snt German ambassador's Athens residence shot at
(s / shoot-02
      :ARG2 (l / location
            :ARG1-of (r / reside-01
                  :ARG0 (a / ambassador
                        :mod (c / country
                              :name (n / name
                                    :op1 "Germany")))
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "Athens")))))

# ::snt Ukraine's jailed opposition icon Tymoshenko walks free
(w / walk-01
      :ARG0 (ii / icon
            :mod (o / oppose-01)
            :poss (c / country
                  :name (n / name
                        :op1 "Ukraine"))
            :ARG1-of (j / jail-01)
            :mod ii)
      :ARG1-of (f / free-04))

# ::snt Oklahoma examines what went wrong in botched execution
(e / examine-01
      :ARG0 (s / state
            :name (n / name
                  :op1 "Oklahoma"))
      :ARG1 (t / thing
            :ARG1-of (w / wrong-02
                  :ARG2 (e2 / execute-01
                        :ARG1-of (b / botch-01)))))

# ::snt Napolitano elected for second term as Italy president
(e / elect-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Napolitano"))
      :ARG2 (t / term
            :ord (o / ordinal-entity
                  :value 2)
            :duration-of (h / have-org-role-91
                  :ARG0 p
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "Italy"))
                  :ARG2 (p2 / president))))

# ::snt More than 100 injured in Texas plant blast
(ii / injure-01
      :ARG1 (p / person
            :quant (m / more-than
                  :op1 100))
      :ARG1-of (c / cause-01
            :ARG0 (b / blast-05
                  :ARG1 (p2 / plant)
                  :location (s / state
                        :name (n / name
                              :op1 "Texas")))))

# ::snt Saudi man with pressure cooker arrested at Detroit airport
(a / arrest-01
      :ARG1 (m / man
            :mod (c / country
                  :name (n / name
                        :op1 "Saudi"
                        :op2 "Arabia"))
            :ARG0-of (h / have-03
                  :ARG1 (c2 / cooker
                        :mod (p / pressure))))
      :location (a2 / airport
            :location (c3 / city
                  :name (n2 / name
                        :op1 "Detroit"))))

# ::snt North Korea says to put US citizen on trial
(s / say-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "North"
                  :op2 "Korea"))
      :ARG1 (t / try-02
            :ARG0 c
            :ARG1 (c2 / citizen
                  :mod (c3 / country
                        :name (n2 / name
                              :op1 "US")))))

# ::snt Thai protests escalate amid violence
(e / escalate-01
      :ARG1 (p / protest-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Thailand")))
      :time (v / violence))

# ::snt Egypt imposes state of emergency after 95 people killed
(ii / impose-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Egypt"))
      :ARG1 (s / state
            :mod (e / emergency))
      :time (a / after
            :op1 (k / kill-01
                  :ARG1 (p / person
                        :quant 95))))

# ::snt Rallies demand 'Justice for Trayvon'
(d / demand-01
      :ARG0 (r / rally-01)
      :ARG1 (j / justice
            :beneficiary (p / person
                  :name (n / name
                        :op1 "Trayvon"))))

# ::snt UN warns of plight of women, children in Syria's Homs
(w / warn-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "UN"))
      :ARG1 (p / plight
            :poss (a / and
                  :op1 (w2 / woman)
                  :op2 (c / child)
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "H Homs")
                        :location (c3 / country
                              :name (n3 / name
                                    :op1 "Syria"))))))

# ::snt Redford touts Alberta economy ahead of vote on leadership
(t / tout-01
      :ARG0 (c / city
            :name (n / name
                  :op1 "Redford"))
      :ARG1 (e / economy
            :mod (p / province
                  :name (n2 / name
                        :op1 "Alberta")))
      :time (a / ahead
            :op1 (v / vote-01
                  :ARG1 (l / lead-02))))

# ::snt Hagel, Dempsey face Congress over defense budget
(f / face-01
      :ARG0 (a / and
            :op1 (p / person
                  :name (n / name
                        :op1 "Hagel"))
            :op2 (p2 / person
                  :name (n2 / name
                        :op1 "Dempsey")))
      :ARG1 (g / government-organization
            :name (n3 / name
                  :op1 "Congress"))
      :ARG2 (b / budget-01
            :ARG2 (d / defend-01)))

# ::snt Sony to sell PC unit and cut jobs
(a / and
      :op1 (s / sell-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 "Sony"))
            :ARG1 (u / unit
                  :mod (p / product
                        :name n
                        :op1 "PC")))
      :op2 (c2 / cut-02
            :ARG0 c
            :ARG1 (j / job)))

# ::snt Man kills 4 in Calif. before police shoot him dead
(k / kill-01
      :ARG0 (m / man)
      :ARG1 (p / person
            :quant 4)
      :location (s / state
            :name (n / name
                  :op1 "Calif."))
      :time (b / before
            :op1 (s2 / shoot-02
                  :ARG0 (p2 / police)
                  :ARG1 m
                  :ARG0-of (c / cause-01
                        :ARG1 (d / die-01
                              :ARG1 m)))))

# ::snt N. Korea Deports Elderly American
(d / deport-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "N.Korea"))
      :ARG1 (p / person
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "America"))
            :mod (e / elderly)))

# ::snt Search leader urges caution in findings related to missing Malaysian jetliner
(u / urge-01
      :ARG0 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (s / search-01)))
      :ARG1 (c / caution-01
            :ARG2 (t / thing
                  :ARG1-of (f / find-01)
                  :ARG1-of (r / relate-01
                        :ARG2 (j / jetliner
                              :ARG1-of (m / miss-01
                                    :location (c2 / country
                                          :name (n / name
                                                :op1 "Malaysia"))))))))

# ::snt Mandela remembered by family, as stadium memorial service is planned
(r / remember-01
      :ARG0 (f / family)
      :ARG1 (p / person
            :name (n / name
                  :op1 "Mandela"))
      :time (p2 / plan-01
            :ARG1 (s / service-06
                  :ARG1 (m / memorial)
                  :location (s2 / stadium))))

# ::snt Protests after George Zimmerman acquitted in Trayvon Martin case
(p / protest-01
      :time (a / after
            :op1 (a2 / acquit-01
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 "George"
                              :op2 "Zimmerman"))
                  :ARG2 (c / case-03
                        :ARG2 (p3 / person
                              :name (n2 / name
                                    :op1 "Trayvon"
                                    :op2 "Martin"))))))

# ::snt Ukrainian presidency says deal reached at crisis talks
(s / say-01
      :ARG0 (p / presidency
            :mod (c / country
                  :name (n / name
                        :op1 "Ukraine")))
      :ARG1 (r / reach-01
            :ARG1 (d / deal-01)
            :time (t / talk-01
                  :ARG1 (c2 / crisis))))

# ::snt Obama mulls limited military action in Syria
(m / mull-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (a / action
            :mod (m2 / military)
            :ARG1-of (l / limit-01)
            :location (c / country
                  :name (n2 / name
                        :op1 "Syria"))))

# ::snt Syria's PM escapes assassination try, regime says
(s / say-01
      :ARG0 (r / regime)
      :ARG1 (e / escape-01
            :ARG0 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country
                              :name (n / name
                                    :op1 "Syria"))
                        :ARG2 (m / minister
                              :mod (p2 / prime))))
            :ARG1 (t / try-01
                  :ARG1 (a / assassinate-01
                        :ARG1 p))))

# ::snt Obama holds out over Syria strikes
(h / hold-out-09
      :ARG1 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1-of (c / cause-01
            :ARG0 (s / strike-01
                  :ARG0 (c2 / country
                        :name (n2 / name
                              :op1 "Syria")))))

# ::snt Jordan elected to take Saudi seat on UN Security Council
(e / elect-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Jordan"))
      :ARG1 (t / take-01
            :ARG0 c
            :ARG1 (s / seat
                  :ARG2-of (h / have-org-role-91
                        :ARG0 (c2 / country
                              :name (n2 / name
                                    :op1 "Saudi"
                                    :op2 "Arabia"))
                        :ARG1 (o / organization
                              :name (n3 / name
                                    :op1 "UN"
                                    :op2 "Security"
                                    :op3 "Council"))))))

# ::snt Maldives begins to vote in controversy-ridden presidential poll
(b / begin-01
      :ARG0 (s / state
            :name (n / name
                  :op1 "Maldives"))
      :ARG1 (v / vote-01
            :ARG0 s
            :ARG1 (p / poll-01
                  :ARG2 (p2 / president)
                  :ARG1-of (r / ridden-01
                        :ARG2 (c / controversy)))))

# ::snt At least 18 killed in Iraq mosque bombing
(k / kill-01
      :ARG0 (b / bomb-01
            :ARG1 (m / mosque
                  :location (c / country
                        :name (n / name
                              :op1 "Iraq"))))
      :ARG1 (p / person
            :quant (a / at-least
                  :op1 18)))

# ::snt Police surround protesters in Belfast ahead of G8
(s / surround-01
      :ARG0 (p / police)
      :ARG1 (p2 / person
            :ARG0-of (p3 / protest-01))
      :location (c / city
            :name (n / name
                  :op1 "Belfast"))
      :time (a / ahead
            :op1 (e / event
                  :name (n2 / name
                        :op1 "G8"))))

# ::snt George Zimmerman found not guilty of Trayvon Martin murder
(f / find-02
      :ARG1 (g / guilty-01
            :polarity -
            :ARG1 (p / person
                  :name (n / name
                        :op1 "George"
                        :op2 "Zimmerman"))
            :ARG2 (m / murder-01
                  :ARG0 (p2 / person
                        :name (n2 / name
                              :op1 "Trayvon"
                              :op2 "Martin")))))

# ::snt Ten rescued off Waterford, Dublin coasts
(r / rescue-01
      :ARG1 (p / person
            :quant 10)
      :location (o / off
            :op1 (a / and
                  :op1 (c / city
                        :name (n / name
                              :op1 "Waterford"))
                  :op2 (c2 / city
                        :name (n2 / name
                              :op1 "Dublin"))
                  :op3 (c3 / coast))))

# ::snt Mandela spends third day in hospital
(s / spend-02
      :ARG0 (p / person
            :name (n / name
                  :op1 "Mandela"))
      :ARG1 (t / temporal-quantity
            :quant 3
            :unit (d / day))
      :location (h / hospital))

# ::snt One killed in clashes at Muslim Brotherhood Cairo offices
(k / kill-01
      :ARG0 (c / clash-01
            :location (o / office
                  :poss (o2 / organization
                        :name (n / name
                              :op1 "Muslim"
                              :op2 "Brotherhood"))
                  :location (c2 / city
                        :name (n2 / name
                              :op1 "Cairo"))))
      :ARG1 (p / person
            :quant 1))

# ::snt Saudi Women To Protest Against Driving Ban
(p / protest-01
      :ARG0 (w / woman
            :mod (c / country
                  :name (n / name
                        :op1 "Saudi"
                        :op2 "Arabia")))
      :ARG1 (b / ban-01
            :ARG1 (d / drive-01)))

# ::snt Obama, Hollande Hail Transformed US-French Relationship
(h / Hail-01
      :ARG0 (a / and
            :op1 (p / person
                  :name (n / name
                        :op1 "Obama"))
            :op2 (p2 / person
                  :name (n2 / name
                        :op1 "Hollande")))
      :ARG1 (r / relation-03
            :ARG0 (c / country
                  :name (n3 / name
                        :op1 "US"))
            :ARG2 (c2 / country
                  :name (n4 / name
                        :op1 "France"))
            :ARG1-of (t / transform-01)))

# ::snt Russian parliament allows Putin to use military in Ukraine
(a / allow-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Parliament")
            :mod (c / country
                  :name (n2 / name
                        :op1 "Russia")))
      :ARG1 (u / use-01
            :ARG0 (p / person
                  :name (n3 / name
                        :op1 "Putin"))
            :ARG1 (m / military)
            :location (c2 / country
                  :name (n4 / name
                        :op1 "Ukraine"))))

# ::snt World stocks rise on hopes Fed to keep stimulus
(r / rise-01
      :ARG1 (s / stock
            :mod (w / world))
      :ARG1-of (c / cause-01
            :ARG0 (h / hopeful-03
                  :ARG1 (k / keep-01
                        :ARG0 (g / government-organization
                              :name (n / name
                                    :op1 "Fed"))
                        :ARG1 (s2 / stimulus)))))

# ::snt No winners in a war of sanctions
(w / win-01
      :polarity -
      :ARG0 (w2 / war-01
            :ARG2 (s / sanction-02)))

# ::snt South Korean soldier reportedly flees after killing 5 comrades at border with North Korea
(f / flee-05
      :ARG0 (s / soldier
            :mod (c / country
                  :name (n / name
                        :op1 "South"
                        :op2 "Korea")))
      :ARG1-of (r / report-01)
      :time (a / after
            :op1 (k / kill-01
                  :ARG0 s
                  :ARG1 (c2 / comrade
                        :quant 5)
                  :location (b / border-01
                        :ARG1 c
                        :ARG2 (c3 / country
                              :name (n2 / name
                                    :op1 "North"
                                    :op2 "Korea"))))))

# ::snt World Cup hit by new stadium death
(h / hit-02
      :ARG0 (d / die-01
            :ARG1 (s / stadium)
            :ARG1-of (n / new-01))
      :ARG1 (g / game
            :name (n2 / name
                  :op1 "World"
                  :op2 "Cup")))

# ::snt Tata Nano and other Indian small cars fail crash tests
(f / fail-01
      :ARG1 (a / and
            :op1 (c / car
                  :name (n / name
                        :op1 "Tata"
                        :op2 "Nano"))
            :op2 (c2 / car
                  :mod (s / small)
                  :mod (o / other)
                  :mod (c3 / country
                        :name (n2 / name
                              :op1 "India"))))
      :ARG2 (t / test-01
            :ARG1 (c4 / crash-01)))

# ::snt Greece reaches agreement with troika, bailout tranche expected within days
(m / multi-sentence
      :snt1 (r / reach-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Greece"))
            :ARG1 (a / agree-01
                  :ARG0 c
                  :ARG2 (o / organization
                        :name (n2 / name
                              :op1 "Troika"))))
      :snt2 (e / expect-01
            :ARG1 (t / tranche
                  :mod (b / bailout-01))
            :time (a2 / after
                  :op1 (n3 / now)
                  :quant (u / up-to
                        :op1 (m2 / multiple
                              :op1 (t2 / temporal-quantity
                                    :quant 1
                                    :unit (d / day)))))))

# ::snt Murray ends 77-year wait for British win
(e / end-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Murray"))
      :ARG1 (w / wait-01
            :ARG1 p
            :ARG2 (w2 / win-01
                  :ARG0 (c / country
                        :name (n2 / name
                              :op1 "Britain")))
            :duration (t / temporal-quantity
                  :quant 77
                  :unit (y / year))))

# ::snt Tycoon claims win in Ukraine and promises to seek future in EU
(a / and
      :op1 (c / claim-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Tycoon"))
            :ARG1 (w / win-01
                  :ARG0 p
                  :location (c2 / country
                        :name (n2 / name
                              :op1 "Ukraine"))))
      :op2 (p2 / promise-01
            :ARG0 p
            :ARG1 (s / seek-01
                  :ARG0 p
                  :ARG1 (f / future
                        :location (o / organization
                              :name (n3 / name
                                    :op1 "EU"))))))

# ::snt US to Determine Extent of Chemical Weapons Use by Syria
(a / and
      :op1 (t / test-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "US"))
            :ARG1 (u / use-01
                  :ARG0 (c2 / country
                        :name (n2 / name
                              :op1 "Syria"))
                  :ARG1 (w / weapon
                        :mod (c3 / chemical))
                  :mod (e / extend)))
      :op2 (t2 / test-01
            :ARG0 c2
            :ARG1 u))

# ::snt The covert war in Pakistan
(w / war-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "Pakistan"))
      :mod (c2 / covert))

# ::snt Russia's Putin claims authority to invade Ukraine
(c / claim-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Putin")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country
                        :name (n2 / name
                              :op1 "Russia"))
                  :ARG2 (p2 / president)))
      :ARG1 (a / authorize-01
            :ARG1 (ii / invade-01
                  :ARG0 p
                  :ARG1 (c3 / country
                        :name (n3 / name
                              :op1 "Ukraine")))
            :ARG2 p))

# ::snt Senior CPC official meets top DPRK leader's special envoy
(m / meet-03
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g / government-organization
                        :name (n / name
                              :op1 "CPC"))
                  :ARG2 (o / official
                        :mod (s / senior))))
      :ARG1 (p2 / person
            :ARG0-of (h2 / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "DPRK"))
                  :ARG2 (e / envoy
                        :ARG1-of (s2 / special-02)))))

# ::snt Turkey unrest goes on despite end to park protest
(g / go-on-15
      :ARG1 (u / unrest
            :mod (c / country
                  :name (n / name
                        :op1 "Turkey")))
      :concession (e / end-01
            :ARG1 (p / protest-01
                  :ARG1 (p2 / park-01))))

# ::snt Pope calls for action on climate change in draft encyclical
(c / call-03
      :ARG0 (p / person
            :name (n / name
                  :op1 "Pope"))
      :ARG1 (a / act-02
            :ARG1 (c2 / change-01
                  :ARG1 (c3 / climate)))
      :medium (e / encyclical
            :ARG1-of (d / draft-01)))

# ::snt Singapore shares open 0.28% lower on Thursday
(o / open-07
      :ARG1 (s / share
            :mod (c / country
                  :name (n / name
                        :op1 "Singapore")))
      :ARG3 (l / lower-05
            :ARG1 s
            :ARG2 (p / percentage-entity
                  :value 0.28))
      :time (d / date-entity
            :weekday (t / thursday)))

# ::snt Who Is Jihadi John?
(p / person
      :name (n / name
            :op1 "Jihadi"
            :op2 "John")
      :domain (a / amr-unknown))

# ::snt Iran, IAEA Officials Meet Ahead of March Nuclear Deadline
(m / meet-03
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "Iran"))
            :op2 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (o / organization
                              :name (n2 / name
                                    :op1 "IAEA"))
                        :ARG2 (o2 / official))))
      :time (a2 / ahead
            :op1 (d / deadline
                  :mod (n3 / nucleus)
                  :time (d2 / date-entity
                        :month 3))))

# ::snt Headlines in major Iranian newspapers on Oct 4
(h / headline-01
      :location (n / newspaper
            :mod (c / country
                  :name (n2 / name
                        :op1 "Iran"))
            :ARG1-of (m / major-02))
      :time (d / date-entity
            :day 4
            :month 10))

# ::snt Bombings kill 9 people in Iraqi capital
(k / kill-01
      :ARG0 (b / bomb-01)
      :ARG1 (p / person
            :quant 9)
      :location (c / city
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country
                        :name (n / name
                              :op1 "Iraq"))
                  :ARG2 (c3 / capital))))

# ::snt US Attorney General Holder resigns
(r / resign-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Holder")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "US"))
                  :ARG2 (a / attorney
                        :mod (g / general)))))

# ::snt U.S., EU Widen Sanctions On Russia
(s / sanction-02
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "U.S."))
            :op2 (o / organization
                  :name (n2 / name
                        :op1 "EU")))
      :ARG1 (c2 / country
            :name (n3 / name
                  :op1 "Russia"))
      :ARG2-of (h / hinder-01))

# ::snt 10 Things to Know for Wednesday
(t / thing
      :quant 10
      :ARG1-of (k / know-01
            :time (d / date-entity
                  :weekday (w / wednesday))))

# ::snt Top Asian News at 2:30 p.m. GMT
(b / broadcast-program
      :name (n / name
            :op1 "Top"
            :op2 "Asian"
            :op3 "News")
      :time (d / date-entity
            :time "14:30"
            :timezone "GMT"))

# ::snt How the Dow Jones Industrial Average Did Wednesday
(t / thing
      :manner-of (d / do-02
            :ARG0 (p / product
                  :name (n / name
                        :op1 "Dow"
                        :op2 "Jones"
                        :op3 "Industrial"
                        :op4 "Average"))
            :time (d2 / date-entity
                  :weekday (w / wednesday))))

# ::snt Hajj to go ahead despite crane collapse, officials vow
(v / vow-01
      :ARG0 (o / official)
      :ARG1 (g / go-06
            :ARG0 (c / city
                  :name (n / name
                        :op1 "Hajj"))
            :ARG2 (a / ahead)
            :concession (c2 / collapse-01
                  :ARG1 (c3 / crane))))

# ::snt US House Republicans elect Paul Ryan as speaker
(e / elect-01
      :ARG0 (p / political-party
            :name (n / name
                  :op1 "Republican")
            :part-of (g / government-organization
                  :name (n2 / name
                        :op1 "House")
                  :location (c / country
                        :name (n3 / name
                              :op1 "United"
                              :op2 "States"))))
      :ARG1 (p2 / person
            :name (n4 / name
                  :op1 "Paul"
                  :op2 "Ryan"))
      :ARG2 (s / speaker))

# ::snt Singapore shares open 0.83% higher on Wednesday
(o / open-07
      :ARG1 (s / share
            :mod (c / country
                  :name (n / name
                        :op1 "Singapore")))
      :ARG3 (p / percentage-entity
            :value 0.83
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / high-02
                        :ARG1 p)
                  :ARG3 (m / more)))
      :time (d / date-entity
            :weekday (w / wednesday)))

# ::snt China treasury bond futures open higher Tuesday
(o / open-07
      :ARG1 (f / futures
            :mod (b / bond
                  :mod (t / treasury)
                  :mod (c / country
                        :name (n / name
                              :op1 "China"))))
      :ARG3 (h / high-02
            :ARG2-of (h2 / have-degree-91
                  :ARG1 o
                  :ARG3 (m / more)))
      :time (d / date-entity
            :weekday (t2 / tuesday)))

# ::snt US Attorney General Holder resigns
(r / resign-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Holder")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "US"))
                  :ARG2 (a / attorney
                        :mod (g / general)))))

# ::snt Headlines in major Iranian newspapers on Sept 27
(h / headline-01
      :location (n / newspaper
            :mod (c / country
                  :name (n2 / name
                        :op1 "Iran"))
            :ARG1-of (m / major-02))
      :time (d / date-entity
            :day 27
            :month 9))

# ::snt China on high alert for typhoon Kalmaegi
(a / alert-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG2 (t / typhoon
            :name (n2 / name
                  :op1 "Kalmaegi"))
      :ARG1-of (h / high-02))

# ::snt Saudi-led airstrikes hit Yemeni capital
(h / hit-01
      :ARG1 (c / city
            :ARG0-of (h2 / have-org-role-91
                  :ARG1 (c2 / country
                        :name (n / name
                              :op1 "Yemen"))
                  :ARG2 (c3 / capital)))
      :ARG2 (s / strike-01
            :ARG0 (c4 / country
                  :name (n2 / name
                        :op1 "Saudi"
                        :op2 "Arabia"))
            :path (a / air)
            :ARG1-of (l / lead-02
                  :ARG0 c4)))

# ::snt New UN peacekeeping chief named for Central African Republic
(n / name-02
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n2 / name
                              :op1 "UN"))
                  :ARG2 (c / chief)
                  :ARG3 (k / keep-01
                        :ARG1 (p2 / peace)))
            :ARG1-of (n3 / new-01))
      :ARG2 (c2 / country
            :name (n4 / name
                  :op1 "Central"
                  :op2 "African"
                  :op3 "Republic")))

# ::snt Militant attack from Afghanistan kills four in Upper Dir
(k / kill-01
      :ARG0 (a / attack-01
            :ARG0 (m / militant)
            :source (c / country
                  :name (n / name
                        :op1 "Afghanistan")))
      :ARG1 (p / person
            :quant 4)
      :location (l / location
            :name (n2 / name
                  :op1 "Upper"
                  :op2 "Dir")))

# ::snt Mali hunts jihadist nightclub killers
(h / hunt-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Mali"))
      :ARG1 (p2 / person
            :ARG0-of (k / kill-01
                  :location (n2 / nightclub))
            :mod (j / jihadist)))

# ::snt 7.3 magnitude earthquake strikes Nepal
(s / strike-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "Nepal"))
      :ARG2 (e / earthquake
            :quant (s2 / seismic-quantity
                  :quant 7.3)))

# ::snt Tokyo shares open higher over buoyant U.S. market
(o / open-01
      :ARG1 (s / share
            :poss (c / city
                  :name (n / name
                        :op1 "Tokyo")))
      :ARG3 (h / high-02
            :ARG2-of (h2 / have-degree-91
                  :ARG1 s
                  :ARG3 (m / more)))
      :ARG1-of (c2 / cause-01
            :ARG0 (m2 / market
                  :ARG0-of (b / buoyant-01)
                  :mod (c3 / country
                        :name (n2 / name
                              :op1 "U.S.")))))

# ::snt Iran's parliament backs nuclear deal
(b / back-01
      :ARG0 (p / parliament
            :mod (c / country
                  :name (n / name
                        :op1 "Iran")))
      :ARG1 (d / deal-01
            :ARG2 (n2 / nucleus)))

# ::snt Hawaii preps for first hurricane in 22 years
(p / preps-02
      :ARG0 (s / state
            :name (n / name
                  :op1 "Hawaii"))
      :ARG2 (h / hurricane
            :ord (o / ordinal-entity
                  :value 1
                  :range (t / temporal-quantity
                        :quant 22
                        :unit (y / year)))))

# ::snt Iraq bombings kill at least 26
(k / kill-01
      :ARG0 (b / bomb-01
            :ARG1 (c / country
                  :name (n / name
                        :op1 "Iraq")))
      :ARG1 (p / person
            :quant (a / at-least
                  :op1 26)))

# ::snt Sierra Leone in Ebola lockdown
(b / be-located-at-91
      :ARG1 (c / country
            :name (n / name
                  :op1 "Sierra"
                  :op2 "Leone"))
      :ARG2 (l / lockdown-01
            :ARG1 (d / disease
                  :name (n2 / name
                        :op1 "Ebola"))))

# ::snt Tokyo shares open higher on buoyant U.S. market
(o / open-01
      :ARG1 (s / share
            :poss (c / city
                  :name (n / name
                        :op1 "Tokyo")))
      :ARG3 (h / high-02
            :ARG2-of (h2 / have-degree-91
                  :ARG1 s
                  :ARG3 (m / more)))
      :ARG1-of (c2 / cause-01
            :ARG0 (m2 / market
                  :ARG0-of (b / buoyant-01)
                  :mod (c3 / country
                        :name (n2 / name
                              :op1 "U.S.")))))

# ::snt Oil falls in Asian trade
(f / fall-01
      :ARG1 (o / oil)
      :ARG3 (t / trade-01
            :ARG0 (c / continent
                  :name (n / name
                        :op1 "Asia"))))

# ::snt Israeli forces detain Palestinian MP in Hebron
(d / detain-01
      :ARG0 (f / force
            :mod (c / country
                  :name (n / name
                        :op1 "Israel")))
      :ARG1 (p / person
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine"))
            :ARG0-of (h / have-org-role-91
                  :ARG1 (p2 / parliament)
                  :ARG2 (m / member)))
      :location (c3 / city
            :name (n3 / name
                  :op1 "Hebron")))

# ::snt 4 killed, several injured in SW China car accident
(a / and
      :op1 (k / kill-01
            :ARG1 (p / person
                  :quant 4))
      :op2 (ii / injure-01
            :ARG1 (p2 / person
                  :quant (s / several)))
      :ARG1-of (c / cause-01
            :ARG0 (a2 / accident
                  :mod (c2 / car)
                  :location (c3 / country
                        :name (n / name
                              :op1 "South"
                              :op2 "China")))))

# ::snt More than 3,400 migrants rescued at sea in Mediterranean
(r / rescue-01
      :ARG1 (p / person
            :ARG0-of (m / migrate-01)
            :quant (m2 / more-than
                  :op1 3000))
      :location (s / sea
            :name (n / name
                  :op1 "Mediterranean")))

# ::snt Lewis Hamilton Takes Pole for Russian GP
(t / take-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Lewis"
                  :op2 "Hamilton"))
      :ARG1 (p2 / pole)
      :ARG2 (e / event
            :name (n2 / name
                  :op1 "Russian"
                  :op2 "Grand Prix")))

# ::snt UN Security Council hears Yemen envoy's final ...
(h / hear-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "UN"
                  :op2 "Security"
                  :op3 "Council"))
      :ARG1 (f / final
            :poss (e / envoy
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Yemen")))))

# ::snt Israeli forces arrest 21 Palestinians overnight, clash with locals
(a / and
      :op1 (a2 / arrest-01
            :ARG0 (f / force
                  :mod (c / country
                        :name (n / name
                              :op1 "Israel")))
            :ARG1 (p / person
                  :quant 21
                  :mod (c2 / country
                        :name (n2 / name
                              :op1 "Palestine")))
            :time (o / overnight))
      :op2 (c3 / clash-01
            :ARG0 f
            :ARG1 (p2 / person
                  :ARG1-of (l / local-02))))

# ::snt 13 killed in Afgan terror attack
(k / kill-01
      :ARG0 (a / attack-01
            :ARG0 (c / criminal-organization
                  :name (n / name
                        :op1 "Afgan"))
            :mod (t / terror))
      :ARG1 (p / person
            :quant 13))

# ::snt 4 dead, 3 injured in east China road accident
(a / and
      :op1 (d / die-01
            :ARG1 (p / person
                  :quant 4))
      :op2 (ii / injure-01
            :ARG1 (p2 / person
                  :quant 3))
      :ARG1-of (c / cause-01
            :ARG0 (a2 / accident
                  :mod (r / road)
                  :location (e / east
                        :part-of (c2 / country
                              :name (n / name
                                    :op1 "China"))))))

# ::snt Markets Live: Waiting for China data
(a / and
      :op1 (m / market-sector
            :name (n / name
                  :op1 "Markets"
                  :op2 "Live"))
      :op2 (w / wait-01
            :ARG2 (d / data
                  :mod (c / country
                        :name (n2 / name
                              :op1 "China")))))

# ::snt Palestinians, Israeli police clash at Jerusalem's al-Aqsa
(c / clash-01
      :ARG0 (p / person
            :mod (c2 / country
                  :name (n / name
                        :op1 "Palestine")))
      :ARG1 (p2 / police
            :mod (c3 / country
                  :name (n2 / name
                        :op1 "Israel")))
      :location (c4 / city-district
            :name (n3 / name
                  :op1 "al-Aqsa")
            :location (c5 / city
                  :name (n4 / name
                        :op1 "Jerusalem"))))

# ::snt Suspected Boko Haram suicide bombers in Nigeria kill 24
(k / kill-01
      :ARG0 (p / person
            :ARG2-of (s / suspect-01
                  :ARG1 (b / bomb-01
                        :mod (s2 / suicide)
                        :mod (o / organization
                              :name (n / name
                                    :op1 "Boko"
                                    :op2 "Haram"))))
            :location (c / country
                  :name (n2 / name
                        :op1 "Nigeria")))
      :ARG1 p
      :quant 24)

# ::snt The end of the Hong Kong protests?
(e / end-01
      :ARG1 (p / protest-01
            :location (c / city
                  :name (n / name
                        :op1 "Hong"
                        :op2 "Kong")))
      :polarity (a / amr-unknown))

# ::snt Russian warplanes strike inside Syria
(s / strike-01
      :ARG0 (w / warplane
            :poss (c / country
                  :name (n / name
                        :op1 "Russia")))
      :ARG1 (c2 / country
            :name (n2 / name
                  :op1 "Syria")))

# ::snt CCTV of gunmen in Tunisia museum attack
(b / be-located-at-91
      :ARG1 (g / gunman
            :ARG0-of (a / attack-01
                  :ARG1 (m / museum
                        :location (c / country
                              :name (n / name
                                    :op1 "Tunisia")))))
      :ARG2 (t / television
            :mod (c2 / circuit
                  :ARG1-of (c3 / close-10))))

# ::snt Live Blog: Ukraine In Crisis
(b / blog-01
      :ARG1 (c / crisis
            :location (c2 / country
                  :name (n / name
                        :op1 "Ukraine")))
      :ARG0-of (l / live-01))

# ::snt Israeli police clash with Palestinian protesters at sensitive Jerusalem holy site
(c / clash-01
      :ARG0 (p / police
            :mod (c2 / country
                  :name (n / name
                        :op1 "Israel")))
      :ARG1 (p2 / person
            :ARG0-of (p3 / protest-01)
            :mod (c3 / country
                  :name (n2 / name
                        :op1 "Palestine")))
      :location (s / site
            :mod (h / holy)
            :location (c4 / city
                  :name (n3 / name
                        :op1 "Jerusalem"))
            :ARG1-of (s2 / sensitive-03)))

# ::snt Nigeria Votes in Tight Presidential Election
(v / vote-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Nigeria"))
      :ARG1 (e / elect-01
            :ARG2 (p / president)
            :ARG1-of (t / tight-05)))

# ::snt Prince William dons samurai gear on Japan tour
(d / dons-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "William")
            :ARG0-of (h / have-org-role-91
                  :ARG2 (p2 / prince)))
      :ARG1 (g / gear
            :mod (s / samurai))
      :time (t / tour-01
            :ARG0 p
            :ARG1 (c / country
                  :name (n2 / name
                        :op1 "Japan"))))

# ::snt Pope canonizes 2 Palestinians
(c / canonize-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Pope"))
      :ARG1 (p2 / person
            :quant 2
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine"))))

# ::snt 3 killed, 4 injured in Los Angeles shootings
(a / and
      :op1 (k / kill-01
            :ARG1 (p / person
                  :quant 3))
      :op2 (ii / injure-01
            :ARG1 (p2 / person
                  :quant 4))
      :ARG1-of (c / cause-01
            :ARG0 (s / shoot-02
                  :location (c2 / city
                        :name (n / name
                              :op1 "Los"
                              :op2 "Angeles")))))

# ::snt Micronesia vice president to visit China
(v / visit-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Micronesia"))
                  :ARG2 (p2 / president
                        :mod (v2 / vice))))
      :ARG1 (c2 / country
            :name (n2 / name
                  :op1 "China")))

# ::snt Islamic State issues video of beheading of US hostage
(ii / issue-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Islamic"
                  :op2 "State"))
      :ARG1 (v / video
            :topic (b / behead-01
                  :ARG1 (h / hostage
                        :mod (c2 / country
                              :name (n2 / name
                                    :op1 "US"))))))

# ::snt Iran ends cooperation agreement with Pakistan
(e / end-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Iran"))
      :ARG1 (a / agree-01
            :ARG1 (c2 / cooperate-01)
            :ARG2 (c3 / country
                  :name (n2 / name
                        :op1 "Pakistan"))))

# ::snt Teenager tests negative for Ebola
(t / test-01
      :ARG1 (t2 / teenager)
      :ARG2 (n / negative-03
            :ARG1 t2
            :ARG2 (d / disease
                  :name (n2 / name
                        :op1 "Ebola"))))

# ::snt Texas sues over Syrian refugees
(s / sue-02
      :ARG0 (s2 / state
            :name (n / name
                  :op1 "Texas"))
      :ARG2 (r / refugee
            :mod (c / country
                  :name (n2 / name
                        :op1 "Syria"))))

# ::snt New US Sanctions Target Overseas Cyber Attackers
(t / target-01
      :ARG0 (s / sanction-02
            :ARG0 (c / country
                  :name (n / name
                        :op1 "US"))
            :ARG1-of (n2 / new-01))
      :ARG1 (p / person
            :mod (o / overseas)
            :ARG0-of (a / attack-01
                  :mod (c2 / cyber))))

# ::snt 5 killed in Israeli air strikes in Gaza
(k / kill-01
      :ARG0 (s / strike-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Israel"))
            :ARG1 (c2 / country-region
                  :name (n2 / name
                        :op1 "Gaza"))
            :path (a / air))
      :ARG1 (p / person
            :quant 5))

# ::snt Deadly Blast Rocks Coal Mine in East Ukraine
(r / rock-03
      :ARG0 (b / blast-05
            :mod (d / die-01))
      :ARG1 (m / mine
            :mod (c / coal)
            :location (c2 / country
                  :name (n / name
                        :op1 "Ukraine")
                  :part (e / east))))

# ::snt Greece bailout uncertainty weighs on global markets
(w / weigh-01
      :ARG0 (c / certainty
            :polarity -
            :domain (b / bail-out-02
                  :ARG1 (c2 / country
                        :name (n / name
                              :op1 "Greece"))))
      :ARG1 (m / market
            :mod (g / globe)))

# ::snt Funeral of Ian Paisley to take place in Belfast
(f / funeral
      :beneficiary (p / person
            :name (n / name
                  :op1 "Ian"
                  :op2 "Paisley"))
      :location (c / city
            :name (n2 / name
                  :op1 "Belfast")))

# ::snt Rooney helps Man United beat Everton 3-0 in Premier League
(h / help-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Rooney"))
      :ARG1 (b / beat-03
            :ARG0 (t / team
                  :name (n2 / name
                        :op1 "Man"
                        :op2 "United"))
            :ARG1 (t2 / team
                  :name (n3 / name
                        :op1 "Everton"))
            :ARG2 (s / score-entity
                  :op1 3
                  :op2 0)
            :location (l / league
                  :name (n4 / name
                        :op1 "Premier"
                        :op2 "League"))))

# ::snt Hard-line Jewish leader shot in Jerusalem
(s / shoot-02
      :ARG1 (p / person
            :ARG0-of (l / lead-02)
            :mod (r / religious-group
                  :name (n / name
                        :op1 "Jew"))
            :mod (h / hardline))
      :location (c / city
            :name (n2 / name
                  :op1 "Jerusalem")))

# ::snt Waba emerges new NLC president
(e / emerge-02
      :ARG0 (p / person
            :name (n / name
                  :op1 "Waba"))
      :ARG1 (p2 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n2 / name
                              :op1 "NLC"))
                  :ARG2 (p3 / president))
            :ARG1-of (n3 / new-01)))

# ::snt Backstage Moves Intensify as Fight Against Islamic State Widens
(ii / intensify-01
      :ARG1 (m / move-03
            :mod (b / backstage))
      :time (w / Widen-01
            :ARG1 (f / fight-01
                  :ARG1 (s / state
                        :mod (r / religious-group
                              :name (n / name
                                    :op1 "Islamic"))))))

# ::snt Egypt: IPI Urges Release of Al Jazeera Journalist Arrested in Berlin
(u / urge-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "IPI"))
      :ARG1 (r / release-01
            :ARG1 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (p2 / publication
                              :name (n2 / name
                                    :op1 "Al"
                                    :op2 "Jazeera"))
                        :ARG2 (j / journalist))
                  :ARG1-of (a / arrest-01
                        :location (c / city
                              :name (n3 / name
                                    :op1 "Berlin")))))
      :location (c2 / country
            :name (n4 / name
                  :op1 "Egypt")))

# ::snt occupied Palestinian territory: Israeli Forces Continue to Shed Palestinian Blood in oPt
(m / multi-sentence
      :snt1 (o / occupy-01
            :ARG1 (t / territory
                  :mod (c / country
                        :name (n / name
                              :op1 "Palestine"))))
      :snt2 (c2 / continue-01
            :ARG0 (f / force
                  :mod (c3 / country
                        :name (n2 / name
                              :op1 "Israel")))
            :ARG1 (s / shed-01
                  :ARG0 f
                  :ARG1 (b / blood
                        :mod (c4 / country
                              :name (n3 / name
                                    :op1 "Palestine")))
                  :location (p / publication
                        :name (n4 / name
                              :op1 "OPT")))))

# ::snt 5 US airstrikes target Islamic State fighters
(t / target-01
      :ARG0 (s / strike-01
            :quant 5
            :ARG0 (c / country
                  :name (n / name
                        :op1 "United"
                        :op2 "States"))
            :path (a / air))
      :ARG1 (p / person
            :ARG0-of (f / fight-01)
            :mod (c2 / criminal-organization
                  :name (n2 / name
                        :op1 "Islamic"
                        :op2 "State"))))

# ::snt Libya: UN orders investigation into Libya rights abuses
(o / order-01
      :ARG0 (o2 / organization
            :name (n / name
                  :op1 "UN"))
      :ARG2 (ii / investigate-01
            :ARG1 (a / abuse-01
                  :ARG0 (c / country
                        :name (n2 / name
                              :op1 "Libya"))
                  :ARG1 (r / right-05))))

# ::snt Taiwan coast guard launches new ships as South China Sea tensions rise
(l / launch-01
      :ARG0 (m / military
            :name (n / name
                  :op1 "Taiwan"
                  :op2 "Coast"
                  :op3 "Guard"))
      :ARG1 (s / ship
            :ARG1-of (n2 / new-01))
      :time (r / rise-01
            :ARG1 (t / tension
                  :location (s2 / sea
                        :name (n3 / name
                              :op1 "South"
                              :op2 "China"
                              :op3 "Sea")))))

# ::snt Burundi police fire tear gas at protesters
(f / fire-01
      :ARG0 (p / police
            :mod (c / country
                  :name (n / name
                        :op1 "Burundi")))
      :ARG1 (g / gas-03
            :ARG0 p
            :ARG1 (p2 / person
                  :ARG0-of (p3 / protest-01))
            :instrument (t / tear))
      :direction p2)

# ::snt Nepal earthquake death toll surpasses 7,000
(s / surpass-01
      :ARG0 (t / toll
            :quant-of (d / die-01
                  :ARG1 (e / earthquake
                        :location (c / country
                              :name (n / name
                                    :op1 "Nepal")))))
      :ARG1 7000)

# ::snt Ashya's Parents Arrive For Extradition Hearing
(h / hope-01
      :ARG0 (p / person
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 "Ashya"))
                  :ARG2 (p3 / parent)))
      :ARG1 (h3 / hearing-02
            :ARG1 (e / extradite-01)))

# ::snt Nigeria admits slow response in Ebola case
(a / admit-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Nigeria"))
      :ARG1 (r / respond-01
            :ARG0 c
            :ARG1 (c2 / case-04
                  :ARG1 (d / disease
                        :name (n2 / name
                              :op1 "Ebola")))
            :ARG1-of (s / slow-05)))

# ::snt Thousands cross Austria-Hungary border
(c / cross-02
      :ARG0 (p / person
            :quant (m / multiple
                  :op1 1000))
      :ARG1 (b / border-01
            :ARG1 (c2 / country
                  :name (n / name
                        :op1 "Austria"))
            :ARG2 (c3 / country
                  :name (n2 / name
                        :op1 "Hungary"))))

# ::snt Kranjcar leaves it late to rescue QPR against Moses-inspired Stoke
(l / leave-13
      :ARG0 (p / person
            :name (n / name
                  :op1 "Kranjcar"))
      :ARG1 (l2 / late)
      :purpose (r / rescue-01
            :ARG0 p
            :ARG1 (t / team
                  :name (n2 / name
                        :op1 "QPR"))
            :prep-against (t2 / team
                  :name (n3 / name
                        :op1 "Stoke")
                  :ARG1-of (ii / inspire-01
                        :ARG0 (p2 / person
                              :name (n4 / name
                                    :op1 "Moses"))))))

# ::snt Oscar Pistorius sentenced to 5 years in prison
(s / sentence-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Oscar"
                  :op2 "P Pistorius"))
      :ARG2 (p2 / prison
            :duration (t / temporal-quantity
                  :quant 5
                  :unit (y / year))))

# ::snt Pro-Palestinian Activists March to UN Headquarters
(m / march-01
      :ARG0 (a / activist
            :ARG0-of (f / favor-01
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Palestine"))))
      :destination (h / headquarters
            :poss (o / organization
                  :name (n2 / name
                        :op1 "UN"))))

# ::snt Benzema faces possible charges in sex-tape case
(f / face-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Benzema"))
      :ARG1 (c / charge-05
            :ARG1 p
            :ARG2 (v / videotape-01
                  :manner (s / sex-01))
            :ARG1-of (p2 / possible-01)))

# ::snt US Senate votes to advance Iran nuclear review bill
(v / vote-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate")
            :mod (c / country
                  :name (n2 / name
                        :op1 "United"
                        :op2 "States")))
      :ARG1 (a / advance-01
            :ARG0 g
            :ARG1 (b / bill
                  :topic (r / review-01
                        :ARG1 (n3 / nucleus))
                  :mod (c2 / country
                        :name (n4 / name
                              :op1 "Iran")))))

# ::snt All 224 dead in Russian airliner mystery crash
(d / die-01
      :ARG1 (p / person
            :quant 224
            :mod (a / all))
      :ARG1-of (c / cause-01
            :ARG0 (c2 / crash-01
                  :ARG1 (a2 / airliner
                        :poss (c3 / country
                              :name (n / name
                                    :op1 "Russia")))
                  :mod (m / mystery))))

# ::snt Li Na to announce retirement
(a / announce-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Li"
                  :op2 "Na"))
      :ARG1 (r / retire-01
            :ARG0 p))

# ::snt Gunners fire but fail to advance in Champions League
(c / contrast-01
      :ARG1 (f / fire-01
            :ARG0 (g / gunner))
      :ARG2 (f2 / fail-01
            :ARG1 g
            :ARG2 (a / advance-01
                  :ARG1 g
                  :ARG2 (g2 / game
                        :name (n / name
                              :op1 "Champions"
                              :op2 "League")))))

# ::snt Scientists prove there is water on Mars
(p / prove-01
      :ARG0 (s / scientist)
      :ARG1 (w / water
            :location (p2 / planet
                  :name (n / name
                        :op1 "Mars"))))

# ::snt Iranian President praises nuclear deal
(p / praise-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Iran"))
                  :ARG2 (p3 / president)))
      :ARG1 (d / deal-01
            :ARG2 (n2 / nucleus)))

# ::snt Boko Haram disrupts Nigerian elections
(d / disrupt-01
      :ARG0 (c / criminal-organization
            :name (n / name
                  :op1 "Boko"
                  :op2 "Haram"))
      :ARG1 (e / elect-01
            :location (c2 / country
                  :name (n2 / name
                        :op1 "Nigeria"))))

# ::snt South Korea regrets North's refusal of talks
(r / regret-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "South"
                  :op2 "Korea"))
      :ARG1 (r2 / refuse-01
            :ARG0 (c2 / country
                  :name (n2 / name
                        :op1 "North"))
            :ARG1 (t / talk-01
                  :ARG0 c2)))

# ::snt Plane Crash Site Search Called off for the Night
(c / call-off-04
      :ARG1 (s / search-01
            :ARG2 (s2 / site
                  :mod (c2 / crash-01)))
      :time (d / date-entity
            :dayperiod (n / night)))

# ::snt Editors from around the world urge Turkey to protect media
(u / urge-01
      :ARG0 (p / person
            :ARG0-of (e / edit-01)
            :source (a / around
                  :op1 (w / world)))
      :ARG1 (c / country
            :name (n / name
                  :op1 "Turkey"))
      :ARG2 (p2 / protect-01
            :ARG0 c
            :ARG1 (m / media)))

# ::snt Obama queries Turnbull over China port deal
(q / query-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (p2 / person
            :name (n2 / name
                  :op1 "Turnbull"))
      :ARG2 (d / deal-01
            :ARG2 (p3 / port
                  :location (c / country
                        :name (n3 / name
                              :op1 "China")))))

# ::snt China's generous 1MDB bid seen reaping it big returns in Malaysia
(s / see-01
      :ARG1 (r / reaping-01
            :ARG0 (b / bid-01
                  :ARG0 (c / country
                        :name (n / name
                              :op1 "China"))
                  :ARG1 (c2 / company
                        :name (n2 / name
                              :op1 "1MDB"))
                  :ARG2-of (g / generous-01))
            :ARG1 (r2 / return-05
                  :ARG1 b
                  :mod (b2 / big))
            :location (c3 / country
                  :name (n3 / name
                        :op1 "Malaysia"))))

# ::snt Hezbollah targets Qaeda gathering along border with Syria
(t / target-01
      :ARG0 (p / political-party
            :name (n / name
                  :op1 "Hezbollah"))
      :ARG1 (g / gather-03
            :ARG0 (c / criminal-organization
                  :name (n2 / name
                        :op1 "Qaeda"))
            :location (a / along
                  :op1 (b / border-01
                        :ARG1 p
                        :ARG2 (c2 / country
                              :name (n3 / name
                                    :op1 "Syria"))))))

# ::snt South Korea reports seven new MERS cases
(r / report-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "South"
                  :op2 "Korea"))
      :ARG1 (c2 / case-04
            :quant 7
            :ARG1 (d / disease
                  :name (n2 / name
                        :op1 "MERS"))
            :ARG1-of (n3 / new-01)))

# ::snt Obama calls for international front against IS
(c / call-03
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (f / front
            :mod (ii / international)
            :prep-against (c2 / criminal-organization
                  :name (n2 / name
                        :op1 "IS"))))

# ::snt U.S. military says it conducts airstrikes against IS in Syria, Iraq
(s / say-01
      :ARG0 (m / military
            :mod (c / country
                  :name (n / name
                        :op1 "U.S.")))
      :ARG1 (c2 / conduct-01
            :ARG0 m
            :ARG1 (s2 / strike-01
                  :ARG0 m
                  :ARG1 (a / and
                        :op1 (c3 / country
                              :name (n2 / name
                                    :op1 "Syria"))
                        :op2 (c4 / country
                              :name (n3 / name
                                    :op1 "Iraq")))
                  :path (a2 / air))))

# ::snt Who abandoned 3 Boeing planes at the airport?
(a / abandon-01
      :ARG0 (a2 / amr-unknown)
      :ARG1 (p / plane
            :quant 3
            :poss (c / company
                  :name (n / name
                        :op1 "Boeing")))
      :location (a3 / airport))

# ::snt North Korea to put US citizen on trial
(t / try-02
      :ARG0 (c / country
            :name (n / name
                  :op1 "North"
                  :op2 "Korea"))
      :ARG1 (c2 / citizen
            :mod (c3 / country
                  :name (n2 / name
                        :op1 "US"))))

# ::snt Hong Kong officials resume work as protests thin
(r / resume-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / city
                        :name (n / name
                              :op1 "Hong"
                              :op2 "Kong"))
                  :ARG2 (o / official)))
      :ARG1 (w / work-01
            :ARG0 p)
      :time (t / thin-03
            :ARG1 (p2 / protest-01)))

# ::snt UK Leader Signals Support for Airstrikes on IS in Syria
(s / signal-07
      :ARG0 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "UK"))))
      :ARG1 (s2 / support-01
            :ARG1 (s3 / strike-01
                  :ARG1 (c2 / country
                        :name (n2 / name
                              :op1 "Syria"))
                  :ARG2 (t / terrorist
                        :mod (r / religious-group
                              :name (n3 / name
                                    :op1 "IS"))))))

# ::snt Philippines, Canada pledge to further boost relations
(p / pledge-01
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "Philippines"))
            :op2 (c2 / country
                  :name (n2 / name
                        :op1 "Canada")))
      :ARG1 (b / boost-01
            :ARG0 a
            :ARG1 (r / relation-03)
            :degree (f / further)))

# ::snt Israel bars Palestinians from Jerusalem's Old City
(b / bar-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Israel"))
      :ARG1 (p / person
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine")))
      :ARG2 (c3 / city-district
            :name (n3 / name
                  :op1 "Old"
                  :op2 "City")
            :location (c4 / city
                  :name (n4 / name
                        :op1 "Jerusalem"))))

# ::snt How much do you know about Secret Service?
(k / know-02
      :ARG0 (y / you)
      :ARG1 (g / government-organization
            :name (n / name
                  :op1 "Secret"
                  :op2 "Service"))
      :quant (a / amr-unknown))

# ::snt N. Korea agrees to talks with South
(a / agree-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "N.Korea"))
      :ARG1 (t / talk-01
            :ARG0 c
            :ARG1 (c2 / country
                  :name (n2 / name
                        :op1 "South"))))

# ::snt Iran, a large important partner for Russia: Novak
(c / country
      :name (n / name
            :op1 "Novak")
      :domain (c2 / country
            :name (n2 / name
                  :op1 "Iran")
            :ARG0-of (p / partner-01
                  :ARG1 (c3 / country
                        :name (n3 / name
                              :op1 "Russia"))
                  :mod (l / large)
                  :ARG1-of (ii / important-01))))

# ::snt Taiwan's president charters plane to pay respects to Lee
(c / charter-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country
                        :name (n / name
                              :op1 "Taiwan"))
                  :ARG2 (p2 / president)))
      :ARG1 (p3 / plane)
      :purpose (p4 / pay-01
            :ARG0 p
            :ARG1 (r / respect-01
                  :ARG0 p
                  :ARG1 (p5 / person
                        :name (n2 / name
                              :op1 "Lee")))
            :ARG2 p5))

# ::snt Two Palestinians die in attacks on Israelis ahead of Kerry visit
(d / die-01
      :ARG1 (p / person
            :quant 2
            :mod (c / country
                  :name (n / name
                        :op1 "Palestine")))
      :ARG1-of (c2 / cause-01
            :ARG0 (a / attack-01
                  :ARG1 (p2 / person
                        :mod (c3 / country
                              :name (n2 / name
                                    :op1 "Israel")))
                  :time (a2 / ahead
                        :op1 (v / visit-01
                              :ARG0 (p3 / person
                                    :name (n3 / name
                                          :op1 "Kerry")))))))

# ::snt Thomas Cook accused of putting costs before customers
(a / accuse-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Thomas"
                  :op2 "Cook"))
      :ARG2 (p2 / put-01
            :ARG0 p
            :ARG1 (c / cost-01)
            :ARG2 (b / before
                  :op1 (p3 / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 p
                              :ARG2 (c2 / customer))))))

# ::snt Narendra Modi 'photoshopped' image of Chennai floods visit goes viral
(g / go-08
      :ARG1 (ii / image
            :ARG1-of (p / photoshoot-00)
            :topic (v / visit-01
                  :ARG0 (p2 / person
                        :name (n / name
                              :op1 "Narendra"
                              :op2 "Modi"))
                  :ARG1 (f / flood-01
                        :location (c / city
                              :name (n2 / name
                                    :op1 "Chennai")))))
      :ARG2 (v2 / viral))

# ::snt UN chief welcomes peaceful presidential elections in Guinea
(w / welcome-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 "UN"))
                  :ARG2 (c / chief)))
      :ARG1 (e / elect-01
            :ARG2 (p2 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (p3 / president)))
            :manner (p4 / peaceful)
            :location (c2 / country
                  :name (n2 / name
                        :op1 "Guinea"))))

# ::snt Pakistan executions draw international ire
(d / draw-02
      :ARG0 (e / execute-01
            :ARG1 (c / country
                  :name (n / name
                        :op1 "Pakistan")))
      :ARG1 (ii / ire
            :mod (ii2 / international)))

# ::snt South Korea declares end to MERS outbreak
(d / declare-02
      :ARG0 (c / country
            :name (n / name
                  :op1 "South"
                  :op2 "Korea"))
      :ARG1 (e / end-01
            :ARG0 c
            :ARG1 (o / outbreak-29
                  :ARG1 (d2 / disease
                        :name (n2 / name
                              :op1 "MERS")))))

# ::snt Volkswagen skids into red in wake of pollution scandal
(s / skid-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Volkswagen"))
      :ARG1 (r / red-02
            :ARG1 c)
      :time (w / wake
            :op1 (s2 / scandal
                  :topic (p / pollute-01))))

# ::snt Two Australians killed in Kenya after bus crashed into river
(k / kill-01
      :ARG1 (p / person
            :quant 2
            :mod (c / country
                  :name (n / name
                        :op1 "Australia")))
      :location (c2 / country
            :name (n2 / name
                  :op1 "Kenya"))
      :time (a / after
            :op1 (c3 / crash-01
                  :ARG1 (b / bus)
                  :location (r / river))))

# ::snt France shuts mosque, arrests man in crackdown after attacks
(a / and
      :op1 (s / shut-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "France"))
            :ARG1 (m / mosque))
      :op2 (a2 / arrest-01
            :ARG0 c
            :ARG1 (m2 / man))
      :time (c2 / crack-down-06
            :ARG0 c
            :time (a3 / after
                  :op1 (a4 / attack-01))))

# ::snt Russian plane reportedly crashes in Egypt
(c / crash-01
      :ARG1 (p / plane
            :poss (c2 / country
                  :name (n / name
                        :op1 "Russia")))
      :ARG1-of (r / report-01)
      :location (c3 / country
            :name (n2 / name
                  :op1 "Egypt")))

# ::snt Dozens of Egyptians hostages taken by Libyan terrorists as revenge for airstrikes
(h / hostage
      :quant (m / multiple
            :op1 12)
      :mod (c / country
            :name (n / name
                  :op1 "Egypt"))
      :ARG1-of (t / take-01
            :ARG0 (t2 / terrorist
                  :mod (c2 / country
                        :name (n2 / name
                              :op1 "Libya")))
            :purpose (r / revenge
                  :ARG1-of (c3 / cause-01
                        :ARG0 (s / strike-01
                              :path (a / air))))))

# ::snt President heading to Bahrain
(h / head-02
      :ARG0 (p / person
            :ARG0-of (h2 / have-org-role-91
                  :ARG2 (p2 / president)))
      :ARG1 (c / country
            :name (n / name
                  :op1 "Bahrain")))

# ::snt China, India vow to further bilateral ties
(v / vow-01
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "China"))
            :op2 (c2 / country
                  :name (n2 / name
                        :op1 "India")))
      :ARG1 (f / further-01
            :ARG0 a
            :ARG1 (t / tie-01
                  :ARG1 a
                  :mod (b / bilateral))))

# ::snt Obama is right: Africa deserves better leadership
(r / right-06
      :ARG1 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG2 (d / deserve-01
            :ARG0 (c / continent
                  :name (n2 / name
                        :op1 "Africa"))
            :ARG1 (l / lead-02
                  :ARG0 c
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 l)
                        :ARG3 (m / more)))))

# ::snt New video shows US police officers beating mentally-ill man
(s / show-01
      :ARG0 (v / video
            :ARG1-of (n / new-01))
      :ARG1 (b / beat-01
            :ARG0 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (p2 / police
                              :mod (c / country
                                    :name (n2 / name
                                          :op1 "US")))
                        :ARG2 (o / officer)))
            :ARG1 (m / man
                  :mod (m2 / mental))))

# ::snt I remained under the banyan tree, exhausted by my daily ritual of dragooning the men every two hours.
(r / remain-01
      :ARG1 (ii / i)
      :location (u / under
            :op1 (t / tree
                  :mod (b / banyan)))
      :ARG1-of (c / cause-01
            :ARG0 (e / exhaust-01
                  :ARG0 (r2 / ritual
                        :frequency (r3 / rate-entity-91
                              :ARG3 (t2 / temporal-quantity
                                    :quant 2
                                    :unit (h / hour)))
                        :poss ii
                        :consist-of (d / dragoon-01
                              :ARG0 ii
                              :ARG1 (m / man)
                              :frequency (r4 / rate-entity-91
                                    :ARG3 (t3 / temporal-quantity
                                          :quant 2
                                          :unit (h2 / hour)))))
                  :ARG1 ii)))

# ::snt In the US, it will depend on the school.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (s / school)
      :location (c / country
            :name (n / name
                  :op1 "US")))

# ::snt There's also what the string is made of.
(m / make-01
      :ARG1 (s / string)
      :ARG2 (t / thing
            :mod (a / also)))

# ::snt You also imply you may not be paid if they cannot place you with a client.
(ii / imply-01
      :ARG0 (y / you)
      :ARG1 (p / possible-01
            :polarity -
            :ARG1 (p2 / pay-01
                  :ARG2 y)
            :condition (p3 / possible-01
                  :polarity -
                  :ARG1 (p4 / place-01
                        :ARG0 (t / they)
                        :ARG1 y
                        :ARG2 (p5 / person
                              :ARG0-of (h / have-rel-role-91
                                    :ARG1 y
                                    :ARG2 (c / client))))))
      :mod (a / also))

# ::snt I did this one time as well.
(d / do-02
      :frequency 1
      :ARG0 (ii / i)
      :ARG1 (t / this)
      :mod (a / as-well))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt You do not need to worry.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (w / worry-01
            :ARG0 y))

# ::snt You should do it.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it))
      :ARG2 y)

# ::snt You should just ask your boss what he wants you to do.
(r / recommend-01
      :ARG1 (a / ask-01
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG1-of (d / do-02
                        :ARG0 y
                        :ARG1-of (w / want-01
                              :ARG0 (p / person
                                    :ARG0-of (h / have-rel-role-91
                                          :ARG1 y
                                          :ARG2 (b / boss))))))
            :ARG2 p
            :mod (j / just)))

# ::snt You need to read a lot to know what you like and what you don't.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (r / read-01
            :ARG0 y
            :quant (l / lot))
      :purpose (k / know-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG1-of (l2 / like-01
                              :ARG0 y))
                  :op2 (t2 / thing
                        :ARG1-of (l3 / like-01
                              :polarity -
                              :ARG0 y)))))

# ::snt It depends on what you want to have in your tank.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG1-of (h / have-03
                  :ARG0 (y / you)
                  :ARG1-of (w / want-01
                        :ARG0 y)
                  :location (t2 / tank
                        :poss y))))

# ::snt You can do it, too.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (t / too)))

# ::snt You should do it.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it))
      :ARG2 y)

# ::snt You have to decide what you want to get out of this.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (d / decide-01
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (g / get-01
                        :ARG0 y
                        :ARG2 (t2 / this)
                        :ARG1-of (w / want-01
                              :ARG0 y)))))

# ::snt I have few suggestions for you:
(s / suggest-01
      :ARG0 (ii / i)
      :ARG2 (y / you)
      :quant (f / few))

# ::snt if you don't want to derail the meeting, but the key is to speak up.
(k / key-02
      :ARG1 (s / speak-up-02
            :ARG0 (y / you))
      :condition (w / want-01
            :polarity -
            :ARG0 y
            :ARG1 (d / derail-01
                  :ARG0 y
                  :ARG1 (m / meet-03))))

# ::snt Unfortunately the answer to your question is we simply do not know.
(k / know-01
      :polarity -
      :ARG0 (w / we)
      :ARG1-of (s / simple-02)
      :ARG2-of (a / answer-01
            :ARG1 (q / question-01
                  :ARG0 (y / you)))
      :ARG2-of (f / fortunate-01
            :polarity -))

# ::snt As soon as possible.
(s / soon
      :ARG2-of (h / have-degree-91
            :ARG3 (e / equal)
            :ARG4 (p / possible-01)))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt The answer to both questions is: Yes.
(a / answer-01
      :ARG1 (q / question-01
            :mod (b / both))
      :ARG2 (y / yes))

# ::snt To give this an answer:
(g / give-01
      :ARG1 (t / thing
            :ARG2-of (a / answer-01)
            :mod (t2 / this)))

# ::snt Unfortunately the answer to your question is we simply do not know.
(k / know-01
      :polarity -
      :ARG0 (w / we)
      :ARG1-of (s / simple-02)
      :ARG2-of (a / answer-01
            :ARG1 (q / question-01
                  :ARG0 (y / you)))
      :ARG2-of (f / fortunate-01
            :polarity -))

# ::snt This is not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -)
      :domain (t / this))

# ::snt Yes, it's probably a good idea to renew your passport.
(p / probable
      :domain (ii / idea
            :ARG1-of (g / good-02)
            :domain (r / renew-01
                  :ARG0 (y / you)
                  :ARG1 (p2 / passport
                        :poss y))))

# ::snt It probably depends on the cut of meat.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (c / cut-02
            :ARG1 (m / meat))
      :mod (p / probable))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt It's pretty much up to you.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (y / you)
      :degree (p / pretty-much))

# ::snt Yes, there is a reason for it.
(r / reason
      :purpose (ii / it))

# ::snt Have you tried asking your employees?
(t / try-01
      :ARG0 (y / you)
      :ARG1 (a / ask-01
            :ARG2 (p / person
                  :ARG1-of (e / employ-01
                        :ARG0 y)))
      :polarity (a2 / amr-unknown))

# ::snt You guys are making this all WAAAAAY too complicated.
(m / make-02
      :ARG0 (y / you
            :mod (g / guy))
      :ARG1 (c / complicate-01
            :ARG1 (t / this
                  :mod (a / all))
            :ARG2-of (h / have-degree-91
                  :ARG1 t
                  :ARG3 (t2 / too))))

# ::snt You don't have to know.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y))

# ::snt There are two things to consider:
(c / consider-02
      :ARG1 (t / thing
            :quant 2))

# ::snt Work into it slowly.
(w / work-01
      :ARG1 (ii / it)
      :ARG1-of (s / slow-05))

# ::snt You can buy it on amazon for $5.
(p / possible-01
      :ARG1 (b / buy-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :ARG3 (m / monetary-quantity
                  :quant 5
                  :unit (d / dollar))
            :location (c / company
                  :name (n / name
                        :op1 "Amazon"))))

# ::snt The coffee simply picks up the aluminum from the pot, as the coffee is acidic.
(p / pick-up-04
      :ARG0 (c / coffee)
      :ARG1 (a / aluminum)
      :ARG2 (p2 / pot)
      :ARG1-of (s / simple-02)
      :ARG1-of (c2 / cause-01
            :ARG0 (a2 / acidic
                  :domain (c3 / coffee))))

# ::snt There are two ways to start with: plunging and dripping.
(w / way
      :quant 2
      :manner-of (s / start-01)
      :ARG1-of (m / mean-01
            :ARG2 (a / and
                  :op1 (p / plunge-01)
                  :op2 (d / drip-01))))

# ::snt You might have to try a variety before you find one that clicks with him.
(p / possible-01
      :ARG1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (t / try-01
                  :ARG0 y
                  :ARG1 (v / variety)
                  :time (b / before
                        :op1 (f / find-01
                              :ARG0 y
                              :ARG1 (o2 / one
                                    :ARG1-of (c / click-01
                                          :ARG2 (h / he))))))))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt Yes, you should mention your experience.
(r / recommend-01
      :ARG1 (m / mention-01
            :ARG0 (y / you)
            :ARG1 (e / experience-01
                  :ARG0 y)))

# ::snt From what I understand this is what you can do :
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / this))
      :source (t2 / thing
            :ARG1-of (u / understand-01
                  :ARG0 (ii / i))))

# ::snt Take a look at these:
(l / look-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / this))

# ::snt I'd say it primarily depends on two things:
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (t / thing
                  :quant 2)
            :mod (p / primary)))

# ::snt Some of what you can do:
(t / thing
      :ARG1-of (ii / include-91
            :ARG2 (t2 / thing
                  :ARG1-of (d / do-02
                        :ARG0 (y / you)
                        :ARG1-of (p / possible-01))))
      :quant (s / some))

# ::snt This is not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -)
      :domain (t / this))

# ::snt The answers so far are already good, but I'd like to add a map for Switzerland:
(h / have-concession-91
      :ARG1 (l / like-02
            :ARG0 (ii / i)
            :ARG1 (a / add-01
                  :ARG0 ii
                  :ARG1 (m / map
                        :topic (c / country
                              :name (n / name
                                    :op1 "Switzerland")))))
      :ARG2 (g / good-02
            :ARG1 (t / thing
                  :ARG2-of (a2 / answer-01)
                  :time (s / so-far))
            :time (a3 / already)))

# ::snt I was in a similar situation.
(r / resemble-01
      :ARG1 (s / situation
            :domain (ii / i)))

# ::snt I've had this same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)
            :mod (t / this)))

# ::snt There is no maximum.
(m / maximum
      :polarity -)

# ::snt I am not sure this is the right site for the question.
(s / sure-02
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (s2 / site
            :ARG1-of (r / right-03
                  :ARG2 (q / question-01))
            :domain (t / this)))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt You need to read a lot to know what you like and what you don't.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (r / read-01
            :ARG0 y
            :quant (l / lot))
      :purpose (k / know-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG1-of (l2 / like-01
                              :ARG0 y))
                  :op2 (t2 / thing
                        :ARG1-of (l3 / like-01
                              :polarity -
                              :ARG0 y)))))

# ::snt You are not disclosing key info.
(d / disclose-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (ii / information
            :ARG1-of (k / key-02)))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt This is a problem that the professor has to deal with.
(p / problem
      :domain (t / this)
      :ARG2-of (d / deal-01
            :ARG0 (p2 / professor)
            :ARG2-of (o / obligate-01)))

# ::snt This is a very unusual request.
(r / request-01
      :mod (u / usual
            :polarity -
            :degree (v / very))
      :domain (t / this))

# ::snt It very much depends on the grant in question.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (g / grant-01
            :ARG1-of (q / question-01))
      :degree (m / much
            :degree (v / very)))

# ::snt I have the same thing.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG1-of (s / same-01)))

# ::snt No it does not affect your ratings.
(a / affect-01
      :polarity -
      :ARG0 (ii / it)
      :ARG1 (r / rate-01
            :ARG1 (y / you)))

# ::snt My answer to your question is "Probably Not".
(a / answer-01
      :ARG0 (ii / i)
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (p / probable
            :domain (t / thing
                  :polarity -)))

# ::snt I don't think it makes any tremendous difference.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (m / make-02
            :ARG0 (ii2 / it)
            :ARG1 (d / differ-02
                  :degree (t2 / tremendous)
                  :mod (a / any))))

# ::snt It depends on what they are.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :domain (t2 / they)))

# ::snt There's not a lot you can do about that.
(p / possible-01
      :polarity -
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (l / lot)
            :ARG2 (t / that)))

# ::snt You answered your own question.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt This is not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -)
      :domain (t / this))

# ::snt The best thing you can do is to know your stuff.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (k / know-01
                  :ARG0 y
                  :ARG1 (s / stuff
                        :poss y))
            :ARG1-of (g / good-02
                  :ARG2-of (h / have-degree-91
                        :ARG1 k
                        :ARG3 (m / most)))))

# ::snt I'd say it primarily depends on two things:
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (t / thing
                  :quant 2)
            :mod (p / primary)))

# ::snt You don't have to know.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y))

# ::snt I have the same thing.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG1-of (s / same-01)))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt You are on the right path.
(b / be-located-at-91
      :ARG1 (y / you)
      :ARG2 (p / path
            :ARG1-of (r / right-03)))

# ::snt This doesn't answer your question, but:
(a / answer-01
      :polarity -
      :ARG0 (t / this)
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG1-of (c / contrast-01))

# ::snt How should I proceed about this?
(r / recommend-01
      :ARG1 (p / proceed-01
            :ARG0 (ii / i)
            :ARG1 (t / this)
            :manner (a / amr-unknown))
      :ARG2 ii)

# ::snt Does this page answer your question?
(a / answer-01
      :polarity (a2 / amr-unknown)
      :ARG0 (p / page
            :mod (t / this))
      :ARG1 (q / question-01
            :ARG0 (y / you)))

# ::snt You can use it, too.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (t / too)))

# ::snt It really depends on how the employer documents it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :manner-of (d2 / document-01
                  :ARG0 (p / person
                        :ARG0-of (e / employ-01))
                  :ARG1 (ii2 / it)))
      :ARG1-of (r / real-04))

# ::snt I've had this same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)
            :mod (t / this)))

# ::snt You need to read a lot to know what you like and what you don't.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (r / read-01
            :ARG0 y
            :quant (l / lot))
      :purpose (k / know-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG1-of (l2 / like-01
                              :ARG0 y))
                  :op2 (t2 / thing
                        :ARG1-of (l3 / like-01
                              :polarity -
                              :ARG0 y)))))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt Yes, you have to file a tax return in Canada.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (f / file-01
            :ARG0 y
            :ARG1 (r / return-05
                  :ARG1 (t / tax-01))
            :location (c / country
                  :name (n / name
                        :op1 "Canada"))))

# ::snt I don't see why there should be any problem with this whatsoever.
(s / see-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG0-of (c / cause-01
                  :ARG1 (r / recommend-01
                        :ARG1 (p / problem
                              :topic (t2 / this)
                              :mod (a / any))
                        :degree (w / whatsoever)))))

# ::snt Hope this is what you are looking for.
(h / hope-01
      :ARG0 (ii / i)
      :ARG1 (l / look-01
            :ARG0 (y / you)
            :ARG1 (t / this)))

# ::snt The best thing you can do is to know your stuff.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (k / know-01
                  :ARG0 y
                  :ARG1 (s / stuff
                        :poss y))
            :ARG1-of (g / good-02
                  :ARG2-of (h / have-degree-91
                        :ARG1 k
                        :ARG3 (m / most)))))

# ::snt It depends on the dish and how amenable it is at the stage you make the mistake.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (d2 / dish)
            :op2 (a2 / amenable-00
                  :ARG1 (ii2 / it)
                  :time (s / stage)))
      :ARG1-of (m / mistake-02
            :ARG0 (y / you)))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt You PROBABLY don't have any chance at the moment.
(c / chance-02
      :polarity -
      :ARG0 (y / you)
      :time (m / moment)
      :mod (p / practical))

# ::snt It really doesn't matter.
(m / matter-01
      :polarity -
      :ARG1 (ii / it)
      :ARG1-of (r / real-04))

# ::snt You don't need to know everything.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (k / know-01
            :ARG0 y
            :ARG1 (e / everything)))

# ::snt I think you're looking for Mikey (1992).
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (l / look-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :name (n / name
                        :op1 "Mikey")
                  :time (d / date-entity
                        :year 1992))))

# ::snt It makes absolutely NO difference.
(m / make-02
      :ARG0 (ii / it)
      :ARG1 (d / differ-02
            :polarity -
            :degree (a / absolute)))

# ::snt I think it's fine to ask this question.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (f / fine-04
            :ARG1 (a / ask-01
                  :ARG1 (t2 / thing
                        :ARG1-of (q / question-01)
                        :mod (t3 / this)))))

# ::snt I'm going to be very direct here.
(d / direct-02
      :ARG0 (ii / i)
      :location (h / here)
      :degree (v / very))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt You should do it.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it))
      :ARG2 y)

# ::snt There's not a lot you can do about that.
(p / possible-01
      :polarity -
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (l / lot)
            :ARG2 (t / that)))

# ::snt What kind of insulation is it?
(t / thing
      :ARG0-of (ii / insulation-01)
      :mod (k / kind
            :mod (a / amr-unknown)))

# ::snt It depends entirely on your company and your contract.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (c / company
                  :poss (y / you))
            :op2 (c2 / contract-02
                  :ARG0 y))
      :degree (e / entire))

# ::snt You answered your own question.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y))

# ::snt I don't think that there's any.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (a / any))

# ::snt There are a few things you can do:
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few))))

# ::snt This is the tip I find most useful:
(f / find-02
      :ARG0 (ii / i)
      :ARG1 (h / have-degree-91
            :ARG1 (t / tip
                  :domain (t2 / this))
            :ARG2 (u / useful-05
                  :ARG1 t)
            :ARG3 (m / most)))

# ::snt That's what I believe.
(b / believe-01
      :ARG0 (ii / i)
      :ARG1 (t / that))

# ::snt If you are not sure how to do it, don't do it at all.
(d / do-02
      :polarity -
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :mod (a / at-all)
      :condition (s / sure-02
            :polarity -
            :ARG0 y
            :ARG1 (t / thing
                  :manner-of (d2 / do-02
                        :ARG0 y
                        :ARG1 ii))))

# ::snt It's all in her head.
(b / be-located-at-91
      :ARG1 (a / all)
      :ARG2 (h / head
            :part-of (s / she)))

# ::snt If you are not sure how to do it, don't do it at all.
(d / do-02
      :polarity -
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :mod (a / at-all)
      :condition (s / sure-02
            :polarity -
            :ARG0 y
            :ARG1 (t / thing
                  :manner-of (d2 / do-02
                        :ARG0 y
                        :ARG1 ii))))

# ::snt You need to read a lot to know what you like and what you don't.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (r / read-01
            :ARG0 y
            :quant (l / lot))
      :purpose (k / know-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG1-of (l2 / like-01
                              :ARG0 y))
                  :op2 (t2 / thing
                        :ARG1-of (l3 / like-01
                              :polarity -
                              :ARG0 y)))))

# ::snt I would say you can do it, but it wouldn't be advised.
(c / contrast-01
      :ARG1 (s / say-01
            :ARG0 (ii / i)
            :ARG1 (p / possible-01
                  :ARG1 (d / do-02
                        :ARG0 (y / you)
                        :ARG1 (ii2 / it))))
      :ARG2 (a / advise-01
            :polarity -
            :ARG2 ii2))

# ::snt Can you do this?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / this)))

# ::snt Sure, I've  done this very trip.
(d / do-02
      :ARG0 (ii / i)
      :ARG1 (t / trip-03
            :ARG0 ii
            :mod (v / very)
            :mod (t2 / this))
      :ARG1-of (s / sure-02))

# ::snt You can use it, too.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (t / too)))

# ::snt How do you do that?
(d / do-02
      :ARG0 (y / you)
      :ARG1 (t / that)
      :manner (a / amr-unknown))

# ::snt I've located an article that might be of some help: http://www.dsattorney.com/qa-pseudonyms-in-contracts/
(l / locate-01
      :ARG0 (ii / i)
      :ARG1 (a / article
            :ARG2-of (h / help-01
                  :mod (s / some)
                  :ARG1-of (p / possible-01))
            :mod (u / url-entity
                  :value "http://www.dsattorney.com/qa-pseudonyms-in-contracts/")))

# ::snt I would say you can do it, but it wouldn't be advised.
(c / contrast-01
      :ARG1 (s / say-01
            :ARG0 (ii / i)
            :ARG1 (p / possible-01
                  :ARG1 (d / do-02
                        :ARG0 (y / you)
                        :ARG1 (ii2 / it))))
      :ARG2 (a / advise-01
            :polarity -
            :ARG2 ii2))

# ::snt Unfortunately the answer to your question is we simply do not know.
(k / know-01
      :polarity -
      :ARG0 (w / we)
      :ARG1-of (s / simple-02)
      :ARG2-of (a / answer-01
            :ARG1 (q / question-01
                  :ARG0 (y / you)))
      :ARG2-of (f / fortunate-01
            :polarity -))

# ::snt If you are not sure how to do it, don't do it at all.
(d / do-02
      :polarity -
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :mod (a / at-all)
      :condition (s / sure-02
            :polarity -
            :ARG0 y
            :ARG1 (t / thing
                  :manner-of (d2 / do-02
                        :ARG0 y
                        :ARG1 ii))))

# ::snt It's also a matter of taste.
(m / matter
      :topic (t / taste)
      :domain (ii / it)
      :mod (a / also))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt This answer is based on my experience teaching undergraduate math in the US.
(b / base-02
      :ARG1 (a / answer-01
            :mod (t / this))
      :ARG2 (e / experience-01
            :ARG0 (ii / i)
            :ARG1 (t2 / teach-01
                  :ARG0 ii
                  :ARG1 (m / mathematics
                        :mod (u / undergraduate))
                  :location (c / country
                        :name (n / name
                              :op1 "US")))))

# ::snt There are a few things I think you should do.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few)))
      :ARG2 y
      :ARG1-of (t2 / think-01
            :ARG0 (ii / i)))

# ::snt You will want to clean the area first.
(w / want-01
      :ARG0 (y / you)
      :ARG1 (c / clean-01
            :ARG0 y
            :ARG1 (a / area)
            :ord (o / ordinal-entity
                  :value 1)))

# ::snt It depends on what you want to have in your tank.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG1-of (h / have-03
                  :ARG0 (y / you)
                  :ARG1-of (w / want-01
                        :ARG0 y)
                  :location (t2 / tank
                        :poss y))))

# ::snt There are a couple of options that you could consider:
(p / possible-01
      :ARG1 (c / consider-02
            :ARG0 (y / you)
            :ARG1 (o / option
                  :quant (c2 / couple))))

# ::snt You don't have to worry.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (w / worry-01
            :ARG0 y))

# ::snt Vietnamese citizens need a visa to visit the USA.
(n / need-01
      :ARG0 (c / citizen
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Vietnam")))
      :ARG1 (v / visa)
      :purpose (v2 / visit-01
            :ARG0 c
            :ARG1 (c3 / country
                  :name (n3 / name
                        :op1 "USA"))))

# ::snt It depends on how it's used.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :manner-of (u / use-01
                  :ARG1 (ii2 / it))))

# ::snt I don't see why there should be any problem with this whatsoever.
(s / see-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG0-of (c / cause-01
                  :ARG1 (r / recommend-01
                        :ARG1 (p / problem
                              :topic (t2 / this)
                              :mod (a / any))
                        :degree (w / whatsoever)))))

# ::snt There's not a lot you can do about that.
(p / possible-01
      :polarity -
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (l / lot)
            :ARG2 (t / that)))

# ::snt You got it right.
(g / get-02
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :ARG2-of (r / right-06))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt How do you do that?
(d / do-02
      :ARG0 (y / you)
      :ARG1 (t / that)
      :manner (a / amr-unknown))

# ::snt I was in a similar situation.
(r / resemble-01
      :ARG1 (s / situation
            :domain (ii / i)))

# ::snt What is your lid made of?
(m / make-01
      :ARG1 (l / lid
            :poss (y / you))
      :ARG2 (a / amr-unknown))

# ::snt You don't need any visa.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (v / visa
            :mod (a / any)))

# ::snt That is your problem, not your supervisor's.
(a / and
      :op1 (p / problem
            :poss (y / you)
            :domain (t / that))
      :op2 (p2 / problem
            :polarity -
            :poss (p3 / person
                  :ARG0-of (s / supervise-01
                        :ARG1 y))
            :domain t))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt There are two things to consider:
(c / consider-02
      :ARG1 (t / thing
            :quant 2))

# ::snt It depends entirely on your company and your contract.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (c / company
                  :poss (y / you))
            :op2 (c2 / contract-02
                  :ARG0 y))
      :degree (e / entire))

# ::snt The wood probably isn't rotten, it's just worn out.
(c / contrast-01
      :ARG1 (r / rot-01
            :polarity -
            :ARG1 (w / wood)
            :mod (p / probable))
      :ARG2 (w2 / wear-out-03
            :ARG1 w
            :mod (j / just)))

# ::snt Well, I wouldn't put it on my cv.
(p / put-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (ii2 / it)
      :ARG2 (t / television
            :mod (c / circuit
                  :ARG1-of (c2 / close-01))
            :poss ii)
      :mod (w / well))

# ::snt This is a great one...
(g / great
      :domain (t / this))

# ::snt The answer to both questions is: Yes.
(a / answer-01
      :ARG1 (q / question-01
            :mod (b / both))
      :ARG2 (y / yes))

# ::snt Yes, there is a reason to not do what you propose.
(r / reason
      :purpose (d / do-02
            :polarity -
            :ARG1 (t / thing
                  :ARG1-of (p / propose-01
                        :ARG0 (y / you)))))

# ::snt I think it is depends on the program.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (p / program)))

# ::snt Can you do this?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / this)))

# ::snt I think there isn't a general answer.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (t2 / thing
            :polarity -
            :ARG2-of (a / answer-01)
            :ARG1-of (g / general-02)))

# ::snt There are a few things you can do:
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few))))

# ::snt The key is you have to find something that works for you, and your goals.
(k / key-02
      :ARG1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (f / find-01
                  :ARG0 y
                  :ARG1 (s / something
                        :ARG1-of (w / work-09
                              :ARG2 (a / and
                                    :op1 y
                                    :op2 (g / goal
                                          :poss y)))))))

# ::snt You don't have to know.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y))

# ::snt I think you've pretty much done your review.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (r / review-01
            :ARG0 (y / you))
      :degree (p / pretty-much))

# ::snt There are a few things I think you should do.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few)))
      :ARG2 y
      :ARG1-of (t2 / think-01
            :ARG0 (ii / i)))

# ::snt You burn more Calories digesting protein than you do carbohydrates and fat.
(b / burn-01
      :ARG0 (y / you)
      :ARG1 (c / calorie
            :ARG1-of (h / have-quant-91
                  :ARG3 (m / more)
                  :ARG4 (b2 / burn-01
                        :ARG0 y
                        :ARG1 (c2 / calorie
                              :ARG3-of (d / digest-01
                                    :ARG0 y
                                    :ARG1 (p / protein))))))
      :ARG2-of (h2 / have-degree-91
            :ARG3 m)
      :ARG1-of h2
      :ARG4 (b3 / burn-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (c3 / carbohydrate)
                  :op2 (f / fat))))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt You got it right.
(g / get-02
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :ARG2-of (r / right-06))

# ::snt You answered your own question.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y))

# ::snt I have the same thing.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG1-of (s / same-01)))

# ::snt Yes, there is a chemical difference.
(d / differ-02
      :mod (c / chemical))

# ::snt They can be out of level by a bit, but flat is important.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (o / out-06
                  :ARG1 (t / they)
                  :ARG2 (l / level)
                  :degree (b / bit)))
      :ARG2 (ii / important-01
            :ARG1 (f / flat-06)))

# ::snt I would look at this: U.S.
(l / look-01
      :ARG0 (ii / i)
      :ARG1 (c / country
            :name (n / name
                  :op1 "U.S.")
            :mod (t / this)))

# ::snt You are on the right path.
(b / be-located-at-91
      :ARG1 (y / you)
      :ARG2 (p / path
            :ARG1-of (r / right-03)))

# ::snt If you haven't, you should.
(r / recommend-01
      :ARG2 (y / you)
      :condition (d / do-02
            :polarity -
            :ARG0 y))

# ::snt Yes it is common!
(c / common
      :domain (ii / it))

# ::snt I don't think that there's any.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (a / any))

# ::snt It looks to me that this is set up for what you want:
(l / look-02
      :ARG0 (ii / i)
      :ARG1 (s / set-up-03
            :ARG1 (t / this)
            :ARG2 (t2 / thing
                  :ARG1-of (w / want-01
                        :ARG0 (y / you)))))

# ::snt Problem is, the system doesn't account for people who could care less about money, or title.
(p / problem
      :domain (a / account-01
            :polarity -
            :ARG0 (s / system)
            :ARG1 (p2 / person
                  :ARG0-of (c / care-01
                        :ARG1 (o / or
                              :op1 (m / money)
                              :op2 (t / title))
                        :ARG1-of (p3 / possible-01)
                        :mod (l / less)))))

# ::snt In the first case, I think you don't need it.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (n / need-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (ii2 / it))
      :condition (c / case-04
            :ord (o / ordinal-entity
                  :value 1)))

# ::snt It is impossible to answer this question without a form check.
(p / possible-01
      :polarity -
      :ARG1 (a / answer-01
            :ARG1 (q / question-01
                  :mod (t / this))
            :manner (c / check-01
                  :polarity -
                  :ARG1 (f / form))))

# ::snt You need to add this to your resume because it is the only position you have had.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (a / add-02
            :ARG0 y
            :ARG1 (t / this)
            :ARG2 (r / resume
                  :poss y))
      :ARG1-of (c / cause-01
            :ARG0 (p / position-02
                  :ARG0 y
                  :ARG1 (ii / it)
                  :mod (o / only))))

# ::snt Work into it slowly.
(w / work-01
      :ARG1 (ii / it)
      :ARG1-of (s / slow-05))

# ::snt No, you do not NEED a bread machine.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (m / machine
            :instrument-of (b / bread-01)))

# ::snt Yes, it is possible to publish a paper on model analysis.
(p / possible-01
      :ARG1 (p2 / publish-01
            :ARG1 (p3 / paper
                  :topic (a / analyze-01
                        :ARG1 (m / model)))))

# ::snt You just have to base your answer on what you do know, which is what you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (b / base-02
            :ARG0 y
            :ARG1 (a / answer-01
                  :ARG0 y)
            :ARG2 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 y)
                  :ARG1-of (w / want-01
                        :ARG0 y)))
      :mod (j / just))

# ::snt Yes, you should mention your experience.
(r / recommend-01
      :ARG1 (m / mention-01
            :ARG0 (y / you)
            :ARG1 (e / experience-01
                  :ARG0 y)))

# ::snt I think it is great that you had a test conducted.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (g / great
            :domain (c / conduct-01
                  :ARG1 (t2 / test-01
                        :ARG1 (y / you)))))

# ::snt You don't have to know.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y))

# ::snt Yes, there is a rule against this.
(r / rule-01
      :ARG3 (t / this))

# ::snt What are your goals?
(g / goal
      :poss (y / you)
      :domain (a / amr-unknown))

# ::snt I'm going to go out on a limb here...
(g / go-out-17
      :ARG1 (ii / i)
      :location (l / limb)
      :location (h / here))

# ::snt If your long stay visa for Switzerland is valid, then you will not need a transit visa.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (v / visa
            :mod (t / transit))
      :condition (v2 / valid-02
            :ARG1 (v3 / visa
                  :purpose (s / stay-01
                        :ARG1 y
                        :ARG3 (c / country
                              :name (n2 / name
                                    :op1 "Switzerland"))
                        :ARG1-of (l / long-03))
                  :poss y)))

# ::snt A few more point to think about:
(p / point
      :mod (m / more
            :quant (f / few))
      :ARG1-of (t / think-01))

# ::snt Now you don't have to be perfect on every answer.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (p / perfect-02
            :ARG1 y
            :ARG2 (a / answer-01
                  :mod (e / every)))
      :time (n / now))

# ::snt I'm afraid we are out of luck in this one.
(f / fear-01
      :ARG0 (ii / i)
      :ARG1 (o / out-03
            :ARG1 (w / we)
            :ARG2 (l / luck)
            :topic (t / this)))

# ::snt It is more deciding what you should do and what you should get others to do.
(h / have-quant-91
      :ARG1 (d / decide-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (r / recommend-01
                        :ARG1 (d2 / do-02
                              :ARG0 y))
                  :op2 (r2 / recommend-01
                        :ARG1 (g / get-04
                              :ARG0 y
                              :ARG1 (d3 / do-02
                                    :ARG0 (o / other))))))
      :ARG3 (m / more))

# ::snt It varies by the situation.
(v / vary-01
      :ARG1 (ii / it)
      :ARG2 (s / situation))

# ::snt I have the same thing.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG1-of (s / same-01)))

# ::snt I have the same thing.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG1-of (s / same-01)))

# ::snt You are on the right path.
(b / be-located-at-91
      :ARG1 (y / you)
      :ARG2 (p / path
            :ARG1-of (r / right-03)))

# ::snt Primer/paint will not work.
(w / work-09
      :polarity -
      :ARG1 (s / slash
            :op1 (p / primer)
            :op2 (p2 / paint)))

# ::snt The best thing you can do is to know your stuff.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (k / know-01
                  :ARG0 y
                  :ARG1 (s / stuff
                        :poss y))
            :ARG1-of (g / good-02
                  :ARG2-of (h / have-degree-91
                        :ARG1 k
                        :ARG3 (m / most)))))

# ::snt It's also a matter of taste.
(m / matter
      :topic (t / taste)
      :domain (ii / it)
      :mod (a / also))

# ::snt I was in a similar situation.
(r / resemble-01
      :ARG1 (s / situation
            :domain (ii / i)))

# ::snt You can use it, too.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (t / too)))

# ::snt You have to decide what you want to get out of this.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (d / decide-01
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (g / get-01
                        :ARG0 y
                        :ARG2 (t2 / this)
                        :ARG1-of (w / want-01
                              :ARG0 y)))))

# ::snt It depends on what they are.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :domain (t2 / they)))

# ::snt I had the same problem as you.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01
                  :ARG2 (p2 / problem
                        :poss (y / you)))))

# ::snt You don't need to know everything.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (k / know-01
            :ARG0 y
            :ARG1 (e / everything)))

# ::snt Also it is useful to keep the consistency in your story.
(u / useful-05
      :ARG1 (k / keep-02
            :ARG1 (c / consistent-02
                  :location (s / story
                        :poss (y / you))))
      :mod (a / also))

# ::snt I think it's just a habit.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (h / habit
            :domain (ii2 / it)
            :mod (j / just)))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt I'm thinking it's a bad idea.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (b / bad-04
            :ARG1 (ii2 / idea
                  :domain (ii3 / it))))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt You have a problem.
(h / have-03
      :ARG0 (y / you)
      :ARG1 (p / problem))

# ::snt Unfortunately the answer to your question is we simply do not know.
(k / know-01
      :polarity -
      :ARG0 (w / we)
      :ARG1-of (s / simple-02)
      :ARG2-of (a / answer-01
            :ARG1 (q / question-01
                  :ARG0 (y / you)))
      :ARG2-of (f / fortunate-01
            :polarity -))

# ::snt Unfortunately, this question cannot be answered in its full generality.
(f / fortunate-01
      :polarity -
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (a / answer-01
                  :ARG1 (t / thing
                        :ARG1-of (q / question-01)
                        :mod (t2 / this))
                  :manner (g / generality
                        :mod (f2 / full)
                        :poss t))))

# ::snt I would personally beware of the Motley Fool.
(b / beware-01
      :ARG0 (ii / i)
      :ARG1 (c / company
            :name (n / name
                  :op1 "Motley"
                  :op2 " Fool"))
      :ARG1-of (p / personal-02))

# ::snt I think there isn't a general answer.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (t2 / thing
            :polarity -
            :ARG2-of (a / answer-01)
            :ARG1-of (g / general-02)))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt You don't need any visa.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (v / visa
            :mod (a / any)))

# ::snt You have to decide what you want to get out of this.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (d / decide-01
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (g / get-01
                        :ARG0 y
                        :ARG2 (t2 / this)
                        :ARG1-of (w / want-01
                              :ARG0 y)))))

# ::snt I had the same problem as you.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01
                  :ARG2 (p2 / problem
                        :poss (y / you)))))

# ::snt My answer to your question is "Probably Not".
(a / answer-01
      :ARG0 (ii / i)
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (p / probable
            :domain (t / thing
                  :polarity -)))

# ::snt You should do it.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it))
      :ARG2 y)

# ::snt I had the same problem as you.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01
                  :ARG2 (p2 / problem
                        :poss (y / you)))))

# ::snt Hope this is what you are looking for.
(h / hope-01
      :ARG0 (ii / i)
      :ARG1 (l / look-01
            :ARG0 (y / you)
            :ARG1 (t / this)))

# ::snt There are two things to consider:
(c / consider-02
      :ARG1 (t / thing
            :quant 2))

# ::snt It's pretty much up to you.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (y / you)
      :degree (p / pretty-much))

# ::snt There are a few things you can do:
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few))))

# ::snt The answer to this and all such similar questions is in two stages:
(a / answer-01
      :ARG1 (a2 / and
            :op1 (t / this)
            :op2 (q / question-01
                  :ARG1-of (r / resemble-01)
                  :mod (s / such)
                  :mod (a3 / all)))
      :ARG2 (s2 / stage
            :quant 2))

# ::snt It is impossible to answer this question without a form check.
(p / possible-01
      :polarity -
      :ARG1 (a / answer-01
            :ARG1 (q / question-01
                  :mod (t / this))
            :manner (c / check-01
                  :polarity -
                  :ARG1 (f / form))))

# ::snt There are a few things you can do:
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few))))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt There are a few possible reasons.
(p / possible-01
      :ARG1 (r / reason
            :quant (f / few)))

# ::snt There are three options:
(o / option
      :quant 3)

# ::snt So think it in this way.
(ii / infer-01
      :ARG1 (t / think-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii2 / it)
            :manner (w / way
                  :mod (t2 / this))))

# ::snt Maybe this could work for you.
(p / possible-01
      :ARG1 (w / work-09
            :ARG1 (t / this)
            :ARG2 (y / you)))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt Microwave would be your best bet.
(b / bet-01
      :ARG0 (y / you)
      :ARG2 (p / product
            :name (n / name
                  :op1 "Microwave"))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 b)
            :ARG3 (m / most)))

# ::snt In the US, it will depend on the school.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (s / school)
      :location (c / country
            :name (n / name
                  :op1 "US")))

# ::snt It's not a good idea.
(ii / idea
      :polarity -
      :ARG1-of (g / good-02))

# ::snt There are a few things I think you should do.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few)))
      :ARG2 y
      :ARG1-of (t2 / think-01
            :ARG0 (ii / i)))

# ::snt I've had this same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)
            :mod (t / this)))

# ::snt This is not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -)
      :domain (t / this))

# ::snt Yes, there is a reason to not do what you propose.
(r / reason
      :purpose (d / do-02
            :polarity -
            :ARG1 (t / thing
                  :ARG1-of (p / propose-01
                        :ARG0 (y / you)))))

# ::snt Yes, there is at least one to my knowledge.
(k / know-01
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :quant (a / at-least
                  :op1 1)))

# ::snt You don't have to worry.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (w / worry-01
            :ARG0 y))

# ::snt There is no test that can tell you if it is sealed or not.
(t / test-01
      :polarity -
      :ARG0-of (t2 / tell-01
            :ARG1 (o / or
                  :op1 (s / seal-01
                        :ARG1 (ii / it))
                  :op2 (s2 / seal-01
                        :polarity -
                        :ARG1 ii))
            :ARG2 (y / you)
            :ARG1-of (p / possible-01)))

# ::snt Yes, you should make a résumé.
(r / recommend-01
      :ARG1 (m / make-05
            :ARG0 (y / you)
            :ARG1 (r2 / résumé))
      :ARG2 y)

# ::snt You shouldn't feel any obligation at all.
(r / recommend-01
      :ARG1 (f / feel-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (o / obligate-01
                  :ARG1 y
                  :mod (a / any))
            :mod (a2 / at-all)))

# ::snt I've had this same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)
            :mod (t / this)))

# ::snt You may have to experiment and find what you like.
(p / possible-01
      :ARG1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (a / and
                  :op1 (e / experiment-01
                        :ARG0 y)
                  :op2 (f / find-01
                        :ARG0 y
                        :ARG1 (t / thing
                              :ARG1-of (l / like-01
                                    :ARG0 y))))))

# ::snt My answer to your question is "Probably Not".
(a / answer-01
      :ARG0 (ii / i)
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (p / probable
            :domain (t / thing
                  :polarity -)))

# ::snt The key thing to realize here is that it's not your job to make people do their work.
(t / thing
      :ARG1-of (k / key-02)
      :domain (j / job
            :polarity -
            :poss (y / you)
            :domain (m / make-02
                  :ARG0 y
                  :ARG1 (d / do-02
                        :ARG0 (p / person)
                        :ARG1 (w / work-01
                              :ARG0 p))))
      :location (h / here))

# ::snt Not a direct answer to the question, but something to consider.
(c / contrast-01
      :ARG1 (a / answer-01
            :polarity -
            :ARG1 (q / question-01)
            :ARG1-of (d / direct-02))
      :ARG2 (c2 / consider-02
            :ARG1 (s / something)))

# ::snt There are two possible causes for this:
(c / cause-01
      :quant 2
      :ARG1 (t / this)
      :ARG1-of (p / possible-01))

# ::snt I agree with the other comments.
(a / agree-01
      :ARG0 (ii / i)
      :ARG1 (c / comment-01
            :mod (o / other)))

# ::snt The answer to both questions is: Yes.
(a / answer-01
      :ARG1 (q / question-01
            :mod (b / both))
      :ARG2 (y / yes))

# ::snt It rather depends on which country you're in.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (c / country
            :location-of (y / you))
      :degree (r / rather))

# ::snt This is a terrible idea.
(ii / idea
      :ARG1-of (t / terrible-01)
      :domain (t2 / this))

