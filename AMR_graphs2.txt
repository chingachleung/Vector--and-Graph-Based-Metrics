# ::snt How can I build a wall mounted adjustable height desk?
(p / possible-01
      :ARG1 (b / build-01
            :ARG0 (ii / i)
            :ARG1 (d / desk
                  :ARG1-of (m / mount-01
                        :ARG2 (w / wall))
                  :mod (h / height)
                  :ARG1-of (a / adjust-01
                        :ARG1-of p)))
      :manner (a2 / amr-unknown))

# ::snt How can I figure out why my washing machine is tripping the GFCI receptacle?
(p / possible-01
      :ARG1 (f / figure-out-05
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG0-of (c / cause-01
                        :ARG1 (t2 / trip-01
                              :ARG0 (m / machine
                                    :instrument-of (w / wash-01
                                          :ARG0 ii))
                              :ARG1 (r / receptacle
                                    :mod (o / organization
                                          :name (n / name
                                                :op1 "GFCI"))))))
            :manner (a / amr-unknown)))

# ::snt Should I cash out my IRA to pay my student loans?
(r / recommend-01
      :ARG1 (c / cash-out-03
            :ARG0 (ii / i)
            :ARG1 (p / product
                  :name (n / name
                        :op1 "IRA")
                  :poss ii)
            :purpose (p2 / pay-01
                  :ARG0 ii
                  :ARG3 (l / loan-01
                        :ARG2 ii
                        :ARG3 (p3 / person
                              :ARG0-of (s / study-01)))))
      :polarity (a / amr-unknown))

# ::snt What is the best way to fix this garage floor?
(f / fix-02
      :ARG1 (f2 / floor
            :mod (g / garage)
            :mod (t / this))
      :ARG2 (a / amr-unknown)
      :manner (w / way
            :ARG1-of (h / have-degree-91
                  :ARG2 (g2 / good-02
                        :ARG1 w)
                  :ARG3 (m / most))))

# ::snt What's the best way to store unused sushi rice?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (r / rice
                  :mod (s2 / sushi)
                  :ARG1-of (u / use-01
                        :polarity -)))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt Is there a bus from Tbilisi, Georgia to Thessaloniki, Greece?
(b / bus
      :source (c / city
            :name (n / name
                  :op1 "Tbilisi")
            :location (c2 / country
                  :name (n2 / name
                        :op1 "Georgia")))
      :destination (c3 / city
            :name (n3 / name
                  :op1 "Thessaloniki")
            :location (c4 / country
                  :name (n4 / name
                        :op1 "Greece")))
      :polarity (a / amr-unknown))

# ::snt How can I replace my light fixture with a ceiling fan?
(p / possible-01
      :ARG1 (r / replace-01
            :ARG0 (ii / i)
            :ARG1 (f / fixture
                  :purpose (l / light)
                  :poss ii)
            :ARG2 (f2 / fan
                  :location (c / ceiling)))
      :manner (a / amr-unknown))

# ::snt How do I connect the wires to this USB receptacle?
(c / connect-01
      :ARG0 (ii / i)
      :ARG1 (w / wire)
      :ARG2 (r / receptacle
            :mod (p / publication
                  :name (n / name
                        :op1 " USB"))
            :mod (t / this))
      :manner (a / amr-unknown))

# ::snt What type of faucet is this?
(f / faucet
      :mod (t / type
            :mod (a / amr-unknown))
      :domain (t2 / this))

# ::snt What is the difference between a mode and a scale?
(d / differ-02
      :ARG1 (m / mode)
      :ARG2 (s / scale)
      :ARG3 (a / amr-unknown))

# ::snt How do I maintain a good relationship with an employer after resigning?
(m / maintain-01
      :ARG0 (ii / i)
      :ARG1 (r / relation-03
            :ARG0 ii
            :ARG2 (p / person
                  :ARG0-of (e / employ-01))
            :ARG1-of (g / good-02))
      :polarity (a / amr-unknown)
      :manner (a2 / amr-unknown)
      :time (a3 / after
            :op1 (r2 / resign-01
                  :ARG0 ii)))

# ::snt How do I prevent an egg cracking while hard boiling it?
(p / prevent-01
      :ARG0 (ii / i)
      :ARG1 (c / crack-02
            :ARG1 (e / egg)
            :time (b / boil-01
                  :ARG0 ii
                  :ARG1 e
                  :ARG1-of (h / hard-02)))
      :manner (a / amr-unknown))

# ::snt How do I prepare this porous interior wall for paint?
(p / prepare-01
      :ARG0 (ii / i)
      :ARG1 (w / wall
            :mod (ii2 / interior)
            :mod (p2 / pore)
            :mod (t / this))
      :ARG2 (p3 / paint)
      :manner (a / amr-unknown))

# ::snt Why is there no hot water in the kitchen?
(w / water
      :polarity -
      :ARG1-of (h / hot-05)
      :location (k / kitchen)
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown)))

# ::snt Can I pay a collection agency in a way that will improve my credit score?
(p / possible-01
      :ARG1 (p2 / pay-01
            :ARG0 (ii / i)
            :ARG2 (a / agency
                  :ARG0-of (c / collect-01))
            :manner (ii2 / improve-01
                  :ARG0 a
                  :ARG1 (s / score
                        :mod (c2 / credit-01
                              :ARG1 ii))))
      :polarity (a2 / amr-unknown))

# ::snt How do I track 401k rollovers in Quicken?
(t / track-01
      :ARG0 (ii / i)
      :ARG1 (r / rollover
            :quant 401000
            :location (c / company
                  :name (n / name
                        :op1 "Quicken")))
      :manner (a / amr-unknown))

# ::snt What should I ask as an applicant in a job interview?
(r / recommend-01
      :ARG1 (a / ask-01
            :ARG0 (ii / i)
            :ARG1 (a2 / amr-unknown)
            :ARG2 (p / person
                  :ARG0-of (a3 / apply-01))
            :subevent-of (ii2 / interview-01
                  :ARG1 ii
                  :ARG2 (j / job))))

# ::snt How do I remove mildew from a tent?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (m / mildew)
      :ARG2 (t / tent)
      :manner (a / amr-unknown))

# ::snt UK income tax & charitable donations: How much is income tax reduced by donations?
(r / reduce-01
      :ARG0 (d / donate-01)
      :ARG1 (t / tax-01
            :mod (ii / income))
      :ARG2 (a / amr-unknown)
      :ARG1-of (c / cause-01
            :ARG0 (a2 / and
                  :op1 (t2 / tax-01
                        :mod (ii2 / income))
                  :op2 (d2 / donate-01
                        :mod (c2 / charitable))
                  :mod (c3 / country
                        :name (n / name
                              :op1 "UK")))))

# ::snt What kind of glass is this?
(g / glass
      :mod (k / kind
            :mod (a / amr-unknown))
      :domain (t / this))

# ::snt Will I Need a Transit visa or ESTA for the US as a Canadian?
(n / need-01
      :ARG0 (ii / i
            :mod (c / country
                  :name (n2 / name
                        :op1 "Canada")))
      :ARG1 (o / or
            :op1 (v / visa
                  :mod (t / transit))
            :op2 (v2 / visa
                  :mod (p / product
                        :name (n3 / name
                              :op1 "ESTA"))))
      :polarity (a / amr-unknown)
      :manner (p2 / person
            :mod c))

# ::snt Do I need a UK airside transit visa, if I already have a UK visitor visa?
(n / need-01
      :ARG0 (ii / i)
      :ARG1 (v / visa
            :mod (t / transit-01)
            :mod (a / airside)
            :mod (c / country
                  :name (n2 / name
                        :op1 "UK")))
      :polarity (a2 / amr-unknown)
      :condition (h / have-03
            :ARG0 ii
            :ARG1 (v2 / visa
                  :mod (p / person
                        :ARG0-of (v3 / visit-01))
                  :mod c)
            :time (a3 / already)))

# ::snt Is it safe to replace a switch with a dimmer on halogen spots?
(s / safe-01
      :ARG0 (r / replace-01
            :ARG1 (s2 / switch)
            :ARG2 (d / dimmer
                  :location (s3 / spot
                        :mod (h / halogen))))
      :polarity (a / amr-unknown))

# ::snt Do I need to install a sump pump?
(n / need-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (ii2 / install-01
            :ARG0 ii
            :ARG1 (p / pump
                  :purpose (p2 / pump-01
                        :ARG1 (s / sump)))))

# ::snt How can I connect additional wires to a receptacle?
(p / possible-01
      :ARG1 (c / connect-01
            :ARG0 (ii / i)
            :ARG1 (w / wire
                  :mod (a / additional))
            :ARG2 (r / receptacle))
      :manner (a2 / amr-unknown))

# ::snt How can I replace the bulb in this ceiling fan?
(p / possible-01
      :ARG1 (r / replace-01
            :ARG0 (ii / i)
            :ARG1 (b / bulb
                  :part-of (f / fan
                        :mod (c / ceiling)
                        :mod (t / this)))
            :ARG2 (a / amr-unknown)))

# ::snt Flying from California to Texas: do I need ESTA?
(n / need-01
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :name (n2 / name
                  :op1 " ESTA"))
      :polarity (a / amr-unknown)
      :time (f / fly-01
            :source (s / state
                  :name (n3 / name
                        :op1 "California"))
            :destination (s2 / state
                  :name (n4 / name
                        :op1 "Texas"))))

# ::snt Should I replace or patch a plaster ceiling?
(r / recommend-01
      :ARG1 (o / or
            :op1 (r2 / replace-01
                  :ARG0 (ii / i)
                  :ARG1 (c / ceiling
                        :mod (p / plaster)))
            :op2 (p2 / patch-01
                  :ARG0 ii
                  :ARG1 c))
      :polarity (a / amr-unknown))

# ::snt What should I do if a professor says she doesn't understand my questions in office hours?
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :condition (s / say-01
                  :ARG0 (p / professor)
                  :ARG1 (u / understand-01
                        :polarity -
                        :ARG0 p
                        :ARG1 (q / question-01
                              :ARG0 ii)
                        :time (h / hour
                              :mod (o / office))))))

# ::snt How do I stop my dog from barking at people through the fence?
(s / stop-03
      :ARG0 (ii / i)
      :ARG1 (d / dog
            :poss ii)
      :ARG2 (b / bark-01
            :ARG0 d
            :ARG2 (p / person)
            :path (t / through
                  :op1 (f / fence)))
      :manner (a / amr-unknown))

# ::snt Travelling to Romania on a short stay Schengen visa issued by France?
(t / travel-01
      :ARG4 (c / country
            :name (n / name
                  :op1 "Romania"))
      :polarity (a / amr-unknown)
      :manner (v / visa
            :mod (s / stay-01
                  :ARG1-of (s2 / short-07))
            :mod (o / organization
                  :name (n2 / name
                        :op1 "Schengen"))
            :ARG1-of (ii / issue-01
                  :ARG0 (c2 / country
                        :name (n3 / name
                              :op1 "France")))))

# ::snt Is it advisable to apply to more than one PhD program?
(a / advise-01
      :ARG2 (a2 / apply-01
            :ARG1 (p / program
                  :mod (d / doctorate
                        :mod (p2 / philosophy))
                  :quant (m / more-than
                        :op1 1)))
      :polarity (a3 / amr-unknown))

# ::snt What is the professional way to deal with my manager's boss?
(w / way
      :mod (p / professional)
      :manner-of (d / deal-01
            :ARG0 (ii / i)
            :ARG1 (p2 / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (p3 / person
                              :ARG0-of (m / manage-01
                                    :ARG1 ii))
                        :ARG2 (b / boss))))
      :domain (a / amr-unknown))

# ::snt What is the best way to introduce cats to newborns?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (ii / introduce-01
                  :ARG1 (c / cat)
                  :ARG2 (c2 / child
                        :ARG1-of (b / bear-02))))
      :ARG2 (g / good-02)
      :ARG3 (m / most)
      :ARG5 w)

# ::snt What is the best way to clean a grater?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (c / clean-01
                  :ARG1 (g / grater))
            :domain (a / amr-unknown))
      :ARG2 (g2 / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt What is the best way to store chopped vegetables?
(w / way
      :manner-of (s / store-01
            :ARG1 (v / vegetable
                  :ARG1-of (c / chop-01)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the best way to store carrots?
(w / way
      :manner-of (s / store-01
            :ARG1 (c / carrot))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the best way to cite an anonymous writer?
(w / way
      :manner-of (c / cite-01
            :ARG1 (p / person
                  :ARG0-of (w2 / write-01)
                  :mod (a / anonymous)))
      :domain (a2 / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How can I remove small paint specks from a wooden floor?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (s / specks
                  :mod (p2 / paint)
                  :mod (s2 / small))
            :ARG2 (f / floor
                  :mod (w / wood)))
      :manner (a / amr-unknown))

# ::snt Why is interest on MMA lower in the US than in Europe?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (l / low-04
            :ARG1 (ii / interest-01
                  :ARG2 (e / event
                        :name (n / name
                              :op1 "MMA")))
            :location (c2 / country
                  :name (n2 / name
                        :op1 "US"))
            :ARG2-of (h / have-degree-91
                  :ARG1 ii
                  :ARG3 (m / more)
                  :ARG4 (ii2 / interest-01
                        :ARG2 e
                        :location (c3 / continent
                              :name (n3 / name
                                    :op1 "Europe"))))))

# ::snt What could be wrong with my A/C unit?
(p / possible-01
      :ARG1 (w / wrong-02
            :ARG1 (a / amr-unknown)
            :ARG2 (u / unit
                  :ARG0-of (a2 / air-conditioning)
                  :poss (ii / i))))

# ::snt What is the significance of the abstract painting?
(s / significant-02
      :ARG1 (p / paint-02
            :mod (a / abstract))
      :ARG2 (a2 / amr-unknown))

# ::snt Should I tell my boss I have a full time job offer?
(r / recommend-01
      :polarity (a / amr-unknown)
      :ARG1 (t / tell-01
            :ARG0 (ii / i)
            :ARG1 (h / have-03
                  :ARG0 ii
                  :ARG1 (o / offer-01
                        :ARG1 (j / job)
                        :ARG3 ii
                        :mod (f / full-time)))
            :ARG2 (p / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 ii
                        :ARG2 (b / boss)))))

# ::snt How can I repair my floors' finish?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (f / finish-01
                  :ARG1 (f2 / floor
                        :poss ii))
            :manner (a / amr-unknown)))

# ::snt What could be causing water to back up into my bathroom basin?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (b / back-up-04
                  :ARG0 a
                  :ARG1 (w / water)
                  :destination (b2 / basin
                        :mod (b3 / bathroom)
                        :poss (ii / i)))))

# ::snt Where can I find a complete list of Freddie Green chords?
(p / possible-01
      :ARG1 (f / find-01
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG2-of (l / list-01
                        :ARG1 (g / guitar
                              :mod (p2 / person
                                    :name (n / name
                                          :op1 "Freddie"
                                          :op2 "Green")))
                        :ARG1-of (c / complete-02)))
            :location (a / amr-unknown)))

# ::snt How long should it take concrete to fully cure?
(r / recommend-01
      :ARG1 (t / take-10
            :ARG0 (c / cure-01
                  :ARG1-of (f / full-09))
            :ARG1 (c2 / concrete)
            :ARG2 (a / amr-unknown)))

# ::snt How can I remove this screw?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (s / screw
                  :mod (t / this)))
      :manner (a / amr-unknown))

# ::snt Is it appropriate to ask a professor via e-mail for a letter of recommendation?
(a / appropriate-02
      :ARG1 (a2 / ask-02
            :ARG1 (l / letter
                  :mod (r / recommend-01))
            :ARG2 (p / professor)
            :medium (e / email))
      :polarity (a3 / amr-unknown))

# ::snt What trigger do you use to get up early in the morning?
(u / use-01
      :ARG0 (y / you)
      :ARG1 (t / trigger
            :mod (a / amr-unknown))
      :ARG2 (g / get-05
            :ARG1 y
            :ARG2 (u2 / up)
            :time (e / early
                  :op1 (d / date-entity
                        :dayperiod (m / morning)))))

# ::snt What could be causing GFCI breakers and receptacles to trip?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (t / trip-03
                  :ARG0 (a2 / and
                        :op1 (b / breaker
                              :mod (g / government-organization
                                    :name (n / name
                                          :op1 "GFCI")))
                        :op2 (r / receptacle)))))

# ::snt How do I wire 2 switches to control a ceiling light?
(w / wire-01
      :ARG0 (ii / i)
      :ARG1 (s / switch
            :quant 2)
      :ARG2 (c / control-01
            :ARG0 s
            :ARG1 (l / light
                  :location (c2 / ceiling)))
      :manner (a / amr-unknown))

# ::snt How long will uncooked chicken keep in the fridge?
(k / keep-01
      :ARG1 (c / chicken
            :ARG1-of (c2 / cook-01
                  :polarity -))
      :location (f / fridge)
      :duration (a / amr-unknown))

# ::snt How can I get my colleague to stop calling me over to his desk when he wants my help?
(p / possible-01
      :ARG1 (g / get-04
            :ARG0 (ii / i)
            :ARG1 (s / stop-01
                  :ARG0 (c / colleague
                        :poss ii)
                  :ARG1 (c2 / call-02
                        :ARG0 c
                        :ARG1 ii
                        :direction (o / over)
                        :destination (d / desk
                              :poss c))
                  :time (w / want-01
                        :ARG0 c
                        :ARG1 (h / help-01
                              :ARG0 ii))))
      :manner (a / amr-unknown))

# ::snt What is the difference between portamento and glissando?
(d / differ-02
      :ARG1 (p / portamento)
      :ARG2 (m / military
            :name (n / name
                  :op1 "Glissando"))
      :ARG3 (a / amr-unknown))

# ::snt When (if ever) in the interview process is it appropriate to recommend a colleague?
(a / appropriate-02
      :ARG1 (r / recommend-01
            :ARG1 (c / colleague))
      :time (p / process-02
            :ARG1 (ii / interview-01)
            :time (e / ever))
      :time (a2 / amr-unknown))

# ::snt What should I do if I have an idea but can't work on it immediately?
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :condition (c / contrast-01
                  :ARG1 (h / have-03
                        :ARG0 ii
                        :ARG1 (ii2 / idea))
                  :ARG2 (p / possible-01
                        :polarity -
                        :ARG1 (w / work-01
                              :ARG0 ii
                              :ARG1 ii2
                              :time (ii3 / immediate))))))

# ::snt How do I remove paint from pipes?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (p2 / pipe)
      :manner (a / amr-unknown))

# ::snt Is Greek driver's license valid in the US?
(v / valid-02
      :ARG1 (l / license-01
            :ARG1 (p / person
                  :ARG0-of (d / drive-01))
            :mod (c / country
                  :name (n / name
                        :op1 "Greece")))
      :polarity (a / amr-unknown)
      :location (c2 / country
            :name (n2 / name
                  :op1 "US")))

# ::snt What is the best way to filter the Turkish coffee?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (f / filter-02
                  :ARG1 (c / coffee
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Turkey"))))
            :domain (a / amr-unknown))
      :ARG2 (g / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt How do I know if food left at room temperature is still safe to eat?
(k / know-01
      :ARG0 (ii / i)
      :ARG1 (t / truth-value
            :polarity-of (s / safe-01
                  :ARG1 (e / eat-01
                        :ARG1 (f / food
                              :ARG1-of (l / leave-17
                                    :location (t2 / temperature
                                          :mod (r / room)))))
                  :mod (s2 / still)))
      :manner (a / amr-unknown))

# ::snt How do I remove a thick layer of paint from tiles?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (l / layer
            :consist-of (p / paint)
            :ARG1-of (t / thick-03))
      :ARG2 (t2 / tile)
      :manner (a / amr-unknown))

# ::snt How can I remove paint from a deck?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (p2 / paint)
            :ARG2 (d / deck))
      :manner (a / amr-unknown))

# ::snt How do I remove paint from pipes?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (p2 / pipe)
      :manner (a / amr-unknown))

# ::snt How can I thoroughly blackout a bedroom window on a budget?
(p / possible-01
      :ARG1 (b / blackout-00
            :ARG0 (ii / i)
            :ARG1 (w / window
                  :mod (b2 / bedroom))
            :manner (t / thorough)
            :prep-on (b3 / budget))
      :manner (a / amr-unknown))

# ::snt What is this language?
(l / language
      :mod (t / this)
      :domain (a / amr-unknown))

# ::snt What is good workout attire for weight lifting?
(a / attire
      :purpose (w / work-01)
      :ARG1-of (g / good-02)
      :purpose (l / lift-01
            :ARG1 (w2 / weight))
      :domain (a2 / amr-unknown))

# ::snt What is the best way to clean a grater?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (c / clean-01
                  :ARG1 (g / grater))
            :domain (a / amr-unknown))
      :ARG2 (g2 / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt What can I realistically do to raise my credit score?
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :ARG2 (r / raise-01
                  :ARG0 ii
                  :ARG1 (s / score
                        :mod (c / credit-01
                              :ARG1 ii)))
            :manner (r2 / realistic-03)))

# ::snt How can I remove paint from slotted screw heads?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (p2 / paint)
            :ARG2 (h / head
                  :part-of (s / screw)
                  :ARG1-of (s2 / slat-01)))
      :manner (a / amr-unknown))

# ::snt What are these holes in my concrete wall and how can I mount things to them?
(a / and
      :op1 (h / hole
            :mod (t / this)
            :location (w / wall
                  :consist-of (c / concrete)
                  :poss (ii / i))
            :domain (a2 / amr-unknown))
      :op2 (p / possible-01
            :ARG1 (m / mount-01
                  :ARG0 ii
                  :ARG1 (t2 / thing)
                  :ARG2 h
                  :manner (a3 / amr-unknown))))

# ::snt What could be causing water to back up into my bathroom basin?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (b / back-up-04
                  :ARG0 a
                  :ARG1 (w / water)
                  :destination (b2 / basin
                        :mod (b3 / bathroom)
                        :poss (ii / i)))))

# ::snt What are the differences between a "traditional" IRA and a Roth IRA?
(d / differ-02
      :ARG1 (p / product
            :name (n / name
                  :op1 "Traditional"
                  :op2 "IRA"))
      :ARG2 (p2 / product
            :name (n2 / name
                  :op1 "Roth"
                  :op2 "IRA"))
      :ARG3 (a / amr-unknown))

# ::snt How to deal with the toddler when me and my partner are not on the same page?
(d / deal-01
      :ARG0 (ii / i)
      :ARG2 (t / toddler)
      :manner (a / amr-unknown)
      :condition (b / be-located-at-91
            :polarity -
            :ARG1 ii
            :ARG2 (p / page
                  :ARG1-of (s / same-01))))

# ::snt How do I wire a replacement ceiling fan?
(w / wire-01
      :ARG0 (ii / i)
      :ARG1 (f / fan
            :mod (c / ceiling)
            :ARG1-of (r / replace-01))
      :manner (a / amr-unknown))

# ::snt How can I fix low water pressure in one shower?
(p / possible-01
      :ARG1 (f / fix-02
            :ARG0 (ii / i)
            :ARG1 (p2 / pressure
                  :mod (w / water
                        :ARG1-of (l / low-04)))
            :ARG2 (s / shower-01
                  :quant 1)
            :manner (a / amr-unknown)))

# ::snt How long can I store cooked rice in the refrigerator?
(p / possible-01
      :ARG1 (s / store-01
            :ARG0 (ii / i)
            :ARG1 (r / rice
                  :ARG1-of (c / cook-01))
            :ARG2 (r2 / refrigerator))
      :duration (a / amr-unknown))

# ::snt What can I do about a Rough opening that is REALLY out of square?
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (a / amr-unknown)
            :ARG2 (o / open-01
                  :mod (r / rough)
                  :ARG1-of (o2 / out-06
                        :ARG2 (s / square)
                        :degree (r2 / really)))))

# ::snt What's the best way to store asparagus?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (a2 / asparagus))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How to truss a chicken?
(t / truss-01
      :ARG1 (c / chicken)
      :manner (a / amr-unknown))

# ::snt What is the best way to clean a grater?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (c / clean-01
                  :ARG1 (g / grater))
            :domain (a / amr-unknown))
      :ARG2 (g2 / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt What are these bugs and how do I get rid of them?
(a / and
      :op1 (b / bug
            :mod (t / this)
            :domain (a2 / amr-unknown))
      :op2 (r / rid-01
            :ARG0 (ii / i)
            :ARG1 b
            :manner a2))

# ::snt What's the best way to store asparagus?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (a2 / asparagus))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How do I remove adhesive from outdoor concrete deck that is textured?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (a / adhesive)
      :ARG2 (d / deck
            :ARG1-of (c / concrete-02)
            :location (o / outdoor)
            :ARG1-of (t / texture-00))
      :manner (a2 / amr-unknown))

# ::snt What is the difference between a riff and a lick?
(d / differ-02
      :ARG1 (r / riff)
      :ARG2 (l / lick)
      :ARG3 (a / amr-unknown))

# ::snt How do you teach a toddler not to share?
(t / teach-01
      :ARG0 (y / you)
      :ARG1 (s / share-01
            :polarity -
            :ARG0 (t2 / toddler))
      :ARG2 t2
      :manner (a / amr-unknown))

# ::snt What is a good length for the statement of purpose in a U.S. PhD application?
(l / length
      :ARG1-of (g / good-02)
      :purpose (s / state-01
            :ARG1 (p / purpose)
            :subevent-of (a / apply-01
                  :ARG1 (d / doctorate
                        :mod (p2 / philosophy))
                  :mod (c / country
                        :name (n / name
                              :op1 "U.S."))))
      :domain (a2 / amr-unknown))

# ::snt what is the difference between Erebor and Moria?
(d / differ-02
      :ARG1 (c / country-region
            :name (n / name
                  :op1 "Erebor"))
      :ARG2 (c2 / country-region
            :name (n2 / name
                  :op1 "Moria"))
      :ARG3 (a / amr-unknown))

# ::snt If I have Schengen visa, can I enter Schengen area from different country?
(p / possible-01
      :ARG1 (e / enter-01
            :ARG0 (ii / i)
            :ARG1 (a / area
                  :mod (t / treaty
                        :name (n / name
                              :op1 "Schengen")))
            :source (c / country
                  :ARG1-of (d / differ-02)))
      :polarity (a2 / amr-unknown)
      :condition (h / have-03
            :ARG0 ii
            :ARG1 (v / visa
                  :mod t)))

# ::snt What could be causing my bathroom drains to back up?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (b / back-up-04
                  :ARG0 (d / drain-01
                        :ARG1 (b2 / bathroom
                              :poss (ii / i))))))

# ::snt How should I apply for a Schengen visa from the UK?
(r / recommend-01
      :ARG1 (a / apply-01
            :ARG0 (ii / i)
            :ARG1 (v / visa
                  :mod (o / organization
                        :name (n / name
                              :op1 "Schengen"))
                  :source (c / country
                        :name (n2 / name
                              :op1 "UK")))
            :manner (a2 / amr-unknown)))

# ::snt What is the best way to clean a grater?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (c / clean-01
                  :ARG1 (g / grater))
            :domain (a / amr-unknown))
      :ARG2 (g2 / good-02
            :ARG1 w)
      :ARG3 (m / most))

# ::snt How to make chapattis round and of same thickness?
(m / make-01
      :ARG1 (c / chapattis
            :ARG1-of (r / round-06)
            :ARG1-of (t / thick-03
                  :ARG1-of (s / same-01)))
      :manner (a / amr-unknown))

# ::snt How should you deal with a teacher who is difficult to understand?
(r / recommend-01
      :ARG1 (d / deal-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (t / teach-01)
                  :ARG1-of (u / understand-01
                        :ARG1-of (h / hard-02)))
            :ARG2 (a / amr-unknown)))

# ::snt How can I replace a ceiling fan with a regular light fixture?
(p / possible-01
      :ARG1 (r / replace-01
            :ARG0 (ii / i)
            :ARG1 (f / fan
                  :mod (c / ceiling))
            :ARG2 (f2 / fixture
                  :ARG0-of (l / light-04)
                  :ARG1-of (r2 / regular-03)))
      :manner (a / amr-unknown))

# ::snt What should my credit limit be?
(r / recommend-01
      :ARG1 (l / limit-01
            :ARG1 (c / credit
                  :poss (ii / i))
            :ARG2 (a / amr-unknown)))

# ::snt What's the best way to keep my garage from freezing?
(w / way
      :domain (a / amr-unknown)
      :manner-of (k / keep-04
            :ARG1 (g / garage
                  :poss (ii / i))
            :ARG2 (f / freeze-01
                  :polarity -
                  :ARG1 g))
      :ARG1-of (h / have-degree-91
            :ARG2 (g2 / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What is the difference between a copula and a transitive verb?
(d / differ-02
      :ARG1 (c / copula)
      :ARG2 (v / verb
            :mod (t / transitive))
      :ARG3 (a / amr-unknown))

# ::snt What's the best/easiest way to install and wire a wall light?
(w / way
      :domain (a / amr-unknown)
      :manner-of (a2 / and
            :op1 (ii / install-01
                  :ARG1 (l / light
                        :mod (w2 / wall)))
            :op2 (w3 / wire-01
                  :ARG1 l))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02)
            :ARG3 (m / most))
      :ARG1-of (h2 / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m2 / most)))

# ::snt How can I repair my floors' finish?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (f / finish-01
                  :ARG1 (f2 / floor
                        :poss ii))
            :manner (a / amr-unknown)))

# ::snt Why is my furnace blowing hot air outside?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (b / blow-01
            :ARG0 (t / thing
                  :ARG0-of (f / furnace-01)
                  :poss (ii / i))
            :ARG1 (a2 / air
                  :ARG1-of (h / hot-05))
            :location (o / outside)))

# ::snt Where can I find a good online thesaurus?
(p / possible-01
      :ARG1 (f / find-01
            :ARG0 (ii / i)
            :ARG1 (n / newspaper
                  :name (n2 / name
                        :op1 "Thesaurus")
                  :ARG1-of (g / good-02)
                  :location (o / online))
            :location (a / amr-unknown)))

# ::snt Why does it take my dryer 3 hours to dry a load of clothes?
(t / take-10
      :ARG0 (d / dry-01
            :ARG0 (ii / i)
            :ARG1 (l / load
                  :consist-of (c / clothes)))
      :ARG1 (t2 / temporal-quantity
            :quant 3
            :unit (h / hour))
      :ARG2 (d2 / dry-01
            :ARG0 ii
            :ARG1 (t3 / thing
                  :ARG0-of (d3 / dry-01)))
      :ARG1-of (c2 / cause-01
            :ARG0 (a / amr-unknown)))

# ::snt How do I stop my dog from barking when I bring him outside?
(s / stop-03
      :ARG0 (ii / i)
      :ARG1 (d / dog
            :poss ii)
      :ARG2 (b / bark-01
            :ARG0 d)
      :manner (a / amr-unknown)
      :time (b2 / bring-01
            :ARG0 ii
            :ARG1 d
            :ARG2 (o / outside)))

# ::snt What is this stucco-like finish called?
(c / call-01
      :ARG1 (f / finish
            :ARG1-of (r / resemble-01
                  :ARG2 (s / stucco))
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt How can I repair a leaking shower?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (s / shower
                  :ARG1-of (l / leak-01))
            :manner (a / amr-unknown)))

# ::snt What are some good strength training routines for runners?
(r / routine
      :purpose (t / train-01
            :ARG2 (p / person
                  :ARG0-of (r2 / run-02))
            :manner (s / strong-02))
      :domain (a / amr-unknown)
      :ARG1-of (g / good-02)
      :quant (s2 / some))

# ::snt What kind of bug is this?
(b / bug
      :mod (k / kind
            :mod (a / amr-unknown))
      :domain (t / this))

# ::snt How do I measure a standard sliding glass door?
(m / measure-01
      :ARG0 (ii / i)
      :ARG1 (d / door
            :mod (g / glass
                  :ARG0-of (s / slide-01))
            :ARG1-of (s2 / standard-02))
      :manner (a / amr-unknown))

# ::snt What is the best way to start learning a new course?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / start-01
            :ARG1 (l / learn-01
                  :ARG1 (c / course
                        :ARG1-of (n / new-01))))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How do I remove this shower fixture?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (f / fixture
            :purpose (s / shower-01)
            :mod (t / this))
      :manner (a / amr-unknown))

# ::snt What is the difference between portamento and glissando?
(d / differ-02
      :ARG1 (p / portamento)
      :ARG2 (m / military
            :name (n / name
                  :op1 "Glissando"))
      :ARG3 (a / amr-unknown))

# ::snt How do I bring up that I got a better job offer to my new current employer?
(b / bring-up-02
      :ARG0 (ii / i)
      :ARG1 (g / get-01
            :ARG0 ii
            :ARG1 (o / offer-01
                  :ARG1 (j / job)
                  :ARG3 (p / person
                        :ARG0-of (e / employ-01
                              :ARG1 ii)
                        :ARG1-of (n / new-01)
                        :time (c / current))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g2 / good-02
                              :ARG1 o)
                        :ARG3 (m / more))))
      :manner (a / amr-unknown))

# ::snt Do I need to replace this water pressure valve?
(n / need-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (r / replace-01
            :ARG0 ii
            :ARG1 (v / valve
                  :purpose (p / pressure-01
                        :ARG1 (w / water))
                  :mod (t / this))))

# ::snt How can I assess the quality of a paper outside my field?
(p / possible-01
      :ARG1 (a / assess-01
            :ARG0 (ii / i)
            :ARG1 (q / quality
                  :poss (p2 / paper
                        :location (o / outside
                              :op1 (f / field
                                    :poss ii))))
            :manner (a2 / amr-unknown)))

# ::snt Which way does air flow into a furnace?
(f / flow-01
      :ARG1 (a / air)
      :ARG2 (f2 / furnace)
      :manner (a2 / amr-unknown))

# ::snt what is the difference between Erebor and Moria?
(d / differ-02
      :ARG1 (c / country-region
            :name (n / name
                  :op1 "Erebor"))
      :ARG2 (c2 / country-region
            :name (n2 / name
                  :op1 "Moria"))
      :ARG3 (a / amr-unknown))

# ::snt What is this sound from my washing machine?
(s / sound-01
      :ARG1 (t / this)
      :source (m / machine
            :instrument-of (w / wash-01)
            :poss (ii / i))
      :mod (a / amr-unknown))

# ::snt Is my cat's aggressive behavior playful or mean, and how do I stop it?
(a / and
      :op1 (o / or
            :op1 (p / playful
                  :domain (b / behave-01
                        :ARG0 (c / cat
                              :poss (ii / i))
                        :mod (a2 / aggressive)))
            :op2 (m / mean-04
                  :ARG0 b)
            :polarity (a3 / amr-unknown))
      :op2 (s / stop-01
            :ARG0 ii
            :ARG1 b
            :manner (a4 / amr-unknown)))

# ::snt How can I add a new light fixture off of a ceiling fan wired to two switches?
(p / possible-01
      :ARG1 (a / add-02
            :ARG0 (ii / i)
            :ARG1 (f / fixture
                  :ARG0-of (l / light-04)
                  :ARG1-of (n / new-01))
            :ARG2 (o / off
                  :op1 (f2 / fan
                        :part-of (c / ceiling)
                        :ARG1-of (w / wire-01
                              :ARG2 (s / switch
                                    :quant 2)))))
      :manner (a2 / amr-unknown))

# ::snt What is the best way to fix this garage floor?
(f / fix-02
      :ARG1 (f2 / floor
            :mod (g / garage)
            :mod (t / this))
      :ARG2 (a / amr-unknown)
      :manner (w / way
            :ARG1-of (h / have-degree-91
                  :ARG2 (g2 / good-02
                        :ARG1 w)
                  :ARG3 (m / most))))

# ::snt How do I remove paint from a porous table top?
(r / remove-01
      :ARG0 (ii / i)
      :ARG1 (p / paint)
      :ARG2 (t / top
            :part-of (t2 / table)
            :mod (p2 / pore))
      :manner (a / amr-unknown))

# ::snt How can I repair a towel rack that was ripped out of the wall?
(p / possible-01
      :ARG1 (r / repair-01
            :ARG0 (ii / i)
            :ARG1 (r2 / rack
                  :consist-of (t / towel)
                  :ARG1-of (r3 / rip-out-03
                        :ARG2 (w / wall)))
            :manner (a / amr-unknown)))

# ::snt What is the difference between chicken cubes and ground chicken?
(d / differ-02
      :ARG1 (c / cube
            :consist-of (c2 / chicken))
      :ARG2 (c3 / chicken
            :mod (g / ground))
      :ARG3 (a / amr-unknown))

# ::snt How to remove a tick on a dog?
(r / remove-01
      :ARG1 (t / tick)
      :ARG2 (d / dog)
      :manner (a / amr-unknown))

# ::snt How can I remove a stuck screw that will still turn?
(p / possible-01
      :ARG1 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (s / screw
                  :ARG1-of (s2 / stick-01)
                  :ARG0-of (t / turn-01
                        :mod (s3 / still)))
            :manner (a / amr-unknown)))

# ::snt Which reward/benefits card is the best value for money in Australia?
(v / value-01
      :ARG1 (a / amr-unknown
            :mod (s / slash
                  :op1 (r / reward-01)
                  :op2 (b / benefit-01)))
      :ARG2 (m / money)
      :ARG1-of (g / good-02
            :ARG2-of (h / have-degree-91
                  :ARG1 v
                  :ARG3 (m2 / most)))
      :location (c / country
            :name (n / name
                  :op1 "Australia")))

# ::snt Paper Title, Is it better to start with a verb?
(m / multi-sentence
      :snt1 (t / title
            :mod (p / paper))
      :snt2 (h / have-degree-91
            :ARG1 (s / start-01
                  :ARG2 (v / verb))
            :ARG2 (g / good-02)
            :ARG3 (m2 / more)
            :polarity (a / amr-unknown)))

# ::snt What is this technique called?
(c / call-01
      :ARG1 (t / technique
            :mod (t2 / this))
      :ARG2 (a / amr-unknown))

# ::snt What are the differences between Peer Reviewed Journals and Refereed Journals?
(d / differ-02
      :ARG1 (j / journal
            :ARG1-of (r / review-01
                  :ARG0 (p / peer)))
      :ARG2 (j2 / journal
            :ARG1-of (r2 / refere-01))
      :ARG3 (a / amr-unknown))

# ::snt How can I improve the water pressure in my shower?
(p / possible-01
      :ARG1 (ii / improve-01
            :ARG0 (ii2 / i)
            :ARG1 (p2 / pressure
                  :mod (w / water)
                  :location (s / shower-01
                        :ARG0 ii2))
            :manner (a / amr-unknown)))

# ::snt How to apply for a Schengen visa?
(t / thing
      :manner-of (a / apply-01
            :ARG1 (v / visa
                  :mod (o / organization
                        :name (n / name
                              :op1 "Schengen"))))
      :polarity (a2 / amr-unknown))

# ::snt What's the best way to store asparagus?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (a2 / asparagus))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What foods can I eat to keep my energy up in an office job in the afternoon?
(p / possible-01
      :ARG1 (e / eat-01
            :ARG0 (ii / i)
            :ARG1 (f / food
                  :mod (a / amr-unknown))
            :purpose (k / keep-02
                  :ARG0 ii
                  :ARG1 (e2 / energy
                        :poss ii
                        :location (j / job
                              :mod (o / office))
                        :direction (u / up))
                  :time (d / date-entity
                        :dayperiod (a2 / afternoon)))))

# ::snt What could be wrong with my air conditioner?
(p / possible-01
      :ARG1 (w / wrong-02
            :ARG1 (a / amr-unknown)
            :ARG2 (t / thing
                  :ARG0-of (a2 / air-conditioner)
                  :poss (ii / i))))

# ::snt What type of asbestos is this?
(t / type
      :mod (s / small-molecule
            :name (n / name
                  :op1 " asbestos"))
      :domain (t2 / this)
      :polarity (a / amr-unknown))

# ::snt What does the "to" mean in the General Welfare Clause?
(m / mean-01
      :ARG1 (s / string-entity
            :value "to")
      :ARG2 (a / amr-unknown)
      :location (l / law
            :name (n / name
                  :op1 "General"
                  :op2 "Welfare"
                  :op3 "Clause")))

# ::snt How do I prepare this exterior concrete wall for paint?
(p / prepare-01
      :ARG0 (ii / i)
      :ARG1 (w / wall
            :consist-of (c / concrete)
            :mod (e / exterior)
            :mod (t / this))
      :ARG2 (p2 / paint)
      :manner (a / amr-unknown))

# ::snt Why do admissions committees consider the Statement of Purpose to be important?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (c2 / consider-01
            :ARG0 (c3 / committee
                  :ARG0-of (a2 / admit-02))
            :ARG1 (ii / important-01
                  :ARG1 (t / thing
                        :ARG1-of (s / state-01
                              :ARG3 (p / purpose-01))))))

# ::snt How do you teach a child religious views?
(t / teach-01
      :ARG0 (y / you)
      :ARG1 (v / view-02
            :ARG0 (c / child)
            :ARG1 (r / religion))
      :ARG2 c
      :manner (a / amr-unknown))

# ::snt What is the meaning of "$N industry"?
(m / mean-01
      :ARG1 (ii / industry
            :mod (n / nucleus))
      :ARG2 (a / amr-unknown))

# ::snt What is the difference between portamento and glissando?
(d / differ-02
      :ARG1 (p / portamento)
      :ARG2 (m / military
            :name (n / name
                  :op1 "Glissando"))
      :ARG3 (a / amr-unknown))

# ::snt What is the significance of the missing elevator car?
(s / significant-02
      :ARG1 (c / car
            :name (n / name
                  :op1 "E elevator")
            :ARG1-of (m / miss-01))
      :ARG2 (a / amr-unknown))

# ::snt What is the optimal length of time for pulling a shot of espresso?
(l / length
      :mod (t / time)
      :ARG1-of (o / optimal-02)
      :purpose (p / pull-01
            :ARG1 (s / shot
                  :mod (c / coffee)))
      :domain (a / amr-unknown))

# ::snt What is the best way to learn to play a piece on the guitar?
(w / way
      :domain (a / amr-unknown)
      :manner-of (l / learn-01
            :ARG1 (p / play-11
                  :ARG1 (p2 / piece)
                  :ARG2 (g / guitar)))
      :ARG1-of (h / have-degree-91
            :ARG2 (g2 / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How can I get rid of fleas in my crawlspace forever?
(p / possible-01
      :ARG1 (r / rid-01
            :ARG0 (ii / i)
            :ARG1 (f / flea)
            :location (c / crawlspace
                  :poss ii)
            :duration (f2 / forever))
      :manner (a / amr-unknown))

# ::snt Can I get a Master's in Economics with a Bachelor's in Mathematics?
(p / possible-01
      :ARG1 (g / get-01
            :ARG0 (ii / i)
            :ARG1 (a / and
                  :op1 (m / Master's
                        :topic (e / economics))
                  :op2 (b / Bachelor's
                        :topic (m2 / mathematics))))
      :polarity (a2 / amr-unknown))

# ::snt Should I write my biography in the first or third person?
(r / recommend-01
      :polarity (a / amr-unknown)
      :ARG1 (w / write-01
            :ARG0 (ii / i)
            :ARG1 (b / biography
                  :poss ii)
            :manner (p / person
                  :ord (o / ordinal-entity
                        :value 1)
                  :ord (o2 / ordinal-entity
                        :value 3))))

# ::snt How do I troubleshoot an electric furnace?
(t / troubleshoot-01
      :ARG0 (ii / i)
      :ARG1 (f / furnace
            :mod (e / electric))
      :manner (a / amr-unknown))

# ::snt How can I tell if a journal is reputable?
(p / possible-01
      :ARG1 (t / tell-02
            :ARG0 (ii / i)
            :ARG1 (t2 / truth-value
                  :polarity-of (r / repute-01
                        :ARG1 (j / journal))))
      :manner (a / amr-unknown))

# ::snt I have a Layover in Japan, Going to stayfor a month, Do I need a Transit Visa?
(a / and
      :op1 (h / have-03
            :ARG0 (ii / i)
            :ARG1 (l / layover
                  :location (c / country
                        :name (n / name
                              :op1 "Japan"))))
      :op2 (g / go-02
            :ARG0 ii
            :ARG4 c
            :duration (t / temporal-quantity
                  :quant 1
                  :unit (m / month)))
      :op3 (n2 / need-01
            :ARG0 ii
            :ARG1 (v / visa
                  :mod (t2 / transit))
            :polarity (a2 / amr-unknown)))

# ::snt How do I help my dog adjust after moving?
(h / help-01
      :ARG0 (ii / i)
      :ARG1 (a / adjust-01
            :ARG0 (d / dog
                  :poss ii)
            :time (a2 / after
                  :op1 (m / move-01
                        :ARG1 d)))
      :ARG2 d
      :manner (a3 / amr-unknown))

# ::snt How long does uncooked meat last when kept in the freezer?
(l / last-01
      :ARG1 (m / meat
            :ARG1-of (c / cook-01
                  :polarity -))
      :ARG2 (a / amr-unknown)
      :time (k / keep-01
            :ARG1 m
            :location (f / freezer)))

# ::snt Is it appropriate to send a gift to a professor for an online course?
(a / appropriate-02
      :polarity (a2 / amr-unknown)
      :ARG1 (s / send-01
            :ARG1 (g / gift)
            :ARG2 (p / professor)
            :purpose (c / course
                  :medium (o / online))))

# ::snt How can I boost the water pressure in my shower?
(p / possible-01
      :ARG1 (b / boost-01
            :ARG0 (ii / i)
            :ARG1 (p2 / pressure
                  :mod (w / water)
                  :location (s / shower-01
                        :ARG0 ii))
            :manner (a / amr-unknown)))

# ::snt What is the significance of the artwork?
(s / significant-02
      :ARG1 (a / artwork)
      :ARG2 (a2 / amr-unknown))

# ::snt How do I make mayonnaise split?
(m / make-01
      :ARG0 (ii / i)
      :ARG1 (s / split-01
            :ARG1 (m2 / mayonnaise))
      :manner (a / amr-unknown))

# ::snt How can I safely re-heat a chicken pie without burning the crust?
(p / possible-01
      :ARG1 (h / heat-01
            :ARG0 (ii / i)
            :ARG1 (p2 / pie
                  :mod (c / chicken))
            :mod (a / again)
            :manner (b / burn-01
                  :polarity -
                  :ARG0 ii
                  :ARG1 p2
                  :mod c))
      :manner (s / safe-01)
      :manner (a2 / amr-unknown))

# ::snt How to tell my company that I am having issues with my boss?
(h / have-manner-91
      :ARG1 (t / tell-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / issue-02
                  :ARG0 (p / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 ii
                              :ARG2 (b / boss)))
                  :ARG1 ii)
            :ARG2 (c / company
                  :poss ii))
      :ARG2 (a / amr-unknown))

# ::snt How to peel peaches?
(p / peel-01
      :ARG1 (p2 / peach)
      :manner (a / amr-unknown))

# ::snt How do I measure a standard sliding glass door?
(m / measure-01
      :ARG0 (ii / i)
      :ARG1 (d / door
            :mod (g / glass
                  :ARG0-of (s / slide-01))
            :ARG1-of (s2 / standard-02))
      :manner (a / amr-unknown))

# ::snt What does "university ranking" mean for a graduate admissions committee?
(m / mean-01
      :ARG1 (r / rank-01
            :ARG3 (u / university))
      :ARG2 (a / amr-unknown)
      :ARG3 (c / committee
            :ARG0-of (a2 / admit-02)
            :mod (g / graduate)))

# ::snt How do I clean a Hammerite paint brush?
(c / clean-01
      :ARG0 (ii / i)
      :ARG1 (b / brush
            :purpose (p / paint-02)
            :mod (p2 / product
                  :name (n / name
                        :op1 "Hammerite")))
      :manner (a / amr-unknown))

# ::snt Is it possible to get a Schengen visa for future date?
(p / possible-01
      :ARG1 (g / get-01
            :ARG1 (v / visa
                  :mod (o / organization
                        :name (n / name
                              :op1 "Schengen")))
            :time (d / date
                  :mod (f / future)))
      :polarity (a / amr-unknown))

# ::snt How to replace recessed halogen light from an eyeball fixture?
(r / replace-01
      :ARG1 (l / light
            :mod (h / halogen)
            :ARG1-of (r2 / recess-01))
      :ARG2 (f / fixture
            :mod (e / eyeball))
      :manner (a / amr-unknown))

# ::snt I was offered the minimum salary I requested, should I ask for more?
(a / and
      :op1 (o / offer-01
            :ARG1 (s / salary
                  :mod (m / minimum)
                  :ARG1-of (r / request-01
                        :ARG0 (ii / i)))
            :ARG2 ii)
      :op2 (r2 / recommend-01
            :ARG1 (a2 / ask-02
                  :ARG0 ii
                  :ARG1 (m2 / more))
            :polarity (a3 / amr-unknown)))

# ::snt How can I determine what is in my water?
(p / possible-01
      :ARG1 (d / determine-01
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :location (w / water
                        :poss ii))
            :ARG2 (a / amr-unknown)))

# ::snt How do I wire a combo with two supplies?
(w / wire-01
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG3-of (c / combine-01
                  :ARG1 (t2 / thing
                        :quant 2
                        :ARG1-of (s / supply-01))))
      :ARG2 (t3 / thing
            :quant 2)
      :manner (a / amr-unknown))

# ::snt Is it appropriate as a referee to contact an author after the editor rejected the manuscript?
(a / appropriate-02
      :ARG1 (c / contact-01
            :ARG0 (p / person
                  :ARG0-of (r / referee-01))
            :ARG1 (p2 / person
                  :ARG0-of (a2 / author-01))
            :time (a3 / after
                  :op1 (r2 / reject-01
                        :ARG0 (e / editor)
                        :ARG1 (m / manuscript))))
      :polarity (a4 / amr-unknown))

# ::snt What kind of board is this, and where can I get some?
(a / and
      :op1 (b / board
            :mod (k / kind
                  :mod (a2 / amr-unknown))
            :domain (t / this))
      :op2 (p / possible-01
            :ARG1 (g / get-01
                  :ARG0 (ii / i)
                  :ARG1 (s / some)
                  :location (a3 / amr-unknown))))

# ::snt How should I cite StackOverflow questions in my term paper?
(r / recommend-01
      :ARG1 (c / cite-01
            :ARG0 (ii / i)
            :ARG1 (q / question
                  :source (p / publication
                        :name (n / name
                              :op1 "StackOverflow")))
            :location (p2 / paper
                  :mod (t / term)
                  :poss ii))
      :manner (a / amr-unknown))

# ::snt What is a good guitar solo to learn in the minor scale?
(s / solo-00
      :ARG1 (g / guitar)
      :ARG1-of (g2 / good-02)
      :ARG1-of (l / learn-01
            :manner (s2 / scale
                  :mod (m / minor)))
      :domain (a / amr-unknown))

# ::snt How do I finish a ridge cap?
(f / finish-01
      :ARG0 (ii / i)
      :ARG1 (c / cap
            :mod (r / ridge))
      :manner (a / amr-unknown))

# ::snt How do you get a child to eat?
(g / get-04
      :ARG0 (y / you)
      :ARG1 (e / eat-01
            :ARG0 (c / child))
      :manner (a / amr-unknown))

# ::snt Why doesn't my cat like being held?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (d / dislike-01
            :ARG0 (c2 / cat
                  :poss (ii / i))
            :ARG1 (h / hold-01
                  :ARG1 c2)))

# ::snt How do I stop my dog from barking at people through the fence?
(s / stop-03
      :ARG0 (ii / i)
      :ARG1 (d / dog
            :poss ii)
      :ARG2 (b / bark-01
            :ARG0 d
            :ARG2 (p / person)
            :path (t / through
                  :op1 (f / fence)))
      :manner (a / amr-unknown))

# ::snt How to make a strong mug of instant Coffee?
(m / make-01
      :ARG1 (m2 / mug
            :ARG1-of (s / strong-02)
            :consist-of (c / coffee
                  :mod (ii / instant)))
      :manner (a / amr-unknown))

# ::snt How do I level a pipe with the ground?
(l / level-01
      :ARG0 (ii / i)
      :ARG1 (p / pipe)
      :ARG2 (g / ground)
      :manner (a / amr-unknown))

# ::snt What are the advantages and disadvantages of various methods of supporting the classical guitar?
(a / and
      :op1 (a2 / advantage-01
            :ARG1 (m / method
                  :mod (v / various)
                  :instrument-of (s / support-01
                        :ARG1 (g / guitar
                              :mod (c / classical))))
            :ARG2 m)
      :op2 (a3 / advantage-01
            :polarity -
            :ARG1 m
            :ARG2 m)
      :domain (a4 / amr-unknown))

# ::snt What type of screws should I use?
(r / recommend-01
      :ARG1 (u / use-01
            :ARG0 (ii / i)
            :ARG1 (s / screw
                  :mod (t / type
                        :mod (a / amr-unknown)))))

# ::snt How do I make this paint match?
(m / make-01
      :ARG0 (ii / i)
      :ARG1 (m2 / match-01
            :ARG1 (p / paint)
            :ARG2 (t / this))
      :manner (a / amr-unknown))

# ::snt What is the best way to introduce cats to newborns?
(h / have-degree-91
      :ARG1 (w / way
            :manner-of (ii / introduce-01
                  :ARG1 (c / cat)
                  :ARG2 (c2 / child
                        :ARG1-of (b / bear-02))))
      :ARG2 (g / good-02)
      :ARG3 (m / most)
      :ARG5 w)

# ::snt What is the best way to store fresh berries?
(w / way
      :manner-of (s / store-01
            :ARG1 (f / fruit
                  :ARG1-of (f2 / fresh-04)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How do I patch a gap between my bathtub and wall?
(p / patch-01
      :ARG0 (ii / i)
      :ARG1 (g / gap
            :mod (b / between
                  :op1 (b2 / bathtub
                        :poss ii)
                  :op2 (w / wall
                        :poss ii)))
      :manner (a / amr-unknown))

# ::snt What is the best way to store ground coffee?
(w / way
      :manner-of (s / store-01
            :ARG1 (c / coffee
                  :mod (g / ground)))
      :domain (a / amr-unknown)
      :ARG1-of (h / have-degree-91
            :ARG2 (g2 / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt What does this notation mean?
(m / mean-01
      :ARG1 (n / notation
            :mod (t / this))
      :ARG2 (a / amr-unknown))

# ::snt How do I get rid of fleas on my rabbit?
(r / rid-01
      :ARG0 (ii / i)
      :ARG1 (f / flea)
      :ARG2 (a / animal
            :name (n / name
                  :op1 "Rabbit")
            :poss ii)
      :manner (a2 / amr-unknown))

# ::snt How can I add a GFCI breaker on two circuits with a shared neutral without rewiring?
(p / possible-01
      :ARG1 (a / add-02
            :ARG0 (ii / i)
            :ARG1 (b / breaker
                  :mod (p2 / product
                        :name (n / name
                              :op1 "GFCI"))
                  :ARG0-of (n2 / neutral-02
                        :ARG1-of (s / share-01)))
            :ARG2 (c / circuit
                  :quant 2)
            :manner (r / renew-01
                  :polarity -
                  :ARG1 b))
      :manner (a2 / amr-unknown))

# ::snt Is it possible to write a song without a key?
(p / possible-01
      :ARG1 (w / write-01
            :ARG1 (s / song)
            :manner (k / key
                  :polarity -))
      :polarity (a / amr-unknown))

# ::snt What is a good solo to learn in the major scale?
(g / good-02
      :ARG1 (l / learn-01
            :ARG1 (a / amr-unknown)
            :manner (s / scale
                  :ARG1-of (m / major-02)))
      :manner (s2 / solo))

# ::snt Why does my ceiling fan turn off when I turn on the lights?
(c / cause-01
      :ARG0 (a / amr-unknown)
      :ARG1 (t / turn-off-07
            :ARG1 (f / fan
                  :mod (c2 / ceiling)
                  :poss (ii / i))
            :time (t2 / turn-on-13
                  :ARG0 ii
                  :ARG1 (l / light))))

# ::snt How long should I wait for plaster to dry/cure between coats?
(r / recommend-01
      :ARG1 (w / wait-01
            :ARG1 (ii / i)
            :ARG2 (s / slash
                  :op1 (d / dry-02
                        :ARG1 (p / plaster))
                  :op2 (c / cure-01
                        :ARG1 p)
                  :location (b / between
                        :op1 (c2 / coat)))
            :duration (a / amr-unknown)))

# ::snt What is the difference between a tortoise and a turtle?
(d / differ-02
      :ARG1 (t / tortoise)
      :ARG2 (t2 / turtle)
      :ARG3 (a / amr-unknown))

# ::snt How to remove milk smell from hardwood floor?
(r / remove-01
      :ARG1 (s / smell-02
            :ARG1 (m / milk))
      :ARG2 (f / floor
            :mod (h / hardwood))
      :manner (a / amr-unknown))

# ::snt Will paying off a credit card early affect my credit score?
(a / affect-01
      :ARG0 (p / pay-off-02
            :ARG0 (ii / i)
            :ARG1 (c / card
                  :mod (c2 / credit-02))
            :time (e / early))
      :ARG1 (s / score
            :mod c2)
      :polarity (a2 / amr-unknown))

# ::snt What is the difference between balls in Test and ODI Cricket?
(d / differ-02
      :ARG1 (b / ball
            :part-of (t / test))
      :ARG2 (b2 / ball
            :part-of (g / game
                  :name (n / name
                        :op1 "ODI"
                        :op2 "Cricket")))
      :ARG3 (a / amr-unknown))

# ::snt What's the best way to store asparagus?
(w / way
      :domain (a / amr-unknown)
      :manner-of (s / store-01
            :ARG1 (a2 / asparagus))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt How long can I keep bread dough in the refrigerator?
(p / possible-01
      :ARG1 (k / keep-01
            :ARG0 (ii / i)
            :ARG1 (d / dough
                  :mod (b / bread))
            :location (r / refrigerator))
      :duration (a / amr-unknown))

# ::snt How should a PhD student approach a collaboration?
(r / recommend-01
      :ARG1 (a / approach-02
            :ARG0 (p / person
                  :ARG0-of (s / study-01
                        :mod (d / doctorate
                              :mod (p2 / philosophy))))
            :ARG1 (c / collaborate-01)
            :manner (a2 / amr-unknown)))

# ::snt How to make more than one good cup of coffee with a moka pot?
(t / thing
      :polarity (a / amr-unknown)
      :manner-of (m / make-01
            :ARG1 (c / coffee
                  :quant (m2 / more-than
                        :op1 (v / volume-quantity
                              :quant 1
                              :unit (c2 / cup)
                              :ARG1-of (g / good-02))))
            :instrument (p / pot
                  :mod (m3 / moka))))

# ::snt How do I install a new interior partition wall?
(ii / install-01
      :ARG0 (ii2 / i)
      :ARG1 (w / wall
            :ARG1-of (n / new-01)
            :part-of (p / partition-01
                  :mod (ii3 / interior)))
      :manner (a / amr-unknown))

# ::snt What could be causing my GFCI outlet to trip?
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (a / amr-unknown)
            :ARG1 (t / trip-03
                  :ARG0 (o / outlet
                        :mod (p2 / product
                              :name (n / name
                                    :op1 "GFCI"))
                        :poss (ii / i)))))

# ::snt How do I make this paint match?
(m / make-01
      :ARG0 (ii / i)
      :ARG1 (m2 / match-01
            :ARG1 (p / paint)
            :ARG2 (t / this))
      :manner (a / amr-unknown))

# ::snt What is wrong with my gas furnace?
(w / wrong-02
      :ARG1 (a / amr-unknown)
      :ARG2 (t / thing
            :instrument-of (b / blast-04
                  :ARG1 (g / gas))
            :poss (ii / i)))

# ::snt "It would be a mistake to the underestimate.
(m / mistake-02
      :ARG1 (u / underestimate-01))

# ::snt The answer is simple, there is a lack of competition.
(s / simple-02
      :ARG1 (a / answer-01
            :ARG2 (l / lack-01
                  :ARG1 (c / compete-01))))

# ::snt And perhaps we continue to call more expensive than in the rest of Europe.
(a / and
      :op2 (p / possible-01
            :ARG1 (c / continue-01
                  :ARG0 (w / we)
                  :ARG1 (c2 / call-01
                        :ARG0 w
                        :ARG2 (e / expensive
                              :ARG2-of (h / have-degree-91
                                    :ARG1 c2
                                    :ARG3 (m / more)
                                    :ARG4 (c3 / continent
                                          :name (n / name
                                                :op1 "Europe")
                                          :mod (r / rest))))))))

# ::snt For nearly 18 years, the space shuttle "Ulysses" has been flying in space.
(f / fly-01
      :ARG1 (s / shuttle
            :name (n / name
                  :op1 "Ulysses")
            :mod (s2 / space))
      :location s2
      :duration (n2 / nearly
            :op1 (t / temporal-quantity
                  :quant 18
                  :unit (y / year))))

# ::snt The foundation Esély Budapestért Alapítvány, at the request of the grouping of Fiatal Baloldal - Ifjú Szocialisták, made a bill on the order of the foundation Együtt a Harmadik Évezredért, for a total of four million HUF.
(m / make-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "Es"
                  :op2 "Hungary"
                  :op3 "ért"
                  :op4 "Alapítvány"))
      :ARG1 (b / bill
            :ARG1-of (o2 / order-03
                  :ARG0 (o3 / organization
                        :name (n2 / name
                              :op1 "Együtt"
                              :op2 "A"
                              :op3 "Harmadik"
                              :op4 "Evezred"
                              :op5 "Ezred"
                              :op6 "Municipal")))
            :ARG1-of (t / total-01
                  :ARG2 (m2 / monetary-quantity
                        :quant 4000000
                        :unit (p / pound)
                        :mod (p2 / product
                              :name (n3 / name
                                    :op1 "HUF")))))
      :ARG1-of (c / cause-01
            :ARG0 (r / request-01
                  :ARG0 (g / group-01
                        :ARG1 (o4 / organization
                              :name (n4 / name
                                    :op1 "Fiatal"
                                    :op2 "Baloldal"
                                    :op3 "Ifjú"
                                    :op4 "Szocialist"
                                    :op5 "A"))))))

# ::snt With the collapse of the investment bank Lehman Brothers two weeks ago, the allocation of appropriations between banks has again been delayed significantly, the banks having accumulated their liquidity.
(d / delay-01
      :ARG1 (a / allocate-01
            :ARG0 (b / bank)
            :ARG1 (t / thing
                  :ARG1-of (a2 / appropriate-01))
            :ARG2 b)
      :ARG1-of (s / significant-02)
      :ARG1-of (c / cause-01
            :ARG0 (a3 / accumulate-01
                  :ARG0 (b2 / bank)
                  :ARG1 (l / liquidity
                        :poss b2)))
      :mod (a4 / again)
      :ARG1-of c
      :ARG0 (c2 / collapse-01
            :ARG1 (b3 / bank
                  :name (n / name
                        :op1 "Lehman"
                        :op2 "Brothers")
                  :mod (ii / invest-01))
            :time (b4 / before
                  :op1 (n2 / now)
                  :quant (t2 / temporal-quantity
                        :quant 2
                        :unit (w / week)))))

# ::snt It is true, I look forward to their release.
(m / multi-sentence
      :snt1 (t / true-01
            :ARG1 (ii / it))
      :snt2 (l / look-forward-03
            :ARG0 (ii2 / i)
            :ARG1 (r / release-01
                  :ARG1 (t2 / they))))

# ::snt The US President George Bush himself is glad of progress in the negotiations.
(g / glad-02
      :ARG0 (p / progress-01
            :ARG1 (n / negotiate-01))
      :ARG1 (p2 / person
            :name (n2 / name
                  :op1 "George"
                  :op2 "Bush")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n3 / name
                              :op1 "US"))
                  :ARG2 (p3 / president))))

# ::snt "Because it fascinates me,"
(c / cause-01
      :ARG0 (f / fascinate-01
            :ARG0 (ii / it)
            :ARG1 (ii2 / i)))

# ::snt The interview, Du blood become course
(b / become-01
      :ARG1 (b2 / blood
            :name (n / name
                  :op1 "Du"
                  :op2 "Blood"))
      :ARG2 (c / course)
      :time (ii / interview-01))

# ::snt We must be constantly vigilant ", continuing the Dre Décary before stress that security of supply, Héma-Quebec must also provide an adequate supply.
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG1 (v / vigilant-01
                  :ARG0 (w / we)
                  :frequency (c / constant)))
      :snt2 (c2 / continue-01
            :ARG1 (l / law
                  :name (n / name
                        :op1 "Dre"
                        :op2 "D'Ecary"))
            :time (b / before
                  :op1 (s / stress-01
                        :ARG1 (o2 / obligate-01
                              :ARG1 (p / provide-01
                                    :ARG0 (c3 / city
                                          :name (n2 / name
                                                :op1 "Héma-Quebec"))
                                    :ARG1 (s2 / supply-01
                                          :mod (a / adequate))
                                    :mod (a2 / also)))))))

# ::snt This is not wrong but if they do you move that would be better if they give you any (including the electronic chip shop).
(c / contrast-01
      :ARG1 (w / wrong-04
            :polarity -
            :ARG1 (t / this))
      :ARG2 (h / have-condition-91
            :ARG1 (h2 / have-degree-91
                  :ARG1 (g / give-01
                        :ARG0 (t2 / they)
                        :ARG1 (a / any
                              :ARG2-of (ii / include-01
                                    :ARG1 (s / shop
                                          :mod (c2 / chip
                                                :mod (e / electronic)))))
                        :ARG2 (g2 / good-02))
                  :ARG2 g2)
            :ARG3 (m / more))
      :ARG2 (m2 / move-01
            :ARG0 (y / you)
            :ARG1 t2))

# ::snt All lies with it, "he says.
(s / say-01
      :ARG0 (h / he)
      :ARG1 (l / lie-08
            :ARG1 (a / all)
            :ARG2 (ii / it)))

# ::snt The installation in all the institutions of the Presidency of the Council is complete with the Palais Chigi.
(c / complete-01
      :ARG1 (ii / installation
            :location (ii2 / institution
                  :mod (a / all)
                  :part-of (p / presidency
                        :part-of (o / organization
                              :name (n / name
                                    :op1 "Council")))))
      :ARG2 (p2 / palace
            :name (n2 / name
                  :op1 "Palais"
                  :op2 "Chigi")))

# ::snt At the same time, in Europe, we had further proof of the global nature of the crisis.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (p / prove-01
            :ARG1 (n / nature
                  :mod (g / globe)
                  :poss (c / crisis))
            :mod (f / further))
      :location (c2 / continent
            :name (n2 / name
                  :op1 "Europe"))
      :time (t / time
            :ARG1-of (s / same-01)))

# ::snt The problem is that the commercial state of all Czech mobile operators prohibits such a resale.
(p / problem
      :domain (p2 / prohibit-01
            :ARG0 (s / state
                  :mod (c / commerce)
                  :poss (c2 / company
                        :ARG0-of (o / operate-01
                              :ARG1 (m / mobile))
                        :mod (a / all)
                        :mod (c3 / country
                              :name (n / name
                                    :op1 "Czech"))))
            :ARG1 (s2 / sell-01
                  :mod (s3 / such))))

# ::snt On the contrary, the mobile operators like to complain that the Czech market is extremely competetive.
(c / contrast-01
      :ARG2 (l / like-01
            :ARG0 (c2 / company
                  :ARG0-of (o / operate-01
                        :ARG1-of (m / mobile-02)))
            :ARG1 (c3 / complain-01
                  :ARG0 c2
                  :ARG1 (c4 / compete-02
                        :ARG0 (m2 / market
                              :mod (c5 / country
                                    :name (n / name
                                          :op1 "Czech")))
                        :degree (e / extreme)))))

# ::snt The magistrates have imposed a ban of six months on Glitter after he had spoken to the authorities who had him under control, of his intention to go to Spain via France.
(ii / impose-01
      :ARG0 (m / magistrates)
      :ARG1 (b / ban-01
            :ARG1 (t / temporal-quantity
                  :quant 6
                  :unit (m2 / month))
            :ARG2 (p / person
                  :name (n / name
                        :op1 "Glitter"))
            :time (a / after
                  :op1 (s / speak-01
                        :ARG0 p
                        :ARG1 (ii2 / intend-01
                              :ARG0 p
                              :ARG1 (g / go-02
                                    :ARG0 p
                                    :ARG4 (c / country
                                          :name (n2 / name
                                                :op1 "Spain"))
                                    :path (c2 / country
                                          :name (n3 / name
                                                :op1 "France"))))
                        :ARG2 (a2 / authority
                              :ARG0-of (c3 / control-01
                                    :ARG1 p))))))

# ::snt But I do not know how to prove it.
(c / contrast-01
      :ARG2 (k / know-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :manner-of (p / prove-01
                        :ARG0 ii
                        :ARG1 (ii2 / it)))))

# ::snt In 2010, it will be necessary to pay the interests of the whole year, which may double.
(n / need-01
      :ARG1 (p / pay-01
            :ARG1 (ii / interest
                  :poss (y / year
                        :mod (w / whole))
                  :ARG1-of (d / double-01
                        :ARG1-of (p2 / possible-01))))
      :time (d2 / date-entity
            :year 2010))

# ::snt The symptoms of hepatitis A appear two to three weeks after the consumption of contaminated food, in general, accompanied by general bad health, weakness, upset stomach and nausea.
(a / appear-01
      :ARG1 (s / symptom
            :poss (d / disease
                  :name (n / name
                        :op1 "Hepatitis"
                        :op2 "A"))
            :ARG1-of (a2 / accompany-01
                  :ARG0 (a3 / and
                        :op1 (h / health
                              :ARG1-of (b / bad-07)
                              :ARG1-of (g / general-02))
                        :op2 (w / weak-02)
                        :op3 (s2 / stomach
                              :ARG1-of (u / upset-01))
                        :op4 (n2 / nausea))))
      :time (a4 / after
            :op1 (c / consume-01
                  :ARG1 (f / food
                        :ARG1-of (c2 / contaminate-01)))
            :quant (b2 / between
                  :op1 (t / temporal-quantity
                        :quant 2
                        :unit (w2 / week))
                  :op2 (t2 / temporal-quantity
                        :quant 3
                        :unit (w3 / week)))
            :ARG1-of (g2 / general-02)))

# ::snt This sentence is the actress Sally field, who has worked with him in 'absence of malice ", and illustrates the despair of American cinema, and America, faced with the idea striking that Newman is no longer in the world.
(a / and
      :op1 (p / person
            :name (n / name
                  :op1 "Sally"
                  :op2 "Field")
            :ARG0-of (a2 / act-01)
            :domain (s / sentence
                  :mod (t / this))
            :ARG0-of (w / work-01
                  :ARG3 (h / he)
                  :manner (a3 / absent-01
                        :ARG1 h
                        :ARG2 (m / malice))))
      :op2 (ii / illustrate-01
            :ARG0 s
            :ARG1 (d / despair-01
                  :ARG0 (a4 / and
                        :op1 (c / cinema
                              :mod (c2 / country
                                    :name (n2 / name
                                          :op1 "America")))
                        :op2 c2)
                  :ARG1-of (c3 / cause-01
                        :ARG0 (f / face-01
                              :ARG0 c2
                              :ARG1 (ii2 / idea
                                    :ARG0-of (s2 / strike-02
                                          :ARG2 s2
                                          :ARG1 (b / be-located-at-91
                                                :ARG1 (p2 / person
                                                      :name (n3 / name
                                                            :op1 "Newt"))
                                                :ARG2 (w2 / world)
                                                :time (n4 / no-longer)))))))))

# ::snt The project of the motorway happened just when the most famous girl of Eatonville had recovered her appeal.
(p / project
      :mod (m / motorway)
      :time (r / recover-02
            :ARG0 (g / girl
                  :location (c / city
                        :name (n / name
                              :op1 "Eatonville"))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f / fame-01
                              :ARG1 g)
                        :ARG3 (m2 / most)))
            :ARG1 (a / appeal-01
                  :ARG0 g))
      :mod (j / just))

# ::snt Has few exceptions, the street has always the same pace.
(a / and
      :op1 (e / except-01
            :quant (f / few))
      :op2 (s / same-01
            :ARG1 (p / pace-01
                  :ARG1 (s2 / street))
            :ARG2 s2
            :time (a2 / always)))

# ::snt This is what we think is the most contributions from the point of view of customers.
(t / think-01
      :ARG0 (w / we)
      :ARG1 (c / contribute-01
            :ARG0 (t2 / this)
            :ARG1-of (h / have-quant-91
                  :ARG3 (m / most))
            :source (h2 / have-point-of-view-08
                  :ARG0 (c2 / customer))))

# ::snt With this film Garci does not expect a price.
(e / expect-01
      :polarity -
      :ARG0 (p / person
            :name (n / name
                  :op1 "Garci"))
      :ARG1 (t / thing
            :ARG2-of (p2 / price-01))
      :topic (f / film
            :mod (t2 / this)))

# ::snt What good then to facilitate the advent of such a competitor?
(g / good-02
      :ARG1 (f / facilitate-01
            :ARG1 (a / advent
                  :mod (c / company
                        :ARG0-of (c2 / compete-01)
                        :mod (s / such))))
      :degree (a2 / amr-unknown)
      :mod (t / then))

# ::snt The impact will be measured in Vancouver Whitecaps in the semi-finals.
(m / measure-01
      :ARG1 (ii / impact-01
            :ARG0 (t / team
                  :name (n / name
                        :op1 "Vancouver"
                        :op2 "Whitecaps"))
            :time (f / final
                  :ord (o / ordinal-entity
                        :value (s / semi)))))

# ::snt This amount would be twice that produced by nuclear power plants.
(h / have-quant-91
      :ARG1 (a / amount
            :mod (t / this))
      :ARG3 (t2 / times
            :quant 2)
      :ARG4 (a2 / amount
            :ARG1-of (p / produce-01
                  :ARG0 (p2 / plant
                        :ARG0-of (p3 / power-01
                              :mod (n / nucleus))))))

# ::snt The phrase "You do not think" is inscribed in capital letters on the registration plate.
(q / quote-01
      :ARG1 (t / think-01
            :polarity -
            :ARG0 (y / you))
      :ARG1-of (ii / inscribed-01
            :ARG2 (l / letter
                  :mod (c / capital)
                  :location (p / plate
                        :instrument-of (r / register-02)))))

# ::snt The opposite, Antonio Damasio for example believe that the sensations from primitive activities are born in the areas of the body feeling of the cortex and core of the brain, like Jaak Pankseep however, which focuses more on the brain syllabus.
(c / contrast-01
      :ARG2 (b / believe-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Antonio"
                        :op2 "Damasio")
                  :ARG0-of (e / exemplify-01))
            :ARG1 (b2 / bear-02
                  :ARG1 (s / sensation
                        :source (a / activity-06
                              :mod (p2 / primitive)))
                  :location (a2 / area
                        :part-of (f / feel-01
                              :ARG0 (b3 / body)
                              :ARG1 (a3 / and
                                    :op1 (c2 / cortex)
                                    :op2 (c3 / core
                                          :part-of (b4 / brain)))))
                  :ARG1-of (r / resemble-01
                        :ARG2 (p3 / person
                              :name (n2 / name
                                    :op1 "Jaak"
                                    :op2 "Pankseep")
                              :ARG0-of (f2 / focus-01
                                    :ARG2 (s2 / syllabus
                                          :mod (b5 / brain))
                                    :ARG2-of (h / have-degree-91
                                          :ARG1 s2
                                          :ARG3 (m / more))))))))

# ::snt That is, on the screen of the apparatus, that will show the information about the validity of their document.
(s / show-01
      :ARG0 (s2 / screen
            :part-of (a / apparatus))
      :ARG1 (ii / information
            :topic (v / valid-02
                  :ARG1 (d / document
                        :poss (t / they)))))

# ::snt The dumping total in English focusing on the use almost constant of English in the investigation.
(f / focus-01
      :ARG1 (d / dump-01
            :ARG1-of (t / total-01)
            :manner (l / language
                  :name (n / name
                        :op1 "English")))
      :ARG2 (u / use-01
            :ARG1 l
            :ARG2 (ii / investigate-01)
            :mod (c / constant
                  :mod (a / almost))))

# ::snt The photo in this article, was taken earlier this month in one of the rooms reserved for employees of Microsoft at Redmond.
(p / photograph-01
      :location (a / article
            :mod (t / this))
      :location (r / room
            :ARG1-of (ii / include-91
                  :ARG2 (r2 / room
                        :ARG1-of (r3 / reserve-01
                              :ARG2 (p2 / person
                                    :ARG1-of (e / employ-01
                                          :ARG0 (c / company
                                                :name (n / name
                                                      :op1 "Microsoft")
                                                :location (c2 / city
                                                      :name (n2 / name
                                                            :op1 "Redmond"))))))))
            :time (b / before)
            :time (m / month
                  :mod (t2 / this))))

# ::snt The price the most prestigious fashion
(p / price-01
      :manner (f / fashion
            :ARG1-of (h / have-degree-91
                  :ARG2 (p2 / prestigious)
                  :ARG3 (m / most))))

# ::snt Today we are starting in March we end, in June we learn the sums.
(a / and
      :op1 (s / start-01
            :ARG0 (w / we)
            :ARG1 (e / end-01
                  :ARG0 w
                  :time (d / date-entity
                        :month 3)))
      :op2 (l / learn-01
            :ARG0 w
            :ARG1 (s2 / sum)
            :time (d2 / date-entity
                  :month 6))
      :time (t / today))

# ::snt Not many.
(m / many
      :polarity -)

# ::snt Not in sight
(s / sight-01
      :polarity -)

# ::snt The eye to aspects of the bee plays an important role, since it is able to see in all directions, in a 300 degrees.
(p / play-02
      :ARG0 (e / eye
            :part-of (b / bee))
      :ARG1 (r / role
            :ARG1-of (ii / important-01))
      :ARG1-of (c / cause-01
            :ARG0 (p2 / possible-01
                  :ARG1 (s / see-01
                        :ARG0 b
                        :direction (d / direction
                              :mod (a / all))
                        :manner (a2 / angle-quantity
                              :quant 300
                              :unit (d2 / degree))))))

# ::snt Will it be a birthday party without genuine.
(p / party-01
      :polarity (a / amr-unknown)
      :mod (b / birthday)
      :mod (g / genuine
            :polarity -))

# ::snt There is no precise figures; we talk about 50 000 who are under way through the Alps and collapse in the newsstand to beer, 10 percent of visitors would express come to Italy this weekend.
(m / multi-sentence
      :snt1 (f / figure
            :polarity -
            :mod (p / precise)
            :location (t / there))
      :snt2 (t2 / talk-01
            :ARG0 (w / we)
            :ARG1 (a / and
                  :op1 (p2 / person
                        :quant 50000
                        :ARG1-of (b / be-located-at-91
                              :ARG2 (t3 / through
                                    :op1 (m2 / mountain
                                          :name (n / name
                                                :op1 "Alps")))))
                  :op2 (c / collapse-01
                        :ARG1 (n2 / newsstand)
                        :prep-to (b2 / beer))))
      :snt3 (c2 / come-01
            :ARG1 (p3 / person
                  :ARG0-of (v / visit-01)
                  :ARG1-of (ii / include-91
                        :ARG2 (p4 / person)
                        :ARG3 (p5 / percentage-entity
                              :value 10)))
            :ARG4 (c3 / country
                  :name (n3 / name
                        :op1 "Italy"))
            :time (w2 / weekend
                  :mod (t4 / this))
            :ARG1-of (e / express-01)))

# ::snt But I do not know how to prove it.
(c / contrast-01
      :ARG2 (k / know-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :manner-of (p / prove-01
                        :ARG0 ii
                        :ARG1 (ii2 / it)))))

# ::snt "We have made great progress.
(p / progress-01
      :ARG1 (w / we)
      :degree (g / great))

# ::snt The electronic vouchers are valid from tomorrow not only in the capital, but also in the surrounding areas of the city.
(v / valid-02
      :ARG1 (v2 / voucher
            :mod (e / electronic))
      :time (f / from
            :op1 (t / tomorrow))
      :location (a / and
            :op1 (c / city
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (c2 / capital)))
            :op2 (a2 / area
                  :ARG1-of (s / surround-01
                        :ARG2 (c3 / city))
                  :mod (a3 / also))))

# ::snt Attention to the fungus orange juice, and bone.
(a / attend-02
      :ARG1 (a2 / and
            :op1 (j / juice
                  :source (o / orange))
            :op2 (b / bone)
            :mod (f / fungus)))

# ::snt Or heels of transgressing or clothes.
(o / or
      :op1 (h / heel
            :topic (t / transgress-01))
      :op2 (c / clothes))

# ::snt If Members of the opposition are in parliament it is because they have been appointed, not elected.
(h / have-condition-91
      :ARG1 (c / cause-01
            :ARG0 (a / and
                  :op1 (a2 / appoint-01
                        :ARG1 (m / member
                              :ARG0-of (o / oppose-01)))
                  :op2 (e / elect-01
                        :polarity -
                        :ARG1 m))
            :ARG1 (h2 / have-org-role-91
                  :ARG0 m
                  :ARG1 (g / government-organization
                        :name (n / name
                              :op1 "Parliament"))))
      :ARG2 h2)

# ::snt For these they obtained invoice books from the market at Józsefváros, while the manufactured stamps at Kiskunhalas.
(c / contrast-01
      :ARG1 (o / obtain-01
            :ARG0 (t / they)
            :ARG1 (b / book
                  :mod (ii / invoice))
            :ARG2 (m / market
                  :location (c2 / city
                        :name (n / name
                              :op1 "Józsefváros")))
            :ARG3 (t2 / this))
      :ARG2 (s / stamp
            :ARG1-of (m2 / manufacture-01)
            :location (c3 / city
                  :name (n2 / name
                        :op1 "Kiskunhalas"))))

# ::snt The total amount to the aid of the system should be divided into two parts.
(r / recommend-01
      :ARG1 (d / divide-02
            :ARG1 (a / amount
                  :ARG2-of (t / total-01)
                  :purpose (a2 / aid-01
                        :ARG1 (s / system)))
            :ARG2 (p / part
                  :quant 2)))

# ::snt Renièrent legislators and supports the call to the project of President George Bush.
(a / and
      :op1 (p / person
            :ARG0-of (l / legislate-01)
            :ARG1-of (r / radical-02))
      :op2 (s / support-01
            :ARG0 p
            :ARG1 (c / call-03
                  :ARG1 (p2 / project
                        :poss (p3 / person
                              :name (n / name
                                    :op1 "George"
                                    :op2 "Bush")
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (p4 / president)))))))

# ::snt The process must be held in a heartbeat.
(o / obligate-01
      :ARG2 (h / hold-01
            :ARG1 (p / process-02)
            :time (h2 / heartbeat)))

# ::snt With a goal and simple methods, the SV Hamburg becomes first of the league.
(b / become-01
      :ARG1 (t / team
            :name (n / name
                  :op1 "SV"
                  :op2 "Hamburg"))
      :ARG2 (r / rank-01
            :ARG1 t
            :ARG2 1
            :ARG5 (l / league))
      :manner (a / and
            :op1 (g / goal)
            :op2 (m / method
                  :ARG1-of (s / simple-02))))

# ::snt The stars of the intoxicating spirit of flamenco as Diego El Cigala, Chano Lobato, Cristina Hoyos, Enrique Morente, El Lebrijano, Antonio Canales, Vicente Amigo, among others, are part of the selection made from around seventy artists photographed.
(ii / include-91
      :ARG1 (s / star
            :poss (s2 / spirit
                  :ARG0-of (ii2 / intoxicate-01)
                  :poss (f / flamenco))
            :example (a / and
                  :op1 (p / person
                        :name (n / name
                              :op1 "Diego"
                              :op2 "El"
                              :op3 "Cigala"))
                  :op2 (p2 / person
                        :name (n2 / name
                              :op1 "Chano"
                              :op2 "Lobato"))
                  :op3 (p3 / person
                        :name (n3 / name
                              :op1 "Cristina"
                              :op2 "Hoyos"))
                  :op4 (p4 / person
                        :name (n4 / name
                              :op1 "Enrique"
                              :op2 "Morente"))
                  :op5 (p5 / person
                        :name (n5 / name
                              :op1 "El"
                              :op2 "Lebrijano"))
                  :op6 (p6 / person
                        :name (n6 / name
                              :op1 "Antonio"
                              :op2 "Canales"))
                  :op7 (p7 / person
                        :name (n7 / name
                              :op1 "Vicente"
                              :op2 "Amigo"))
                  :ARG1-of (p8 / photograph-01)))
      :ARG2 (t / thing
            :ARG1-of (s3 / select-01)
            :source (a2 / artist
                  :quant (a3 / around
                        :op1 70))))

# ::snt Paul Newman was part of that. "
(h / have-part-91
      :ARG1 (t / that)
      :ARG2 (p / person
            :name (n / name
                  :op1 "Paul"
                  :op2 "Newman")))

# ::snt It is difficult to say, if such a concept would be likely to work at home.
(d / difficult
      :domain (s / say-01)
      :condition (l / likely-01
            :ARG1 (w / work-09
                  :ARG1 (c / concept
                        :mod (s2 / such))
                  :location (h / home))))

# ::snt You find yourself in front of people, of characters that sometimes you do not know or give you just a few minutes to photograph them.
(f / find-01
      :ARG0 (y / you)
      :ARG1 (b / be-located-at-91
            :ARG1 y
            :ARG2 (ii / in-front-of
                  :op1 (p / person)
                  :mod (c / character
                        :ARG1-of (k / know-01
                              :polarity -
                              :ARG0 y
                              :time (s / sometimes))
                        :ARG0-of (g / give-01
                              :ARG1 (f2 / few
                                    :op1 (t / temporal-quantity
                                          :quant 1
                                          :unit (m / minute))
                                    :mod (j / just))
                              :ARG2 y
                              :purpose (p2 / photograph-01
                                    :ARG0 y
                                    :ARG1 c))
                        :ARG2 y))))

# ::snt There is nothing left to collect the hostages', when suddenly, "this surprise" occurred.
(l / leave-17
      :ARG1 (n / nothing)
      :purpose (c / collect-01
            :ARG1 (h / hostage))
      :time (s / surprise-01
            :mod (t / this)
            :manner (s2 / sudden)))

# ::snt The subjects spent half an hour in an MRI scanner, during which they received 20 shocks in four part installments, while watching either the religious painting, or the more general one.
(s / spend-02
      :ARG0 (s2 / subject)
      :ARG1 (t / temporal-quantity
            :quant 0.5
            :unit (h / hour)
            :location (t2 / thing
                  :name (n / name
                        :op1 "MRI")
                  :ARG0-of (s3 / scan-01))
            :time-of (r / receive-01
                  :ARG0 s2
                  :ARG1 (s4 / shock
                        :quant 20)
                  :manner (ii / installment
                        :quant 4)))
      :ARG2 (w / watch-01
            :ARG0 s2
            :ARG1 (o / or
                  :op1 (p / paint-02
                        :mod (r2 / religion))
                  :op2 (p2 / paint-02
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (g / general-02
                                    :ARG1 p2)
                              :ARG3 (m / more))))))

# ::snt "I am so happy," he said to reporters.
(s / say-01
      :ARG0 (h / he)
      :ARG1 (h2 / happy-01
            :ARG1 h
            :degree (s2 / so))
      :ARG2 (p / person
            :ARG0-of (r / report-01)))

# ::snt For me, it was clear that I had to be travel a day.
(c / clear-06
      :ARG1 (o / obligate-01
            :ARG2 (t / travel-01
                  :ARG0 (ii / i)
                  :frequency (r / rate-entity-91
                        :ARG3 (t2 / temporal-quantity
                              :quant 1
                              :unit (d / day)))))
      :beneficiary ii)

# ::snt The witness said that at 4.30 p.m., Locklear "pushed hard on accelerator, doing a lot of noise, trying to back out of the garage, and going backwards several times; she was driving with her sunglasses".
(s / say-01
      :ARG0 (p / person
            :ARG0-of (w / witness-01))
      :ARG1 (a / and
            :op1 (p2 / push-01
                  :ARG0 (p3 / person
                        :name (n / name
                              :op1 "Locklear"))
                  :ARG1 (a2 / accelerator)
                  :ARG1-of (h / hard-04))
            :op2 (d / do-02
                  :ARG0 p3
                  :ARG1 (n2 / noise
                        :quant (l / lot)))
            :op3 (t / try-01
                  :ARG0 p3
                  :ARG1 (b / back-02
                        :ARG0 p3
                        :ARG1 p3
                        :ARG2 (g / garage)))
            :op4 (g2 / go-02
                  :ARG0 p3
                  :direction (b2 / backwards)
                  :frequency (s2 / several))
            :op5 (d2 / drive-01
                  :ARG0 p3
                  :instrument (s3 / sunglasses
                        :poss p3))
            :time (d3 / date-entity
                  :time "14:30")))

# ::snt Abuse of a step-father-" which led to suicide "
(l / lead-03
      :ARG0 (a / abuse-01
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (s / stepfather))))
      :ARG2 (s2 / suicide))

# ::snt Shame, Mr Toews, it is, in this instance, and not elsewhere.
(s / say-01
      :ARG1 (s2 / shame-01
            :ARG1 (ii / instead-of-91
                  :ARG1 (ii2 / it
                        :location (e / elsewhere))
                  :ARG2 (e2 / exemplify-01
                        :ARG0 (ii3 / instance
                              :mod (t / this)))))
      :ARG2 (p / person
            :name (n / name
                  :op1 "Mr"
                  :op2 "Toews")))

# ::snt This is one of the many accusations against her.
(ii / include-91
      :ARG1 (t / this)
      :ARG2 (a / accuse-01
            :ARG1 (s / she)
            :quant (m / many)))

# ::snt The interests of 2009 cover seven months to the end of September this year until the end of March.
(c / cover-02
      :ARG0 (ii / interest
            :time (d / date-entity
                  :year 2009))
      :ARG1 (b / between
            :op1 (e / end-01
                  :ARG1 (y / year
                        :mod (t / this))
                  :ARG2 (t2 / temporal-quantity
                        :quant 7
                        :unit (m / month)))
            :op2 (e2 / end-01
                  :ARG1 (d2 / date-entity
                        :month 3))))

# ::snt Portraits of which, thanks to the choice of the camera and equipment, given the photograph classic.
(g / give-01
      :ARG1 (p / photograph-01)
      :ARG2 (p2 / photograph-01
            :mod (c / classic))
      :ARG1-of (c2 / cause-01
            :ARG0 (c3 / choose-01
                  :ARG1 (a / and
                        :op1 (c4 / camera)
                        :op2 (e / equipment)))))

# ::snt This whole process must reflect what the bee done to avoid the other bees.
(o / obligate-01
      :ARG2 (r / reflect-01
            :ARG1 (p / process-02
                  :mod (w / whole)
                  :mod (t / this))
            :ARG2 (t2 / thing
                  :ARG1-of (d / do-02
                        :ARG0 (b / bee)
                        :purpose (a / avoid-01
                              :ARG0 b
                              :ARG1 (b2 / bee
                                    :mod (o2 / other)))))))

# ::snt They are, indeed, free of the costs of construction, operation and maintains the mobile network, relatively high.
(a / and
      :op1 (f / free-01
            :ARG1 (t / they)
            :ARG2 (c / cost-01
                  :ARG1 (a2 / and
                        :op1 (c2 / construct-01)
                        :op2 (o / operate-01)))
            :mod (ii / indeed))
      :op2 (m / maintain-01
            :ARG0 t
            :ARG1 (n / network
                  :ARG1-of (m2 / mobile-02))
            :ARG1-of (h / high-02
                  :ARG2-of (r / relative-05))))

# ::snt When the agreement was announced, a true not revolutionary.
(a / and
      :op1 (t / true-01)
      :op2 (r / revolutionary-04
            :polarity -
            :ARG1 (a2 / agree-01))
      :time (a3 / announce-01
            :ARG1 a2))

# ::snt When we will no longer be the most expensive country
(b / be-temporally-at-91
      :ARG2 (h / have-degree-91
            :ARG1 (c / country
                  :domain (w / we))
            :ARG2 (e / expensive)
            :ARG3 (m / most)
            :time (n / no-longer)))

# ::snt "I wanted to the back because I think it is these women who have an enormous influence in their time and now no one knows and highlights his work," says Bayón.
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Bayon"))
      :ARG1 (w / want-01
            :ARG0 p
            :ARG1 (b / back)
            :ARG1-of (c / cause-01
                  :ARG0 (t / think-01
                        :ARG0 p
                        :ARG1 (a / and
                              :op1 (ii / influence-01
                                    :ARG0 (w2 / woman
                                          :mod (t2 / this))
                                    :ARG1 (t3 / time
                                          :poss w2)
                                    :mod (e / enormous))
                              :op2 (a2 / and
                                    :op1 (k / know-01
                                          :ARG0 (n2 / no-one))
                                    :op2 (h / highlight-01
                                          :ARG0 n2
                                          :ARG1 (w3 / work-01
                                                :ARG0 p))
                                    :time (n3 / now)))))))

# ::snt However, I do not think so.
(c / contrast-01
      :ARG2 (t / think-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (s / so)))

# ::snt Generosity, love of life are vibrants features of the actor disappeared.
(d / disappear-01
      :ARG1 (f / feature
            :poss (p / person
                  :ARG0-of (a / act-01))
            :mod (v / vibrate)
            :mod (l / love-01
                  :ARG1 (l2 / life))))

# ::snt For me, it was clear that I had to be travel a day.
(c / clear-06
      :ARG1 (o / obligate-01
            :ARG2 (t / travel-01
                  :ARG0 (ii / i)
                  :frequency (r / rate-entity-91
                        :ARG3 (t2 / temporal-quantity
                              :quant 1
                              :unit (d / day)))))
      :beneficiary ii)

# ::snt "However, once I have the impression that this is a job at risk, I supprimerai.
(c / contrast-01
      :ARG2 (s / suppose-01
            :ARG0 (ii / i)
            :ARG1 (h / have-condition-91
                  :ARG1 (ii2 / impression-03
                        :ARG0 ii
                        :ARG1 (r / risk-01
                              :ARG2 (j / job
                                    :domain (t / this))))
                  :ARG2 ii2
                  :ARG0 ii
                  :ARG1 j)))

# ::snt The intelligent car theft of bourdon emulating
(e / emulate-01
      :ARG0 (s / steal-01
            :ARG1 (c / car
                  :ARG1-of (ii / intelligent-01))
            :ARG2 (c2 / company
                  :name (n / name
                        :op1 "Bourdon"))))

# ::snt The development of Orlando has already prompted Interstate 4 up to the west of the city.
(p / prompt-01
      :ARG0 (d / develop-02
            :ARG1 (c / city
                  :name (n / name
                        :op1 "Orlando")
                  :part (w / west)))
      :ARG1 (ii / Interstate
            :mod 4
            :direction (u / up-to
                  :op1 w))
      :time (a / already))

# ::snt Microsoft is right, its operational system is losing importance but also its software.
(r / right-06
      :ARG1 (c / company
            :name (n / name
                  :op1 "Microsoft"))
      :ARG2 (l / lose-02
            :ARG0 (s / system
                  :ARG0-of (o / operate-01)
                  :poss c)
            :ARG1 (ii / important-01
                  :ARG1 s
                  :ARG2-of (ii2 / include-91
                        :ARG1 (s2 / software
                              :poss c
                              :mod (a / also))))))

# ::snt Nicolas Sarkozy is expected to the ground by fishermen.
(e / expect-01
      :ARG0 (p / person
            :ARG0-of (f / fish-01))
      :ARG1 (b / bury-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 "Nicolas"
                        :op2 "Sarkozy"))
            :ARG1 p2
            :ARG2 (g / ground)))

# ::snt The office workers continue to queue to buy their morning sandwich from mobile stalls, and it is impossible to find a taxi between 16h and 19h during the week.
(a / and
      :op1 (c / continue-01
            :ARG0 (p / person
                  :ARG0-of (w / work-01
                        :ARG2 (o / office)))
            :ARG1 (q / queue-01
                  :ARG0 p
                  :purpose (b / buy-01
                        :ARG0 p
                        :ARG1 (s / sandwich
                              :poss p
                              :time (d / date-entity
                                    :dayperiod (m / morning)))
                        :ARG2 (s2 / stall
                              :ARG1-of (m2 / mobile-02)))))
      :op2 (p2 / possible-01
            :polarity -
            :ARG1 (f / find-01
                  :ARG0 p
                  :ARG1 (t / taxi)
                  :time (b2 / between
                        :op1 (d2 / date-entity
                              :time "16:00")
                        :op2 (d3 / date-entity
                              :time "19:00"))
                  :time (w2 / week))))

# ::snt We can, of course, record music directly onto the memory card, but few card readers know how to deal with them, given the tiny dimensions of memory cards used in mobile.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (r / record-01
                  :ARG0 (w / we)
                  :ARG1 (m / music)
                  :manner (d / direct-02)
                  :destination (c2 / card
                        :mod (m2 / memory)))
            :mod (o / of-course))
      :ARG2 (k / know-01
            :ARG0 (p2 / person
                  :ARG0-of (r2 / read-01
                        :ARG1 (c3 / card
                              :mod (m3 / memory)))
                  :quant (f / few))
            :ARG1 (d2 / deal-01
                  :ARG0 p2
                  :ARG2 m)
            :ARG1-of (c4 / cause-01
                  :ARG0 (d3 / dimension
                        :mod (t / tiny)
                        :poss c3
                        :ARG1-of (u / use-01
                              :ARG2 (m4 / mobile-02))))))

# ::snt Conseillera, how you choose
(s / say-01
      :ARG1 (c / choose-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Conseillera"))
            :manner (a / amr-unknown))
      :ARG2 p)

# ::snt The septuagénaire McCain has repeatedly put forward its indisputable experience in foreign policy, while emphasising the "naive" of his opponent on these issues that were at the heart of this first contest.
(a / and
      :op1 (p / put-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 "McCain")
                  :mod (s / septuagnaire))
            :ARG1 (e / experience-01
                  :ARG0 p2
                  :ARG1 (p3 / policy-01
                        :ARG2 (f / foreign))
                  :ARG1-of (d / dispute-01
                        :polarity -
                        :ARG1-of (p4 / possible-01)))
            :ARG2 (f2 / forward)
            :ARG1-of (r / repeat-01))
      :op2 (e2 / emphasize-01
            :ARG0 p2
            :ARG1 (n2 / nive
                  :poss (p5 / person
                        :ARG0-of (o / oppose-01
                              :ARG1 p2))
                  :topic (ii / issue-02
                        :mod (t / this)
                        :location (h / heart
                              :part-of (c / contest-01
                                    :ord (o2 / ordinal-entity
                                          :value 1)
                                    :mod t))))))

# ::snt You will achieve nothing, because in sleeping, it is not aware to hold his thinking.
(a / achieve-01
      :ARG0 (y / you)
      :ARG1 (n / nothing)
      :ARG1-of (c / cause-01
            :ARG0 (r / realize-01
                  :polarity -
                  :ARG0 (ii / it)
                  :ARG1 (h / hold-01
                        :ARG0 ii
                        :ARG1 (t / think-01
                              :ARG0 (h2 / he)))
                  :time (s / sleep-01
                        :ARG0 ii))))

# ::snt The song is performed by Katerˇina Kneˇzˇínková and Adam Plachetka.
(p / perform-01
      :ARG0 (a / and
            :op1 (p2 / person
                  :name (n / name
                        :op1 "Katerˇina"
                        :op2 "Kneˇzˇínková"))
            :op2 (p3 / person
                  :name (n2 / name
                        :op1 "Adam"
                        :op2 "Plachetka")))
      :ARG1 (s / song))

# ::snt They desperately need this, and I show you an example.
(a / and
      :op1 (n / need-01
            :ARG0 (t / they)
            :ARG1 (t2 / this)
            :ARG1-of (d / desperate-02))
      :op2 (s / show-01
            :ARG0 (ii / i)
            :ARG1 (e / example)
            :ARG2 (y / you)))

# ::snt For many, the main advantage of mobile music is their prices.
(a / advantage-01
      :ARG1 (p / price-01
            :ARG1 (m / music
                  :ARG1-of (m2 / mobile-02)))
      :ARG2 (p2 / person
            :quant (m3 / many))
      :mod (m4 / main))

# ::snt Sudanese soldiers had killed six of the kidnappers this Sunday in the border area between Sudan, Chad and Egypt, and had arrested two of them.
(a / and
      :op1 (k / kill-01
            :ARG0 (s / soldier
                  :mod (c / country
                        :name (n / name
                              :op1 "Sudan")))
            :ARG1 (p / person
                  :quant 6
                  :ARG1-of (ii / include-91
                        :ARG2 (p2 / person
                              :ARG0-of (k2 / kidnap-01))))
            :time (d / date-entity
                  :weekday (s2 / sunday)
                  :mod (t / this))
            :location (a2 / area
                  :location-of (b / border-01
                        :ARG1 c
                        :ARG2 a
                        :op1 (c2 / country
                              :name (n2 / name
                                    :op1 "Chad"))
                        :op2 (c3 / country
                              :name (n3 / name
                                    :op1 "Egypt")))))
      :op2 (a3 / arrest-01
            :ARG0 s
            :ARG1 (p3 / person
                  :quant 2
                  :ARG1-of (ii2 / include-91
                        :ARG2 p2))))

# ::snt Shortly after, the witness, who initially had not recognised the actress has given that Locklear has been arrested in the middle of the motorway and is out of his vehicle.
(g / give-01
      :ARG0 (p / person
            :ARG0-of (w / witness-01)
            :ARG0-of (r / recognize-02
                  :polarity -
                  :ARG1 (p2 / person
                        :ARG0-of (a / act-01))
                  :time (ii / initial)))
      :ARG1 (a2 / and
            :op1 (a3 / arrest-01
                  :ARG1 (p3 / person
                        :name (n / name
                              :op1 "Locklear"))
                  :location (m / middle
                        :part-of (m2 / motorway)))
            :op2 (o / out-06
                  :ARG1 p3
                  :ARG2 (v / vehicle
                        :poss p3)))
      :time (a4 / after
            :ARG1-of (s / short-07)))

# ::snt "However, once I have the impression that this is a job at risk, I supprimerai.
(c / contrast-01
      :ARG2 (s / suppose-01
            :ARG0 (ii / i)
            :ARG1 (h / have-condition-91
                  :ARG1 (ii2 / impression-03
                        :ARG0 ii
                        :ARG1 (r / risk-01
                              :ARG2 (j / job
                                    :domain (t / this))))
                  :ARG2 ii2
                  :ARG0 ii
                  :ARG1 j)))

# ::snt We do not have to go look too far to find examples.
(o / obligate-01
      :polarity -
      :ARG1 (w / we)
      :ARG2 (g / go-05
            :ARG0 w
            :ARG1 (l / look-01
                  :ARG0 w
                  :ARG1 (e / example)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f / far)
                        :ARG3 (t / too)
                        :ARG6 (f2 / find-01
                              :ARG0 w
                              :ARG1 e)))))

# ::snt But the buteur Illhousiens will not be able to enjoy his happiness long and will be forced to return to the changing rooms a dozen minutes later and leaving its coéquipiers in digital inferiority.
(c / contrast-01
      :ARG2 (a / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (e / enjoy-01
                        :ARG0 (b / buteur
                              :mod (ii / Illhousiens))
                        :ARG1 (h / happy-01
                              :ARG1 (h2 / he))
                        :ARG1-of (l / long-03)))
            :op2 (f / force-01
                  :ARG1 b
                  :ARG2 (a2 / and
                        :op1 (r / return-01
                              :ARG1 b
                              :ARG4 (r2 / room
                                    :ARG0-of (c2 / change-01))
                              :time (a3 / after
                                    :quant (t / temporal-quantity
                                          :quant 6
                                          :unit (m / minute))))
                        :op2 (l2 / leave-11
                              :ARG0 b
                              :ARG1 (ii2 / inferiority
                                    :mod (d / digital)
                                    :poss (c3 / co-eur
                                          :mod (c4 / country
                                                :name (n / name
                                                      :op1 "France")))))))))

# ::snt It is better for example, they will still need forces.
(e / exemplify-01
      :ARG0 (h / have-degree-91
            :ARG1 (ii / it)
            :ARG2 (g / good-02)
            :ARG3 (m / more)
            :ARG1-of (c / cause-01
                  :ARG0 (n / need-01
                        :ARG0 (t / they)
                        :ARG1 (f / force)
                        :mod (s / still)))))

# ::snt You are what you divulgues subject to tone
(t / thing
      :ARG1-of (d / divulge-01
            :ARG0 (y / you))
      :domain y
      :ARG1-of (s / subject-02
            :ARG2 (t2 / tone)))

# ::snt The right-wing camp is intact, only party that voters have become more aware, more critical and more stubborn.
(ii / intact
      :domain (c / camp
            :ARG1-of (r / right-08))
      :ARG1-of (m / mean-01
            :ARG2 (p / party
                  :mod (o / only)
                  :domain (b / become-01
                        :ARG1 (p2 / person
                              :ARG0-of (v / vote-01))
                        :ARG2 (a / and
                              :op1 (r2 / realize-01
                                    :ARG0 p2
                                    :ARG2-of (h / have-degree-91
                                          :ARG1 p2
                                          :ARG3 (m2 / more)))
                              :op2 (c2 / critical-02
                                    :ARG1 p2)
                              :op3 (s / stubborn
                                    :ARG2-of (h2 / have-degree-91
                                          :ARG1 p2
                                          :ARG3 (m3 / more))))))))

# ::snt Microsoft is seeking a receptionist (virtual)
(s / seek-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Microsoft"))
      :ARG1 (p / person
            :ARG0-of (r / receive-01)
            :mod (v / virtual)))

# ::snt The other RECHERCHE- The University of California, Berkeley, and it also, in the search for a new removed.
(a / and
      :op1 (u / university
            :name (n / name
                  :op1 "University"
                  :op2 "of"
                  :op3 "California")
            :location (c / city
                  :name (n2 / name
                        :op1 "Berkeley"))
            :mod (o / other))
      :op2 (s / search-01
            :ARG0 u
            :ARG2 (r / remove-01
                  :ARG1-of (n3 / new-01))
            :mod (a2 / also)))

# ::snt The authorities Thaï the bloquèrent the passport control, and in the end, it out Hong Kong.
(a / and
      :op1 (f / fight-01
            :ARG0 (a2 / authority)
            :ARG1 (c / control-01
                  :ARG1 (p / passport))
            :mod (b / bloquial))
      :op2 (o / out-06
            :ARG1 c
            :ARG2 (c2 / city
                  :name (n / name
                        :op1 "Hong"
                        :op2 "Kong"))
            :time (e / end-01)))

# ::snt The experts say that it is a technology still in its infancy, from the fact that marine energy does not dispel fears about its environmental impact.
(s / say-01
      :ARG0 (p / person
            :ARG1-of (e / expert-01))
      :ARG1 (t / technology
            :domain (ii / it)
            :ARG1-of (ii2 / infancy
                  :mod (s2 / still))
            :ARG1-of (c / cause-01
                  :ARG0 (d / dispel-01
                        :polarity -
                        :ARG0 (e2 / energy
                              :mod (m / marine))
                        :ARG1 (f / fear-01
                              :ARG1 (ii3 / impact-01
                                    :ARG0 e2
                                    :ARG1 (e3 / environment)))))))

# ::snt The public expects, without really is in hiding, when Google will reveal its true nature.
(e / expect-01
      :ARG0 (p / public)
      :ARG1 (r / reveal-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 "Google"))
            :ARG1 (n2 / nature
                  :poss c
                  :ARG1-of (t / true-01)))
      :manner (h / hide-01
            :polarity -
            :ARG1 c
            :ARG1-of (r2 / real-04)))

# ::snt Bad weather spoils the fair at Pozoblanco
(s / spoil-01
      :ARG0 (w / weather
            :ARG1-of (b / bad-07))
      :ARG1 (f / fair
            :location (c / city
                  :name (n / name
                        :op1 "Pozoblanco"))))

# ::snt Not before, otherwise it blocks, and not all the yellow caps on the same benches, we must distribute them in the Chamber! '
(o / obligate-01
      :ARG1 (w / we)
      :ARG2 (d / distribute-01
            :ARG0 w
            :ARG1 (c / cap
                  :ARG1-of (y / yellow-02)
                  :mod (a / all
                        :polarity -)
                  :location (b / bench
                        :ARG1-of (s / same-01)))
            :ARG2 (g / government-organization
                  :name (n / name
                        :op1 "Chamber")))
      :condition (a2 / and
            :op1 (b2 / block-01
                  :polarity -
                  :ARG0 (ii / it))
            :op2 (b3 / be-located-at-91
                  :polarity -
                  :ARG1 c
                  :ARG2 b)))

# ::snt The cause of this exclusion is that the stock exchange of Warsaw is owned by the state.
(c / cause-01
      :ARG0 (o / own-01
            :ARG0 (s / state)
            :ARG1 (e / exchange-01
                  :ARG1 (s2 / stock)
                  :location (c2 / city
                        :name (n / name
                              :op1 "Warsaw"))))
      :ARG1 (e2 / exclude-01
            :mod (t / this)))

# ::snt Superglue to walk on the walls.
(s / superglue
      :ARG1-of (w / walk-01
            :ARG2 (w2 / wall)))

# ::snt To support the sector, it should be between 16 and 18 million per year.
(r / recommend-01
      :ARG1 (r2 / rate-entity-91
            :ARG1 (b / between
                  :op1 16000000
                  :op2 18000000)
            :ARG2 (t / temporal-quantity
                  :quant 1
                  :unit (y / year)))
      :purpose (s / support-01
            :ARG1 (s2 / sector)))

# ::snt For me, it was clear that I had to be travel a day.
(c / clear-06
      :ARG1 (o / obligate-01
            :ARG2 (t / travel-01
                  :ARG0 (ii / i)
                  :frequency (r / rate-entity-91
                        :ARG3 (t2 / temporal-quantity
                              :quant 1
                              :unit (d / day)))))
      :beneficiary ii)

# ::snt In short - victorious goal for Kovalev
(g / goal
      :ARG0-of (w / win-01
            :ARG2 (p / person
                  :name (n / name
                        :op1 "Kovalev")))
      :ARG1-of (s / short-07))

# ::snt Now that the election in Parliament of the Land of Bavaria is over, a union of BayernLB with the bank from Baden-Wuttenberg could be seen very soon.
(p / possible-01
      :ARG1 (s / see-01
            :ARG1 (u / union-02
                  :ARG1 (c / company
                        :name (n / name
                              :op1 "BayernLB"))
                  :ARG2 (b / bank
                        :name (n2 / name
                              :op1 "Baden-Wuttenberg")))
            :time (s2 / soon
                  :degree (v / very)))
      :time (n3 / now
            :time-of (o / over-01
                  :ARG1 (e / elect-01
                        :ARG1 (g / government-organization
                              :name (n4 / name
                                    :op1 "Parliament")
                              :mod (s3 / state
                                    :name (n5 / name
                                          :op1 "Bavaria")))))))

# ::snt It is better for this way, as they will still need their strength.
(c / cause-01
      :ARG0 (n / need-01
            :ARG0 (t / they)
            :ARG1 (s / strong-02
                  :ARG1 t)
            :mod (s2 / still))
      :ARG1 (h / have-degree-91
            :ARG1 (ii / it)
            :ARG2 (g / good-04
                  :ARG1 ii
                  :ARG2 (w / way
                        :mod (t2 / this)))
            :ARG3 (m / more)))

# ::snt With a camera and a system of recognizing forms and faces, this "receptionist" can know how many people are in the place, who they are - what posts they occupy - and listen and hear the keywords of their conversations.
(p / possible-01
      :ARG1 (a / and
            :op1 (k / know-01
                  :ARG0 (p2 / person
                        :ARG0-of (s / specialize-01)
                        :mod (t / this))
                  :ARG1 (a2 / and
                        :op1 (n / number
                              :quant-of (p3 / person
                                    :location (p4 / place)))
                        :op2 (t2 / thing
                              :domain p3)
                        :op3 (t3 / thing
                              :ARG1-of (o / occupy-01
                                    :ARG0 p3)
                              :ARG1-of (p5 / post-01
                                    :ARG0 p3))))
            :op2 (l / listen-01
                  :ARG0 p2
                  :ARG1 (k2 / keyword
                        :part-of (c / converse-01
                              :ARG0 p2)))
            :op3 (h / hear-01
                  :ARG0 p2
                  :ARG1 k2))
      :instrument (a3 / and
            :op1 (c2 / camera)
            :op2 (s2 / system
                  :ARG0-of (r / recognize-01
                        :ARG1 (a4 / and
                              :op1 (f / form)
                              :op2 (f2 / face))))))

# ::snt The second weekend of the beer festival is also known as the weekend of Italy.
(k / know-02
      :ARG1 (w / weekend
            :ord (o / ordinal-entity
                  :value 2)
            :part-of (f / festival
                  :name (n / name
                        :op1 "Beer"
                        :op2 "Festival")))
      :ARG2 (w2 / weekend
            :part-of (c / country
                  :name (n2 / name
                        :op1 "Italy")))
      :mod (a / also))

# ::snt This episode has shown that the precautionary principle that has been applied, made sense. "
(s / show-01
      :ARG0 (e / episode
            :mod (t / this))
      :ARG1 (s2 / sense-02
            :ARG1 (p / principle
                  :ARG1-of (p2 / precaution-02)
                  :ARG1-of (a / apply-02))))

# ::snt The direction of the Polish football league PZPN has been suspended by the National Olympic Committee after many scandals and replaced by Robert Zawlocki, administrator independent.
(a / and
      :op1 (s / suspend-01
            :ARG0 (o / organization
                  :name (n / name
                        :op1 "National"
                        :op2 "Olympic"
                        :op3 "Committee"))
            :ARG1 (d / direction
                  :poss (l / league
                        :name (n2 / name
                              :op1 "PZPN")
                        :mod (f / football)
                        :mod (c / country
                              :name (n3 / name
                                    :op1 "Poland"))))
            :time (a2 / after
                  :op1 (s2 / scandal
                        :quant (m / many))))
      :op2 (r / replace-01
            :ARG1 d
            :ARG2 (p / person
                  :name (n4 / name
                        :op1 "Robert"
                        :op2 "Zawlocki")
                  :ARG0-of (a3 / administrate-01)
                  :mod (ii / independent))))

# ::snt Vodafone heads rather its attention on obtaining its own 3G licences.
(h / head-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Vodafone"))
      :ARG1 (o / obtain-01
            :ARG0 c
            :ARG1 (l / license
                  :mod (p / product
                        :name n
                        :op1 "3G"))
            :poss c)
      :ARG1-of (ii / instead-of-91
            :ARG2 (a / attend-02
                  :ARG0 c
                  :ARG1 o)))

# ::snt The problem is that trade of all mobile operators Czech prohibit such a resale.
(p / problem
      :domain (p2 / prohibit-01
            :ARG0 (t / trade-01
                  :ARG0 (c / company
                        :ARG0-of (o / operate-01
                              :ARG1-of (m / mobile-02))
                        :mod (a / all)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech")))
                  :ARG1 (r / resale-01
                        :mod (s / such)))))

# ::snt The problem is that trade of all mobile operators Czech prohibit such a resale.
(p / problem
      :domain (p2 / prohibit-01
            :ARG0 (t / trade-01
                  :ARG0 (c / company
                        :ARG0-of (o / operate-01
                              :ARG1-of (m / mobile-02))
                        :mod (a / all)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech")))
                  :ARG1 (r / resale-01
                        :mod (s / such)))))

# ::snt According Masi, "the choice of rotating doors is important even from a symbolic point of view."
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Masi"))
      :ARG1 (ii / important-01
            :ARG1 (c / choose-01
                  :ARG1 (d / door
                        :ARG1-of (r / rotate-01)))
            :manner (h / have-point-of-view-08
                  :ARG2-of (s2 / symbolize-01)
                  :mod (e / even))))

# ::snt The psychology of one-upmanship: Why are spending more money?
(p / psychology
      :mod (u / upmanship
            :quant 1)
      :domain (s / spend-01
            :ARG3 (m / money
                  :quant (m2 / more))
            :ARG1-of (c / cause-01
                  :ARG0 (a / amr-unknown))))

# ::snt The celebration of the Second crucial time for the Improvement of Record of the Equipe.
(c / celebrate-02
      :ARG1 (t / time
            :ord (o / ordinal-entity
                  :value 2)
            :mod (c2 / crucial)
            :time-of (ii / improve-01
                  :ARG1 (r / record-01))))

# ::snt They launched a watermelon from their car '.
(l / launch-01
      :ARG0 (t / they)
      :ARG1 (w / watermelon)
      :source (c / car
            :poss t))

# ::snt A formulated answer like this is not suprising, coming from the representative of the operators.
(s / surprise-01
      :polarity -
      :ARG0 (a / answer-01
            :ARG1-of (f / formulate-01
                  :ARG1-of (r / resemble-01
                        :ARG2 (t / this)))
            :ARG1-of (c / come-03
                  :ARG2 (p / person
                        :ARG0-of (r2 / represent-01
                              :ARG0-of (o / operate-01))
                        :ARG1-of r2))))

# ::snt The problem is that trade of all mobile operators Czech prohibit such a resale.
(p / problem
      :domain (p2 / prohibit-01
            :ARG0 (t / trade-01
                  :ARG0 (c / company
                        :ARG0-of (o / operate-01
                              :ARG1-of (m / mobile-02))
                        :mod (a / all)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech")))
                  :ARG1 (r / resale-01
                        :mod (s / such)))))

# ::snt The fourth largest world aircraft manufacturer, Embraer, maintains its forecast for 2008 with 215 aircraft deliveries, re-affirmed Fredrico Fleury Curado, its chairman.
(a / and
      :op1 (m / maintain-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 "Embraer")
                  :ARG0-of (m2 / manufacture-01
                        :ARG1 (a2 / aircraft))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m3 / most
                              :ord (o / ordinal-entity
                                    :value 4))
                        :ARG5 (c2 / company
                              :location (w / world))))
            :ARG1 (f / forecast-01
                  :ARG0 c
                  :ARG1 (d / date-entity
                        :year 2008))
            :manner (d2 / deliver-01
                  :ARG0 c
                  :ARG1 (a3 / aircraft
                        :quant 215)))
      :op2 (r / reaffirm-01
            :ARG0 c
            :ARG1 (p / person
                  :name (n2 / name
                        :op1 "Fredrico"
                        :op2 "Fleury"
                        :op3 "Curado")
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 c
                        :ARG2 (c3 / chairman)))))

# ::snt When energy is born waves, now the big moves.
(m / move-02
      :mod (b / big)
      :time (n / now)
      :time (b2 / bear-02
            :ARG1 (e / energy)))

# ::snt If Members of the opposition are in parliament is that they have been appointed, not elected.
(h / have-condition-91
      :ARG1 (a / and
            :op1 (a2 / appoint-01
                  :ARG1 (m / member
                        :ARG0-of (o / oppose-01)))
            :op2 (e / elect-01
                  :polarity -
                  :ARG1 m))
      :ARG2 (h2 / have-org-role-91
            :ARG0 m
            :ARG1 (g / government-organization
                  :name (n / name
                        :op1 "Parliament"))))

# ::snt The choice of mode of use and requirements of the future owner.
(c / choose-01
      :ARG0 (p / person
            :ARG0-of (o / own-01
                  :time (f / future)))
      :ARG1 (a / and
            :op1 (m / mode
                  :manner-of (u / use-01))
            :op2 (r / require-01
                  :ARG0 p)))

# ::snt People that Naomi is a person central aim.
(s / say-01
      :ARG1 (a / aim-01
            :ARG1 (p / person
                  :name (n / name
                        :op1 "Naomi"))
            :mod (c / central))
      :ARG2 (p2 / person))

# ::snt But what great athlete of substance.
(c / contrast-01
      :ARG2 (a / athlete
            :mod (g / great)
            :mod (s / substance)))

# ::snt But what does that mean for the emotions?
(c / contrast-01
      :ARG2 (m / mean-01
            :ARG1 (t / that)
            :ARG2 (a / amr-unknown)
            :ARG3 (e / emotion)))

# ::snt Colossus to the attack.
(p / person
      :name (n / name
            :op1 "Colossus")
      :location (a / attack-01))

# ::snt None of the Czech operators did of a dominant position on such a market.
(p / position-01
      :polarity -
      :ARG0 (p2 / person
            :ARG0-of (o / operate-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Czech"))
            :quant (n2 / none))
      :ARG2 (m / market
            :mod (s / such))
      :ARG0-of (d / dominate-01))

# ::snt HSV fighting Gladbach 1: 0
(f / fight-01
      :ARG0 (t / team
            :name (n / name
                  :op1 "HSV"))
      :ARG1 (t2 / team
            :name (n2 / name
                  :op1 "Gladbach"))
      :ARG2 (r / ratio-of
            :op1 1
            :op2 0))

# ::snt The new law also provides to limit the so-called golden parachutes for the managers of companies participating in the programme and it establishes a committee, which will ensure the supervision of the funds.
(a / and
      :op1 (p / provide-01
            :ARG0 (l / law
                  :ARG1-of (n / new-01))
            :ARG2 (l2 / limit-01
                  :ARG0 l
                  :ARG1 (p2 / parachute
                        :mod (g / golden)
                        :mod (s / so-called))
                  :beneficiary (p3 / person
                        :ARG0-of (m / manage-01
                              :ARG1 (c / company
                                    :ARG0-of (p4 / participate-01
                                          :ARG1 (p5 / program))))))
            :mod (a2 / also))
      :op2 (e / establish-01
            :ARG0 l
            :ARG1 (c2 / committee
                  :ARG0-of (e2 / ensure-01
                        :ARG1 (s2 / supervise-01
                              :ARG1 (f / fund))))))

# ::snt That's how the driver tests the validity of the registered voucher.
(t / test-01
      :ARG0 (p / person
            :ARG0-of (d / drive-01))
      :ARG1 (v / valid-02
            :ARG1 (v2 / voucher
                  :ARG1-of (r / register-02)))
      :manner (t2 / that))

# ::snt Starting with the interceptions ordered against Dal Torrione, the pm writes, "the possibility of marrying the demans of a businessman, representative a well known group close to the Piromalli, unifying the choice of the public administration with the interests of the clan.
(w / write-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / minister
                        :mod (p2 / prime))))
      :ARG1 (p3 / possible-01
            :ARG1 (m2 / marry-01
                  :ARG1 (p4 / person
                        :ARG0-of (r / represent-01
                              :ARG1 (g / group
                                    :ARG1-of (k / know-02
                                          :degree (w2 / well))
                                    :ARG1-of (c / close-10
                                          :ARG2 (c2 / city
                                                :name (n / name
                                                      :op1 "Piromalli"))))))
                  :ARG2 (c3 / choose-01
                        :ARG1 (g2 / government-organization
                              :ARG0-of (a / administrate-01)
                              :ARG1-of (p5 / public-02)))
                  :ARG0-of (u / unify-01
                        :ARG1 (ii / interest
                              :poss (c4 / clan))
                        :ARG2 c3)))
      :ARG1-of (s / start-01
            :ARG2 (ii2 / interception
                  :ARG1-of (o / order-01
                        :prep-against (p6 / person
                              :name (n2 / name
                                    :op1 "Dal"
                                    :op2 "Torrione"))))))

# ::snt But in this case, we can at least hope that all human brain have the same situation.
(c / contrast-01
      :ARG2 (p / possible-01
            :ARG1 (h / hope-01
                  :ARG0 (w / we)
                  :ARG1 (h2 / have-03
                        :ARG0 (b / brain
                              :part-of (h3 / human)
                              :mod (a / all))
                        :ARG1 (s / situation
                              :ARG1-of (s2 / same-01)))
                  :mod (a2 / at-least)
                  :prep-in (c2 / case-04
                        :ARG1 (t / this)))))

# ::snt The loan of £14 billion will be repaid when mortgages of Bradford & Bingleys are released.
(r / repay-01
      :ARG1 (l / loan-01
            :ARG1 (m / monetary-quantity
                  :quant 14000000000
                  :unit (p / pound)))
      :time (r2 / release-01
            :ARG1 (m2 / mortgage-01
                  :ARG0 (c / company
                        :name (n / name
                              :op1 "Bradford"
                              :op2 "&"
                              :op3 "Bingleys")))))

# ::snt At them, three groups surenchérissaient with a partner, in different circumstances.
(b / be-located-at-91
      :ARG1 (g / group
            :quant 3
            :accompanier (p / partner))
      :ARG2 (c / circumstance
            :ARG1-of (d / differ-02)))

# ::snt Paul Newman was one of them. "
(ii / include-91
      :ARG1 (p / person
            :name (n / name
                  :op1 "Paul"
                  :op2 "Newman"))
      :ARG2 (t / they))

# ::snt Also in terms of price of flights, the trend was on the rise in the first quarter.
(r / rise-01
      :ARG1 (t / trend)
      :time (q / quarter
            :ord (o / ordinal-entity
                  :value 1))
      :topic (t2 / thing
            :ARG2-of (p / price-01
                  :ARG1 (f / fly-01)))
      :mod (a / also))

# ::snt The board of AIG met Sunday in the evening to examine possible, according to stop it said.
(s / say-01
      :ARG0 (s2 / stop-01
            :ARG0 (ii / it))
      :ARG1 (m / meet-03
            :ARG0 (b / board
                  :part-of (c / company
                        :name (n / name
                              :op1 "AIG")))
            :time (d / date-entity
                  :weekday (s3 / sunday)
                  :dayperiod (e / evening))
            :purpose (e2 / examine-01
                  :ARG0 b
                  :ARG1 (p / possible-01))))

# ::snt Obama has said that he is the future.
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (f / future
            :domain p))

# ::snt MP3 players, however, have the advantage of having easy controls.
(c / contrast-01
      :ARG2 (a / advantage-01
            :ARG1 (p / person
                  :ARG0-of (p2 / play-01
                        :ARG1 (p3 / product
                              :name (n / name
                                    :op1 "MP3"))))
            :ARG2 (h / have-03
                  :ARG0 p
                  :ARG1 (c2 / control-01
                        :ARG1-of (e / easy-05)))))

# ::snt That is the timetable set by the Capitol for the work of the Commission for the future of Rome "Capital, which took place this morning, the new headquarters, behind the baths of Caracalla.
(t / timetable
      :ARG1-of (s / set-01
            :ARG0 (g / government-organization
                  :name (n / name
                        :op1 "Capitol")))
      :purpose (w / work-01
            :ARG0 (g2 / government-organization
                  :name (n2 / name
                        :op1 "Commission"))
            :ARG1 (f / future
                  :poss (c / city
                        :name (n3 / name
                              :op1 "Rome")))
            :ARG2 (h / headquarters
                  :ARG1-of (n4 / new-01)
                  :location (b / behind
                        :op1 (b2 / bath
                              :poss (c2 / city-district
                                    :name (n5 / name
                                          :op1 "Caracalla")))))
            :time (d / date-entity
                  :dayperiod (m / morning)
                  :mod (t2 / today)))
      :domain (t3 / that))

# ::snt It was the highest Jets score in one game.
(s / score-01
      :ARG0 (t / team
            :name (n / name
                  :op1 "Jets"))
      :ARG1 (ii / it)
      :ARG1-of (h / have-degree-91
            :ARG2 (h2 / high-02
                  :ARG1 s)
            :ARG3 (m / most))
      :time (g / game
            :quant 1))

# ::snt However, in view of the dynamics and unpredictability of the crisis, there is no certainty.
(c / contrast-01
      :ARG2 (c2 / certainty
            :polarity -
            :ARG1-of (v / view-02
                  :ARG2 (a / and
                        :op1 (d / dynamics
                              :poss (c3 / crisis))
                        :op2 (p / possible-01
                              :polarity -
                              :ARG1 (p2 / predict-01
                                    :ARG1 c3))))))

# ::snt The accuser Advisor, Nora Dannehy now will be whether the officers asked during the investigation, lied to investigators, obstruant and justice.
(d / decide-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Nora"
                  :op2 "Dannehy")
            :ARG0-of (a / advise-01)
            :ARG0-of (a2 / accuse-01))
      :ARG1 (t / truth-value
            :polarity-of (a3 / and
                  :op1 (a4 / ask-02
                        :ARG0 (o / officer)
                        :time (ii / investigate-01))
                  :op2 (l / lie-08
                        :ARG0 o
                        :ARG2 (p2 / person
                              :ARG0-of (ii2 / investigate-01)))
                  :op3 (o2 / obstruant)
                  :op4 (j / justice)))
      :time (n2 / now))

# ::snt The high court of Truro has referred he linked regularly its beautiful daughter, Stéphanie Randle, during his childhood, 5 to 7 years.
(r / refer-02
      :ARG0 (c / court
            :mod (h / high)
            :poss (c2 / company
                  :name (n / name
                        :op1 "Truckro")))
      :ARG1 (p / person
            :name (n2 / name
                  :op1 "Stéphanie"
                  :op2 "Randle")
            :ARG1-of (b / beautiful-02)
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 c2
                  :ARG2 (d / daughter)))
      :ARG1-of (r2 / regular-02)
      :time (c3 / childhood
            :poss (h3 / he))
      :duration (b2 / between
            :op1 (t / temporal-quantity
                  :quant 5
                  :unit (y / year))
            :op2 (t2 / temporal-quantity
                  :quant 7
                  :unit (y2 / year))))

# ::snt The circumstances surrounding a shooting before the release of the hostages are still unclear: the kidnappers were close to putting an end to the kidnapping, before the Sudanese army killed six of the kidnappers without warning, according to an Egyptian security official.
(c / clear-06
      :polarity -
      :ARG1 (c2 / circumstance
            :ARG1-of (s / surround-01
                  :ARG2 (s2 / shoot-02
                        :time (b / before
                              :op1 (r / release-01
                                    :ARG1 (h / hostage)))))
            :ARG1-of (m / mean-01
                  :ARG2 (c3 / close-10
                        :ARG1 (p / person
                              :ARG0-of (k / kidnap-01))
                        :ARG2 (p2 / put-03
                              :ARG0 p
                              :ARG1 (e / end-01
                                    :ARG0 p
                                    :ARG1 (k2 / kidnap-01))
                              :time (b2 / before
                                    :op1 (k3 / kill-01
                                          :ARG0 (a / army
                                                :mod (c4 / country
                                                      :name (n / name
                                                            :op1 "Sudan")))
                                          :ARG1 (p3 / person
                                                :quant 6
                                                :ARG1-of (ii / include-91
                                                      :ARG2 (p4 / person
                                                            :ARG0-of (k4 / kidnap-01))))
                                          :ARG1-of (w / warn-01
                                                :polarity -
                                                :ARG0 a))))))
            :mod (s3 / still)))

# ::snt But I do not know how the show.
(c / contrast-01
      :ARG2 (k / know-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :manner-of (s / show-04))))

# ::snt What matters most consumer awareness and make this information to public domain.
(a / and
      :op1 (m / matter-01
            :ARG1 (t / thing
                  :ARG1-of (k / know-01
                        :ARG0 (p / person
                              :ARG0-of (c / consume-01))
                        :ARG2-of (h / have-degree-91
                              :ARG1 p
                              :ARG3 (m2 / most)))))
      :op2 (m3 / make-01
            :ARG1 (ii / information
                  :mod (t2 / this))
            :ARG2 (d / domain
                  :ARG1-of (p2 / public-02))))

# ::snt The Hypo Real Estate must from now on pay interest on a fraction to what it has the right.
(o / obligate-01
      :ARG1 (r / real-estate
            :mod (h / huge))
      :ARG2 (p / pay-01
            :ARG0 r
            :ARG1 (ii / interest
                  :quant (f / fraction))
            :ARG3 (t / thing
                  :ARG1-of (r2 / right-05
                        :ARG2 r)))
      :time (f2 / from
            :op1 (n / now)))

# ::snt She could not participate in the Beijing games because of a hypothetical pain in the back, but promised to win in Berlin, improving her personal record by nearly five minutes in her third marathon.
(c / contrast-01
      :ARG1 (p / possible-01
            :polarity -
            :ARG1 (p2 / participate-01
                  :ARG0 (s / she
                        :part (b / back))
                  :ARG1 (g / game
                        :location (c2 / city
                              :name (n / name
                                    :op1 "Beijing")))
                  :ARG1-of (c3 / cause-01
                        :ARG0 (p3 / pain-01
                              :ARG1 b
                              :ARG1-of (h / hypothetical-02)
                              :ARG1-of h))))
      :ARG2 (p4 / promise-01
            :ARG0 s
            :ARG1 (w / win-01
                  :ARG0 s
                  :location (c4 / city
                        :name (n2 / name
                              :op1 "Berlin"))
                  :manner (ii / improve-01
                        :ARG0 s
                        :ARG1 (r / record
                              :ARG1-of (p5 / personal-02
                                    :ARG2 s))
                        :ARG2 (n3 / nearly
                              :op1 (t / temporal-quantity
                                    :quant 5
                                    :unit (m / minute)))
                        :ARG4 (m2 / marathon
                              :ord (o / ordinal-entity
                                    :value 3)
                              :poss s)))))

# ::snt Nine fifty five in the morning.
(d / date-entity
      :day 5
      :month 5
      :dayperiod (m / morning))

# ::snt It was the biggest loss of points in the space of a day of history.
(l / lose-02
      :ARG1 (p / point)
      :ARG1-of (h / have-degree-91
            :ARG2 (b / big)
            :ARG3 (m / most))
      :time (s / space
            :op1 (t / temporal-quantity
                  :quant 1
                  :unit (d / day)
                  :duration-of (h2 / history))))

# ::snt "The first day of course in Japan.
(d / day
      :ord (o / ordinal-entity
            :value 1)
      :mod (o2 / of-course)
      :location (c / country
            :name (n / name
                  :op1 "Japan")))

# ::snt Listen to the four new version of the national anthem.
(l / listen-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (v / version
            :quant 4
            :ARG1-of (n / new-01)
            :mod (a / anthem
                  :mod (n2 / nation))))

# ::snt Obama has said that it was the future.
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (f / future
            :domain (ii / it)))

# ::snt The reason for this striptease of thought is the press relations Ryan for his new film "The Women '- is told the story of a adultery.
(c / cause-01
      :ARG0 (t / tell-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Ryan")
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (r / relation-03
                              :ARG1 (p2 / press))))
            :ARG1 (s / story
                  :topic (a / adultery))
            :ARG2 (f / film
                  :name (n2 / name
                        :op1 "The"
                        :op2 "Women")
                  :ARG1-of (n3 / new-01)
                  :poss p))
      :ARG1 (s2 / striptease
            :mod (t2 / this)
            :purpose (t3 / think-01)))

# ::snt Many at Eatonville, like Ms Jones, a courageous teacher who has a weakness for bright red, always fear that their insular community will not be understood.
(f / fear-01
      :ARG0 (p / person
            :quant (m / many)
            :location (c / city
                  :name (n / name
                        :op1 "Eatonville"))
            :ARG1-of (r / resemble-01
                  :ARG2 (p2 / person
                        :name (n2 / name
                              :op1 "Ms"
                              :op2 "Jones")
                        :ARG0-of (t / teach-01)
                        :mod (c2 / courageous)
                        :ARG0-of (h / have-03
                              :ARG1 (w / weak-02
                                    :ARG1 p
                                    :ARG2 (r2 / red
                                          :ARG1-of (b / bright-02)))))))
      :ARG1 (u / understand-01
            :polarity -
            :ARG1 (c3 / community
                  :mod (ii / insular)
                  :poss p))
      :time (a / always))

# ::snt The industrial export sale price rose by 1.1 percent compared to July 2008, while if compared to those of a year ago, it fell by 3.9 percent.
(c / contrast-01
      :ARG1 (r / rise-01
            :ARG1 (m / monetary-quantity
                  :ARG2-of (p / price-01
                        :ARG1 (s / sell-01
                              :ARG1 (e / export-01
                                    :mod (ii / industry)))))
            :ARG2 (p2 / percentage-entity
                  :value 1.1)
            :ARG1-of (c2 / compare-01
                  :ARG2 (m2 / monetary-quantity
                        :ARG2-of (p3 / price-01)
                        :time (d / date-entity
                              :year 2008
                              :month 7))))
      :ARG2 (f / fall-01
            :ARG1 m
            :ARG2 (p4 / percentage-entity
                  :value 3.9)
            :condition (c3 / compare-01
                  :ARG1 m
                  :ARG2 m2
                  :time (b / before
                        :op1 (n / now)
                        :quant (t / temporal-quantity
                              :quant 1
                              :unit (y / year))))))

# ::snt Later, Dow Jones recovered a little.
(r / recover-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Dow"
                  :op2 "Jones"))
      :degree (l / little)
      :time (a / after))

# ::snt The course of the obligations, however, are going particularly well.
(h / have-concession-91
      :ARG1 (g / go-09
            :ARG1 (c / course
                  :topic (o / obligate-01))
            :ARG1-of (w / well-09
                  :mod (p / particular))))

# ::snt US President George Bush himself is glad of progress in the negotiations.
(g / glad-02
      :ARG0 (p / progress-01
            :ARG1 (n / negotiate-01))
      :ARG1 (p2 / person
            :name (n2 / name
                  :op1 "George"
                  :op2 "Bush")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n3 / name
                              :op1 "US"))
                  :ARG2 (p3 / president))))

# ::snt "However, once I have the impression that this is a risky job, I will remove it.
(c / contrast-01
      :ARG2 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / it)
            :time (ii3 / impression-03
                  :ARG0 ii
                  :ARG1 (r2 / risky-02
                        :ARG1 (j / job
                              :domain (t / this))))))

# ::snt These drinks, consumed especially the summer because they are refreshing and rich in vitamins, if taken with some vital medicines, can alter their effectiveness, absorbing or reducing according to cases, with serious consequences to the health.
(p / possible-01
      :ARG1 (o / or
            :op1 (a / alter-01
                  :ARG0 (d / drink
                        :mod (t / this)
                        :ARG1-of (c / consume-01
                              :time (d2 / date-entity
                                    :season (s / summer)
                                    :mod (e / especially))
                              :ARG1-of (c2 / cause-01
                                    :ARG0 (a2 / and
                                          :op1 (r / refresh-01
                                                :ARG0 d)
                                          :op2 (r2 / rich
                                                :domain d
                                                :topic (v / vitamin)))))
                        :ARG1 (e2 / effective-04)
                        :ARG0-of e2)
                  :op2 (a3 / absorb-01
                        :ARG0 d)
                  :op3 (r3 / reduce-01
                        :ARG0 d)
                  :ARG1-of (c3 / conform-01
                        :ARG2 (c4 / case-04))
                  :ARG1-of (c5 / consequence-03
                        :ARG2 (h / health)
                        :ARG1-of (s2 / serious-02)))
            :condition (t2 / take-01
                  :ARG1 d
                  :instrument (m / medicine
                        :mod (v2 / vital)
                        :mod (s3 / some)))))

# ::snt Tuesday, with the start of trade, the stock exchange of Prague continued with its downfall of the day before, when it lost almost six percent.
(c / continue-01
      :ARG0 (e / exchange-01
            :ARG1 (s / stock)
            :location (c2 / city
                  :name (n / name
                        :op1 "Czech"
                        :op2 "City")))
      :ARG1 (f / fall-01
            :ARG1 e
            :ARG4 (l / lose-02
                  :ARG0 e
                  :ARG1 (a / almost
                        :op1 (p / percentage-entity
                              :value 6)))
            :time (b / before
                  :op1 (n2 / now)
                  :quant (t / temporal-quantity
                        :quant 1
                        :unit (d / day))))
      :time (d2 / date-entity
            :weekday (t2 / tuesday))
      :time (s2 / start-01
            :ARG1 (t3 / trade-01)))

# ::snt We have seen his face on vinaigrette pots, sauces, biscuits and other foods, which tasted rather awful, albeit a joke at the outset.
(s / see-01
      :ARG0 (w / we)
      :ARG1 (f / face
            :part-of (h / he))
      :prep-on (a / and
            :op1 (p / pot
                  :mod (v / vinaigrette))
            :op2 (s2 / sauce)
            :op3 (b / biscuit)
            :op4 (f2 / food
                  :mod (o / other))
            :ARG1-of (t / taste-02
                  :ARG2 (a2 / awful
                        :degree (r / rather))
                  :concession (j / joke-01
                        :time (o2 / outset)))))

# ::snt While no result had not yet been announced, many young people were came to demonstrate against the power of President Alexander Lukashenko: "The dictator, resignation".
(c / contrast-01
      :ARG1 (c2 / come-01
            :ARG1 (p / person
                  :mod (y / young)
                  :quant (m / many))
            :purpose (d / demonstrate-01
                  :ARG0 p
                  :ARG1 (a / and
                        :op1 (a2 / against
                              :op1 (p2 / power
                                    :poss (p3 / person
                                          :name (n / name
                                                :op1 "Alexander"
                                                :op2 "Lukashenko")
                                          :ARG0-of (h / have-org-role-91
                                                :ARG2 (p4 / president)))))
                        :op2 (r / resign-01
                              :ARG0 (d2 / dictator)))))
      :ARG2 (a3 / announce-01
            :polarity -
            :ARG1 (t / thing
                  :ARG2-of (r2 / result-01))
            :time (y2 / yet)))

# ::snt The problem is that trade of all mobile operators Czech prohibit such a resale.
(p / problem
      :domain (p2 / prohibit-01
            :ARG0 (t / trade-01
                  :ARG0 (c / company
                        :ARG0-of (o / operate-01
                              :ARG1-of (m / mobile-02))
                        :mod (a / all)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech")))
                  :ARG1 (r / resale-01
                        :mod (s / such)))))

# ::snt "However, once I have the impression that this is a risky job, I will remove it.
(c / contrast-01
      :ARG2 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / it)
            :time (ii3 / impression-03
                  :ARG0 ii
                  :ARG1 (r2 / risky-02
                        :ARG1 (j / job
                              :domain (t / this))))))

# ::snt The celebration of the Second crucial time for the Improvement of Record of the Equipe.
(c / celebrate-02
      :ARG1 (t / time
            :ord (o / ordinal-entity
                  :value 2)
            :mod (c2 / crucial)
            :time-of (ii / improve-01
                  :ARG1 (r / record-01))))

# ::snt This has said there are three years in the elections of the Bundestag of 2005, i.e. at the time of the much-discussed Stoiber.
(s / say-01
      :ARG0 (t / this)
      :ARG1 (e / elect-01
            :ARG1 (g / government-organization
                  :name (n / name
                        :op1 "Bundestag"))
            :time (d / date-entity
                  :year 2005)
            :time-of (t2 / thing
                  :name (n2 / name
                        :op1 "Stoiber")
                  :ARG1-of (d2 / discuss-01
                        :degree (m / much)))
            :duration (t3 / temporal-quantity
                  :quant 3
                  :unit (y / year))))

# ::snt Later, the other two houses fell at odds as well.
(f / fall-07
      :ARG1 (h / house
            :quant 2
            :mod (o / other))
      :ARG2 (o2 / odds)
      :time (a / after)
      :mod (a2 / as-well))

# ::snt But given the attitude of mobile operators, the indifference of the Czech regulators is disconcerting.
(c / contrast-01
      :ARG2 (d / disconcert-01
            :ARG0 (ii / indifferent-01
                  :ARG1 (o / organization
                        :ARG0-of (r / regulate-01)
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Czech"))))
            :ARG1-of (c3 / cause-01
                  :ARG0 (a / attitude
                        :poss (c4 / company
                              :ARG0-of (o2 / operate-01
                                    :ARG1-of (m / mobile-02)))))))

# ::snt Most of the time, I have no idea what I eat exactly here in Japan.
(h / have-03
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (ii2 / idea
            :topic (t / thing
                  :ARG1-of (e / eat-01
                        :ARG0 ii)
                  :location (h2 / here
                        :location (c / country
                              :name (n / name
                                    :op1 "Japan"))
                        :mod (e2 / exact))))
      :frequency (t2 / time
            :quant (m / most)))

# ::snt None of the Czech operators has a dominant position on such a market.
(p / position-01
      :ARG0 (c / company
            :ARG0-of (o / operate-01)
            :mod (c2 / country
                  :name (n / name
                        :op1 "Czech"))
            :quant (n2 / none))
      :ARG2 (m / market
            :mod (s / such))
      :ARG0-of (d / dominate-01))

# ::snt However, in view of the dynamics and unpredictability of the crisis, there is no certainty.
(c / contrast-01
      :ARG2 (c2 / certainty
            :polarity -
            :ARG1-of (v / view-02
                  :ARG2 (a / and
                        :op1 (d / dynamics
                              :poss (c3 / crisis))
                        :op2 (p / possible-01
                              :polarity -
                              :ARG1 (p2 / predict-01
                                    :ARG1 c3))))))

# ::snt Sooner or later it will eventually a fatal accident," he said, a year ago, to Ty´den.cz.
(s / say-01
      :ARG0 (h / he)
      :ARG1 (a / accident
            :mod (f / fatal)
            :time (e / eventual)
            :domain (ii / it))
      :ARG2 (u / url-entity
            :value "Ty´den.cz")
      :time (b / before
            :op1 (n / now)
            :quant (t / temporal-quantity
                  :quant 1
                  :unit (y / year))))

# ::snt This should reserve of the night of sleep before all creditors in the long term on the decision of whether they should secede from their commitments.
(r / recommend-01
      :ARG1 (r2 / reserve-01
            :ARG0 (t / this)
            :ARG1 (s / sleep-01
                  :time (d / date-entity
                        :dayperiod (n / night)))
            :ARG2 (p / person
                  :ARG0-of (o / owe-01
                        :ARG2 (t2 / they))
                  :mod (a / all))
            :time (t3 / term
                  :ARG1-of (l / long-03))
            :ARG3 (d2 / decide-01
                  :ARG0 p
                  :ARG1 (t4 / truth-value
                        :polarity-of (r3 / recommend-01
                              :ARG1 (s2 / secede-01
                                    :ARG0 t2
                                    :ARG1 (c / commit-01
                                          :ARG1 t2)))))))

# ::snt The cap wage is not mentioned in the specific case, the limitations depend on how the secretariat the Treasury suggests its aid to the company.
(c / contrast-01
      :ARG1 (m / mention-01
            :polarity -
            :ARG1 (w / wage
                  :mod (c2 / cap-01))
            :prep-in (c3 / case-04
                  :ARG1-of (s / specific-02)))
      :ARG2 (d / depend-01
            :ARG0 (l / limit-01)
            :ARG1 (t / thing
                  :manner-of (s2 / suggest-01
                        :ARG0 (g / government-organization
                              :name (n / name
                                    :op1 "Treasury"))
                        :ARG1 (a / aid-01
                              :ARG0 g
                              :ARG2 (c4 / company))))))

# ::snt But attention, because the Belgian brand does not only that the tank tops.
(c / contrast-01
      :ARG2 (a / attend-02
            :ARG1-of (c2 / cause-01
                  :ARG0 (b / brand
                        :mod (c3 / country
                              :name (n / name
                                    :op1 "Belgium"))
                        :mod (o / only
                              :polarity -)
                        :domain (t / top
                              :mod (t2 / tank))))))

# ::snt "However, once I have the impression that this is a risky job, I will remove it.
(c / contrast-01
      :ARG2 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / it)
            :time (ii3 / impression-03
                  :ARG0 ii
                  :ARG1 (r2 / risky-02
                        :ARG1 (j / job
                              :domain (t / this))))))

# ::snt But of course this is the future.
(c / contrast-01
      :ARG2 (f / future
            :domain (t / this)
            :mod (o / of-course)))

# ::snt With little ego, the ultimate show of quality.
(s / show-04
      :ARG1 (q / quality)
      :mod (u / ultimate)
      :manner (h / have-03
            :ARG1 (e / ego
                  :quant (l / little))))

# ::snt We have four versions - with a song solo male or female, an interpretation with choir and an instrumental version.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (v / version
            :quant 4
            :accompanier (a / and
                  :op1 (s / song
                        :mod (s2 / solo)
                        :mod (o / or
                              :op1 (m / male)
                              :op2 (f / female)))
                  :op2 (ii / interpret-01
                        :accompanier (c / choir))
                  :op3 v
                  :mod (ii2 / instrumental))))

# ::snt The larger houses éditrices work their way to the Internet, seen by many as the "murderer" the paper newspaper.
(w / work-01
      :ARG0 (h / house
            :mod (e / elite)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (l / large)
                  :ARG3 (m / more)))
      :ARG1 (w2 / way
            :poss h)
      :ARG2 (ii / internet)
      :ARG1-of (s / see-01
            :ARG0 (m2 / many)
            :ARG2 (p / person
                  :ARG0-of (m3 / murder-01)
                  :ARG0-of (h3 / have-org-role-91
                        :ARG1 (n / newspaper
                              :mod (p2 / paper))))))

# ::snt The course of the obligations, however, are particularly well.
(h / have-concession-91
      :ARG1 (w / well-09
            :ARG1 (c / course
                  :mod (o / obligate-01))
            :mod (p / particular)))

# ::snt According to Alemanno, indeed, "we need a sketch of strategic reference, neither firm nor immobile, to allow our city to improve, which is absolutely necessary, while thinking about its future in a spirit of unity,".
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Alemanno"))
      :ARG1 (n2 / need-01
            :ARG0 (w / we)
            :ARG1 (s2 / sketch
                  :mod (r / reference-04
                        :mod (s3 / strategy))
                  :ARG1-of (f / firm-03
                        :polarity -)
                  :ARG1-of (ii / immobile-00
                        :polarity -))
            :purpose (a / allow-01
                  :ARG0 s2
                  :ARG1 (ii2 / improve-01
                        :ARG1 (c / city
                              :poss w))
                  :ARG1-of (n3 / need-01
                        :degree (a2 / absolute)
                        :time (t / think-01
                              :ARG0 w
                              :ARG1 (f2 / future
                                    :poss c)
                              :manner (s4 / spirit
                                    :mod (u / unity))))))
      :mod (ii3 / indeed))

# ::snt In the case of mobile cheap, do they will play music for a few hours.
(p / play-11
      :ARG0 (t / they)
      :ARG1 (m / music)
      :polarity (a / amr-unknown)
      :duration (f / few
            :op1 (t2 / temporal-quantity
                  :quant 1
                  :unit (h / hour)))
      :condition (c / cheap-02
            :ARG1-of (m2 / mobile-02)))

# ::snt The community has begun to hold a festival Hurston to demonstrate the catastrophic consequences that would create the motorway.
(b / begin-01
      :ARG0 (c / community)
      :ARG1 (h / hold-04
            :ARG0 c
            :ARG1 (f / festival
                  :name (n / name
                        :op1 "Hurston"))
            :purpose (d / demonstrate-01
                  :ARG0 c
                  :ARG1 (c2 / consequence-03
                        :ARG1 (c3 / create-01
                              :ARG1 (m / motorway))
                        :mod (c4 / catastrophic)))))

# ::snt None of the Czech operators did of a dominant position on such a market.
(p / position-01
      :polarity -
      :ARG0 (p2 / person
            :ARG0-of (o / operate-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Czech"))
            :quant (n2 / none))
      :ARG2 (m / market
            :mod (s / such))
      :ARG0-of (d / dominate-01))

# ::snt "However, once I have the impression that this is a job at risk, I supprimerai.
(c / contrast-01
      :ARG2 (s / suppose-01
            :ARG0 (ii / i)
            :ARG1 (h / have-condition-91
                  :ARG1 (ii2 / impression-03
                        :ARG0 ii
                        :ARG1 (r / risk-01
                              :ARG2 (j / job
                                    :domain (t / this))))
                  :ARG2 ii2
                  :ARG0 ii
                  :ARG1 j)))

# ::snt Of Saturday evening, representatives of legislators rencontrèrent the US Treasury Secretary Henry Paulson, in order to give the bottom of the government a final form.
(r / rencontrerent-00
      :ARG0 (p / person
            :ARG0-of (l / legislate-01))
      :ARG1 (p2 / person
            :name (n / name
                  :op1 "Henry"
                  :op2 "Paulson")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g / government-organization
                        :name (n2 / name
                              :op1 "Treasury")
                        :mod (c / country
                              :name (n3 / name
                                    :op1 "US")))
                  :ARG2 (s / secretary)))
      :purpose (g2 / give-01
            :ARG0 p
            :ARG1 (f / form
                  :mod (f2 / final))
            :ARG2 (b / bottom
                  :part-of (g3 / government-organization
                        :ARG0-of (g4 / govern-01))))
      :time (d / date-entity
            :weekday (s2 / saturday)
            :dayperiod (e / evening)))

# ::snt The Treasury estimates that the interests of the loan will in 2009, to £450millions.
(e / estimate-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Treasury"))
      :ARG1 (ii / interest
            :poss (l / loan-01)
            :quant (m / monetary-quantity
                  :quant 4500000000
                  :unit (p / pound))
            :time (d / date-entity
                  :year 2009)))

# ::snt To place the blame on the CˇTÚ is a fairly common trick in communications, through which the ÚOHS is washing its hands of the matter.
(t / trick-01
      :ARG2 (p / place-01
            :ARG1 (b / blame-01)
            :ARG2 (c / criminal-organization
                  :name (n / name
                        :op1 "CˇTÚ")))
      :mod (c2 / common
            :ARG1-of (f / fair-04))
      :manner (c3 / communicate-01)
      :instrument-of (w / wash-01
            :ARG0 (o / organization
                  :name n
                  :op1 "English"
                  :op2 "Defense"
                  :op3 "Organization"))
      :ARG1 (h / hand
            :part-of o)
      :ARG2 (m / matter))

# ::snt "However, once I have the impression that this is a risky job, I will remove it.
(c / contrast-01
      :ARG2 (r / remove-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / it)
            :time (ii3 / impression-03
                  :ARG0 ii
                  :ARG1 (r2 / risky-02
                        :ARG1 (j / job
                              :domain (t / this))))))

# ::snt The anthem has again been recorded by the orchestra of the theatre national under the direction of Jirˇí Beˇlohlávek.
(r / record-01
      :ARG0 (o / orchestra
            :mod (t / theater
                  :mod (n / nation))
            :ARG1-of (d / direct-01
                  :ARG0 (p / person
                        :name (n2 / name
                              :op1 "Jirˇí"
                              :op2 "Beˇlohlávek"))))
      :ARG1 (a / anthem)
      :mod (a2 / again))

# ::snt Of course, there is an analysis of relevant markets drawn up by the CˇTÚ according to which the telecommunications are, from the point of view of economic competition, a single market.
(a / analyze-01
      :ARG1 (m / market
            :ARG1-of (r / relevant-01))
      :ARG1-of (d / draw-up-03
            :ARG0 (c / court-decision
                  :name (n / name
                        :op1 "CˇTÚ")))
      :ARG1-of (c2 / conform-01
            :ARG2 (m2 / market
                  :ARG1-of (s / single-02)
                  :domain (t / telecommunication)
                  :ARG1-of (v / view-02
                        :ARG0 (c3 / compete-01
                              :mod (e / economy)))))
      :mod (o / of-course))

# ::snt The answer is simple, there is a lack of competition, which would like to join the fight.
(s / simple-02
      :ARG1 (a / answer-01
            :ARG2 (l / lack-01
                  :ARG1 (c / compete-01
                        :ARG0-of (l2 / like-01
                              :ARG1 (j / join-up-02
                                    :ARG0 c
                                    :ARG1 (f / fight-01)))))))

# ::snt Other operators also refer to the specific nature of the Czech market.
(r / refer-01
      :ARG0 (p / person
            :ARG0-of (o / operate-01)
            :mod (o2 / other))
      :ARG1 (n / nature
            :ARG1-of (s / specific-02)
            :poss (m / market
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Czech"))))
      :mod (a / also))

# ::snt Anyway, despite all these arguments, the winning card for the democrats is George Bush.
(c / card
      :ARG0-of (w / win-01
            :ARG2 (p / political-party
                  :name (n / name
                        :op1 "Democrat")))
      :domain (p2 / person
            :name (n2 / name
                  :op1 "George"
                  :op2 "Bush"))
      :concession (a / argue-01
            :mod (t / this)
            :mod (a2 / all))
      :mod (a3 / anyway))

# ::snt At the same time, in Europe, we had further proof of the global nature of the crisis.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (p / prove-01
            :ARG1 (n / nature
                  :mod (g / globe)
                  :poss (c / crisis))
            :mod (f / further))
      :location (c2 / continent
            :name (n2 / name
                  :op1 "Europe"))
      :time (t / time
            :ARG1-of (s / same-01)))

# ::snt She asked me to go up for a noble cause, but if she had asked to act the pear tree, I would have done it anyway.
(c / contrast-01
      :ARG1 (a / ask-02
            :ARG0 (s / she)
            :ARG1 (g / go-01
                  :ARG1 (ii / i)
                  :ARG4 (u / up)
                  :purpose (c2 / cause
                        :mod (n / noble)))
            :ARG2 ii)
      :ARG2 (d / do-02
            :ARG0 ii
            :ARG1 (ii2 / it)
            :mod (a2 / anyway)
            :condition (a3 / ask-02
                  :ARG0 s
                  :ARG1 (a4 / act-01
                        :ARG0 ii
                        :ARG1 (t / tree
                              :mod (p / pear))))))

# ::snt The fact is that dividends have been cut.
(c / cut-02
      :ARG1 (d / dividend)
      :mod (f / fact))

# ::snt Elena, Luca and others come together, Marco makes a last speech and explains the plan of attack.
(a / and
      :op1 (c / come-01
            :ARG1 (a2 / and
                  :op1 (p / person
                        :name (n / name
                              :op1 "Elena"))
                  :op2 (p2 / person
                        :name (n2 / name
                              :op1 "Luca"))
                  :op3 (o / other))
            :mod (t / together))
      :op2 (s / speak-01
            :ARG0 (p3 / person
                  :name (n3 / name
                        :op1 "Marco"))
            :mod (l / last))
      :op3 (e / explain-01
            :ARG0 p3
            :ARG1 (p4 / plan-01
                  :ARG1 (a3 / attack-01))))

# ::snt We have here a government that is the only one, of all the Western countries involved, not to have brought back its nationals trapped in the concentration camp at Guantánamo.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (g / government-organization
            :ARG0-of (g2 / govern-01)
            :mod (o / only)
            :ARG1-of (ii / include-91
                  :ARG2 (c / country
                        :location (w2 / world-region
                              :name (n / name
                                    :op1 "West"))
                        :mod (a / all)
                        :ARG1-of (ii2 / involve-01)))
            :ARG0-of (b / bring-01
                  :polarity -
                  :ARG1 (p / person
                        :mod (n2 / nation)
                        :poss g
                        :ARG1-of (t / trap-01
                              :location (c2 / concentration-camp
                                    :location (f / facility
                                          :name (n3 / name
                                                :op1 "Guantánamo"))))
                        :mod n2)
                  :direction (b2 / back)))
      :location (h2 / here))

# ::snt After the fall of Tuesday morning, the stock exchange of Prague réctifia its losses.
(l / lose-02
      :ARG0 (e / exchange-01
            :ARG0 (c / city
                  :name (n / name
                        :op1 "Prague"))
            :ARG1 (s / stock))
      :ARG1 (t / thing)
      :time (a / after
            :op1 (f / fall-01
                  :time (d / date-entity
                        :weekday (t2 / tuesday)
                        :dayperiod (m / morning)))))

# ::snt The new Czech anthem four new versions.
(v / version
      :quant 4
      :ARG1-of (n / new-01)
      :mod (a / anthem
            :mod (c / country
                  :name (n2 / name
                        :op1 "Czech")))
      :ARG1-of (n3 / new-01))

# ::snt With the show in strength of fishermen who have severely disrupted the access of several ports on Monday in Brittany and Normandy, the President of the Republic has decided to go on Tuesday morning to the port of Guilvinec, in Finisterre, to meet their representatives.
(d / decide-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Republic"))
                  :ARG2 (p2 / president)))
      :ARG1 (g / go-02
            :ARG0 p
            :ARG4 (p3 / port
                  :name (n2 / name
                        :op1 "Guilvinec")
                  :location (c2 / city
                        :name (n3 / name
                              :op1 "Finisterre")))
            :time (d2 / date-entity
                  :weekday (t / tuesday)
                  :dayperiod (m / morning))
            :purpose (m2 / meet-03
                  :ARG0 p
                  :ARG1 (p4 / person
                        :ARG0-of (r / represent-01
                              :ARG1 p))))
      :ARG1-of (c3 / cause-01
            :ARG0 (s / show-01
                  :ARG1 (s2 / strong-02
                        :ARG1 (p5 / person
                              :ARG0-of (f / fish-01)
                              :ARG0-of (d3 / disrupt-01
                                    :ARG1 (a / access-01
                                          :ARG1 (p6 / port
                                                :quant (s3 / several))
                                          :time (d4 / date-entity
                                                :weekday (m3 / monday))
                                          :location (a2 / and
                                                :op1 (p7 / province
                                                      :name (n4 / name
                                                            :op1 "Brune"))
                                                :op2 (p8 / province
                                                      :name (n5 / name
                                                            :op1 "Normandy"))))
                                    :degree (s4 / severe)))))))

# ::snt In Rome, Alemanno gave the order to make the Commission for the future of the capital leave.
(o / order-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Alemanno"))
      :ARG2 (m / make-02
            :ARG0 p
            :ARG1 (o2 / organization
                  :name (n2 / name
                        :op1 "Commission"
                        :op2 "for"
                        :op3 "the"
                        :op4 "Future"
                        :op5 "of"
                        :op6 "the"
                        :op7 "Capital"
                        :op8 "Leave")))
      :location (c / city
            :name (n3 / name
                  :op1 "Rome")))

# ::snt I am pleased because she has agreed to play a role in my work and I am honoured ".
(p / please-01
      :ARG0 (a / and
            :op1 (a2 / agree-01
                  :ARG0 (s / she)
                  :ARG1 (p2 / play-02
                        :ARG0 s
                        :ARG1 (r / role)
                        :ARG2 (w / work-01
                              :ARG0 (ii / i))))
            :op2 (h / honor-01
                  :ARG1 ii))
      :ARG1 ii)

# ::snt The detainee, A. A. J. aged 28 years, has been in custody for committing the various crimes and will be judged in the next few hours.
(a / and
      :op1 (b / be-located-at-91
            :ARG1 (p / person
                  :name (n / name
                        :op1 "A."
                        :op2 "A."
                        :op3 "J.")
                  :ARG1-of (d / detain-01)
                  :age (t / temporal-quantity
                        :quant 28
                        :unit (y / year)))
            :ARG2 (c / custody)
            :ARG1-of (c2 / cause-01
                  :ARG0 (c3 / commit-02
                        :ARG0 p
                        :ARG1 (c4 / crime-02
                              :mod (v / various)))))
      :op2 (j / judge-01
            :ARG1 p
            :time (a2 / after
                  :op1 (n2 / now)
                  :duration (f / few
                        :op1 t
                        :quant 1
                        :unit (h / hour)))))

# ::snt On the contrary, the mobile operators like to complain that the Czech market is extremely concurrenciez.
(c / contrast-01
      :ARG2 (l / like-01
            :ARG0 (c2 / company
                  :ARG0-of (o / operate-01
                        :ARG1-of (m / mobile-02)))
            :ARG1 (c3 / complain-01
                  :ARG0 c2
                  :ARG1 (r / reasonable-02
                        :ARG1 (m2 / market
                              :mod (c4 / country
                                    :name (n / name
                                          :op1 "Czech")))
                        :degree (e / extreme)))))

# ::snt At the end of trade, the stock exchange of Prague bascula in the negative
(n / negative-03
      :ARG1 (e / exchange-01
            :ARG0 (c / city
                  :name (n2 / name
                        :op1 "Czech"
                        :op2 "Bascula"))
            :ARG1 (s / stock))
      :time (e2 / end-01
            :ARG1 (t / trade-01)))

# ::snt The driver of the last to try to avoid it through a sudden move, but he fell short by his right side.
(c / contrast-01
      :ARG1 (t / try-01
            :ARG0 (p / person
                  :ARG0-of (d / drive-01)
                  :mod (l / last))
            :ARG1 (a / avoid-01
                  :ARG0 p
                  :ARG1 (ii / it)
                  :manner (m / move-02
                        :manner (s / sudden))))
      :ARG2 (f / fall-01
            :ARG1 p
            :ARG4 (s2 / short-06
                  :ARG1 p
                  :location (s3 / side
                        :ARG1-of (r / right-04)
                        :poss p))))

# ::snt And perhaps we continue to call more expensive than in the rest of Europe.
(a / and
      :op2 (p / possible-01
            :ARG1 (c / continue-01
                  :ARG0 (w / we)
                  :ARG1 (c2 / call-01
                        :ARG0 w
                        :ARG2 (e / expensive
                              :ARG2-of (h / have-degree-91
                                    :ARG1 c2
                                    :ARG3 (m / more)
                                    :ARG4 (c3 / continent
                                          :name (n / name
                                                :op1 "Europe")
                                          :mod (r / rest))))))))

# ::snt To Elena, this is the first time, Luca already the third or fourth time.
(o / opine-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Elena"))
      :ARG1 (a / and
            :op1 (o2 / ordinal-entity
                  :value 1
                  :domain (t / this))
            :op2 (o3 / ordinal-entity
                  :value 4
                  :domain (p2 / person
                        :name (n2 / name
                              :op1 "Luca"))
                  :time (a2 / already))))

# ::snt Especially as it is relatively saturated from the point of view of the offer of services. "
(c / cause-01
      :ARG0 (s / saturate-01
            :ARG1 (ii / it)
            :ARG2-of (r / relative-05)
            :source (h / have-point-of-view-08
                  :ARG1 (o / offer-01
                        :ARG1 (s2 / serve-01))))
      :mod (e / especially))

# ::snt Its beautiful daughter out Plymouth.
(p / person
      :ARG0-of (h / have-rel-role-91
            :ARG1 (ii / it)
            :ARG2 (d / daughter))
      :ARG1-of (b / beautiful-02)
      :location (c / city
            :name (n / name
                  :op1 "Poulter")))

# ::snt The European tourists kidnapped in the Sahara are visibly free.
(f / free-04
      :ARG1 (p / person
            :mod (c / continent
                  :name (n / name
                        :op1 "Europe"))
            :ARG1-of (k / kidnap-01
                  :location (w / world-region
                        :name (n2 / name
                              :op1 "Sahara")))
            :ARG0-of (t / tour-01))
      :ARG1-of (s / see-01
            :ARG1-of (p2 / possible-01)))

# ::snt On both sides, there were, of course, those who have expressed their doubts about the plan.
(e / express-01
      :ARG0 (p / person
            :mod (t / that))
      :ARG1 (d / doubt-01
            :ARG0 p
            :ARG1 (p2 / plan-01))
      :mod (o / of-course)
      :location (s / side
            :mod (b / both)))

# ::snt The police began their chase until the vehicle stopped two miles up the road, where the two occupants got down to flee into a forested area.
(b / begin-01
      :ARG0 (p / police)
      :ARG1 (c / chase-01
            :ARG0 p)
      :time (u / until
            :op1 (s / stop-01
                  :ARG1 (v / vehicle)
                  :location (r / relative-position
                        :op1 (r2 / road)
                        :direction (u2 / up)
                        :quant (d / distance-quantity
                              :quant 2
                              :unit (m / mile))
                        :location-of (g / get-05
                              :ARG1 (p2 / person
                                    :quant 2
                                    :ARG1-of (o / occupy-01)
                                    :ARG0-of o)
                              :ARG2 (d2 / down)
                              :purpose (f / flee-05
                                    :ARG0 p2
                                    :ARG2 (a / area
                                          :ARG1-of (f2 / forest-01))))))))

# ::snt The Nobel Prize for the economy has been attributed to the American Paul Krugman for his research on the models of trade and the location of business.
(a / attribute-01
      :ARG1 (a2 / award
            :name (n / name
                  :op1 "Nobel"
                  :op2 "Prize"
                  :op3 "for"
                  :op4 "the"
                  :op5 "Economy"))
      :ARG2 (p / person
            :name (n2 / name
                  :op1 "Paul"
                  :op2 "Krugman")
            :mod (c / country
                  :name (n3 / name
                        :op1 "America")))
      :ARG3 (r / research-01
            :ARG0 p
            :ARG1 (m / model-01
                  :ARG1 (a3 / and
                        :op1 (t / trade-01)
                        :op2 (l / location
                              :location-of (b / business))))))

# ::snt At the same time, in Europe, we had further proof of the global nature of the crisis.
(h / have-03
      :ARG0 (w / we)
      :ARG1 (p / prove-01
            :ARG1 (n / nature
                  :mod (g / globe)
                  :poss (c / crisis))
            :mod (f / further))
      :location (c2 / continent
            :name (n2 / name
                  :op1 "Europe"))
      :time (t / time
            :ARG1-of (s / same-01)))

# ::snt On trade terms, the stock exchange of Prague fell
(f / fall-01
      :ARG1 (e / exchange-01
            :ARG1 (s / stock)
            :location (c / city
                  :name (n / name
                        :op1 "Prague")))
      :manner (t / term
            :mod (t2 / trade-01)))

# ::snt AAC (the format used by Apple and its iPods), meanwhile, is less current.
(h / have-degree-91
      :ARG1 (f / format
            :name (n / name
                  :op1 "AAC")
            :ARG1-of (u / use-01
                  :ARG0 (a / and
                        :op1 (c / company
                              :name (n2 / name
                                    :op1 "Apple"))
                        :op2 (p / product
                              :name (n3 / name
                                    :op1 "Pipod")
                              :poss c))))
      :ARG2 (c2 / current)
      :ARG3 (l / less)
      :time (m / meanwhile))

# ::snt In the end, read the mangas, that is what I prefer already for years.1
(r / read-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (m / mangas
            :ARG1-of (p / prefer-01
                  :ARG0 (ii / i)
                  :time (a / already)
                  :duration (m2 / multiple
                        :op1 (t / temporal-quantity
                              :quant 1
                              :unit (y2 / year)))))
      :time (e / end-01))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
(p / peropos
      :domain (ii / inherit-01
            :location (p2 / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :purpose (m / minimize-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / code
                        :ARG1-of (e / exist-01))
                  :manner (m2 / modify-01
                        :polarity -
                        :ARG1 c)))
      :ARG0-of m)

# ::snt A document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector))

# ::snt As an official theorem, Bayes' theorem is valid in all universal interpretations of probability.
(v / valid-02
      :ARG1 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :prep-as (t2 / theorem
            :mod (o / official))
      :location (ii / interpret-01
            :ARG1 (p2 / probability)
            :mod (u / universal)
            :mod (a / all)))

# ::snt A document is represented as a vector and each dimension corresponds to a separate term.
(a / and
      :op1 (r / represent-01
            :ARG1 (d / document)
            :ARG2 (v / vector))
      :op2 (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt • P(B|A) is the conditional probability of B given A.
(p / probability
      :mod (c / conditional)
      :domain (v / variable
            :name (n / name
                  :op1 "P")
            :ARG1-of (g / give-01
                  :ARG2 (v2 / variable
                        :name (n2 / name
                              :op1 "A"))))
      :mod (v3 / variable
            :name (n3 / name
                  :op1 "B")))

# ::snt The way that a 'term' is defined depends on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term)
            :manner (w / way))
      :ARG1 (a / apply-02))

# ::snt Thus, the "program" is the optimal plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02
                  :ARG1-of (p2 / produce-01))
            :ARG1-of (o / optimal-02)
            :domain (p3 / program)))

# ::snt Therefore, the "program" is the optimal plan for action that is produced.
(c / cause-01
      :ARG1 (p / plan-01
            :ARG1 (a / action)
            :ARG1-of (o / optimal-02)
            :domain (p2 / program)))

# ::snt One of the best known methods is called tf-idf weighting.
(c / call-01
      :ARG1 (m / method
            :name (n / name
                  :op1 "Tf-idf")
            :ARG1-of (ii / include-91
                  :ARG2 (m2 / method
                        :ARG1-of (k / know-02
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (g / good-02)
                                    :ARG3 (m3 / most))))))
      :ARG2 m)

# ::snt It does not take into account any information about B and therefore is considered “prior”.
(c / cause-01
      :ARG0 (t / take-into-account-04
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (ii2 / information
                  :topic (t2 / thing
                        :name (n / name
                              :op1 "B"))
                  :mod (a / any)))
      :ARG1 (c2 / consider-01
            :ARG1 (p / prior
                  :domain ii)))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (v / vector)))
            :ARG2 (a / and
                  :op1 (r / retrieve-01
                        :ARG1 (ii / information))
                  :op2 (f / filter-02
                        :ARG1 ii))))

# ::snt Generalise the structure of an optimal solution 2.
(g / generalize-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / structure-01
            :ARG1 (s2 / solution
                  :mod 2
                  :mod (o / optimal))))

# ::snt There are four steps in Dynamic Programming: 1.
(s / step-01
      :quant 1
      :ARG1 (p / program-01
            :mod (d / dynamic))
      :ARG2 (s2 / step-01
            :quant 1
            :ARG1 p))

# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :domain (o / outcome
                        :poss (e / event
                              :quant 1))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (e2 / event
                              :time (p2 / previous)))))
      :mod (m / main))

# ::snt For instance, a finalized schedule of events at an exhibition is sometimes called a program.
(c / call-01
      :ARG1 (s / schedule-01
            :ARG1 (e / event
                  :location (e2 / exhibition))
            :ARG1-of (f / finalize-01))
      :ARG2 (p / program)
      :frequency (s2 / sometimes)
      :ARG0-of (e3 / exemplify-01))

# ::snt One of the most important uses of page rank is its meaning to advertising.
(m / mean-01
      :ARG1 (r / rank-01
            :ARG3 (p / page))
      :ARG2 (a / advertise-01)
      :ARG1-of (ii / include-91
            :ARG2 (u / use-01
                  :ARG1 r
                  :ARG1-of (h / have-degree-91
                        :ARG2 (ii2 / important-01
                              :ARG1 u)
                        :ARG3 (m2 / most)))))

# ::snt Characterise structure of an optimal solution.
(c / characterise-01
      :ARG1 (s / structure-01
            :ARG1 (s2 / solution
                  :ARG1-of (o / optimal-02))))

# ::snt It is used in information retrieval and was first used in the SMART Information Retrieval System.
(a / and
      :op1 (u / use-01
            :ARG1 (ii / it)
            :ARG2 (r / retrieve-01
                  :ARG1 (ii2 / information)))
      :op2 (u2 / use-01
            :ARG1 ii
            :ARG2 (s / system
                  :name (n / name
                        :op1 "SMART"
                        :op2 "Information"
                        :op3 "Retrieval"
                        :op4 "System"))
            :ord (o / ordinal-entity
                  :value 1)))

# ::snt The vector space model has several disadvantages.
(d / disadvantage
      :quant (s / several)
      :domain (m / model
            :mod (s2 / space
                  :ARG1-of (v / vector-01))))

# ::snt The order in which the terms appear in the document is lost in the vector space representation.
(l / lose-02
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt In the vector space model a document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG2-of (v / vector-02))
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt An example of this gain in efficiency is a path-finding problem.
(p / problem
      :ARG0-of (f / find-01
            :ARG1 (p2 / path))
      :domain (e / exemplify-01
            :ARG0 (g / gain-01
                  :ARG2 (e2 / efficient-01)
                  :mod (t / this))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector)
      :manner (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
(c / cause-01
      :ARG0 (a / algorithm
            :domain (r / rank-01
                  :ARG2 (p / page))
            :ARG1-of (u / use-01
                  :ARG2 (e / engine
                        :mod (c2 / company
                              :name (n / name
                                    :op1 "Google"))))
            :ARG1-of (h / have-degree-91
                  :ARG2 (ii / important-01
                        :ARG1 a)
                  :ARG3 (m / most))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
(ii / idea
      :mod (b / basic)
      :domain (r / represent-01
            :ARG1 (d / document
                  :mod (e / each))
            :ARG2 (v / vector
                  :consist-of (f / frequency
                        :mod (w / word)
                        :ARG1-of (w2 / weight-01)
                        :mod (c / certain)))))

# ::snt After this, it is using this to pick the best overall path.
(u / use-01
      :ARG0 (ii / it)
      :ARG1 (t / this)
      :ARG2 (p / pick-01
            :ARG0 ii
            :ARG1 (p2 / path
                  :mod (o / overall)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 p2)
                        :ARG3 (m / most))))
      :time (a / after
            :op1 t))

# ::snt The vector space model are the documents which are represented as “bags of words”.
(d / document
      :ARG1-of (r / represent-01
            :ARG0 (b / bag
                  :consist-of (w / word)))
      :domain (m / model
            :name (n / name
                  :op1 " vector"
                  :op2 "Space"
                  :op3 "Model")))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
(v / value-01
      :ARG1 (t / term
            :location (d / document))
      :ARG2 (t2 / thing
            :mod (z / zero)
            :ARG2-of (v2 / vector-00)))

# ::snt A link to a page is seen as a vote of support.
(s / see-01
      :ARG1 (l / link-01
            :ARG2 (p / page))
      :ARG2 (v / vote-01
            :ARG1 (s2 / support-01)))

# ::snt Other ways of computing these values, or weights, have been developed.
(d / develop-01
      :ARG1 (w / way
            :mod (o / other)
            :instrument-of (c / compute-01
                  :ARG1 (o2 / or
                        :op1 (v / value
                              :mod (t / this))
                        :op2 (m / mass-quantity
                              :ARG2-of (w2 / weigh-01))))))

# ::snt The value of a vector is non-zero if a term occurs in the document.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / thing
                        :ARG1-of (v2 / vector-01))))
      :ARG2 (t2 / term
            :location (d / document)))

# ::snt The PageRank depends on the PageRank rating and number of all pages that have links to it.
(d / depend-01
      :ARG0 (t / thing
            :name (n / name
                  :op1 "Page"
                  :op2 "Rank"))
      :ARG1 (a / and
            :op1 (r / rate-01
                  :ARG1 t)
            :op2 (n2 / number
                  :quant-of (p / page
                        :mod (a2 / all)
                        :ARG0-of (l / link-01
                              :ARG2 t)))))

# ::snt In a word, we can solve a problem with optimal substructure using a three-step process.
(p / possible-01
      :ARG1 (s / solve-01
            :ARG0 (w / we)
            :ARG1 (p2 / problem)
            :ARG2 (s2 / substructure
                  :ARG1-of (o / optimal-02))
            :ARG3 (p3 / process-02
                  :mod (s3 / step-01
                        :quant 3)))
      :ARG1-of (w2 / word-01))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (v / vector)))
            :ARG2 (a / and
                  :op1 (r / retrieve-01
                        :ARG1 (ii / information))
                  :op2 (f / filter-02
                        :ARG1 ii))))

# ::snt It is usually used to calculate posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :mod (u2 / usual))

# ::snt Each item in the vector represents a different keyword.
(r / represent-01
      :ARG0 (ii / item
            :mod (e / each)
            :location (v / vector))
      :ARG1 (k / keyword
            :ARG1-of (d / differ-02)))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
(v / value-01
      :ARG1 (t / term
            :location (d / document))
      :ARG2 (t2 / thing
            :mod (z / zero)
            :ARG2-of (v2 / vector-00)))

# ::snt Many different ways of calculating these values, also known as (term) weights, have been developed.
(d / develop-02
      :ARG1 (w / way
            :manner-of (c / calculate-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w2 / weight
                                    :mod (t2 / term))
                              :mod (a / also))))
            :ARG1-of (d2 / differ-02)
            :quant (m / many)))

# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
(r / relate-01
      :ARG1 (p / probability
            :time (p2 / prior)
            :mod (c / conditional)
            :domain (p3 / probability
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t / theorem
            :poss (p4 / person
                  :name (n / name
                        :op1 "Bayes")))
      :topic (t2 / theory
            :mod (p5 / probability)))

# ::snt The definition of term is dependent on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term))
      :ARG1 (a / apply-02))

# ::snt It was used in the first time in the SMART Information Retrieval System.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (t / thing
            :name (n / name
                  :op1 "SMART"
                  :op2 "Information"
                  :op3 "Retrieval"
                  :op4 "System"))
      :ord (o / ordinal-entity
            :value 1))

# ::snt However an object cannot be cast to a class which is no relative of it.
(c / contrast-01
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (c2 / cast-01
                  :ARG1 (o / object)
                  :ARG2 (c3 / class
                        :ARG1-of (r / relative-05
                              :polarity -
                              :ARG2 o)))))

# ::snt A variation of the PageRank method bases the importance of a webpage on how many visits the page gets.
(b / base-02
      :ARG0 (v / vary-01
            :ARG1 (m / method
                  :name (n / name
                        :op1 "PageRank")))
      :ARG1 (ii / important-01
            :ARG1 (w / webpage))
      :ARG2 (n2 / number
            :quant-of (v2 / visit-01
                  :ARG0 (p / page))))

# ::snt Thus, the "program" is the optimal plan of action that is being produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02)
            :ARG1-of (o / optimal-02)
            :domain (p2 / program)))

# ::snt They do not have to be written in a computer language.
(o / obligate-01
      :polarity -
      :ARG2 (w / write-01
            :ARG1 (t / they)
            :manner (l / language
                  :mod (c / computer))))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (a / and
                  :op1 (d / divide-02)
                  :op2 (c2 / conquer-01)))
      :ARG2 (d2 / differ-02
            :ARG1 ii
            :ARG1-of (c3 / cause-01
                  :ARG0 (d3 / depend-01
                        :polarity -
                        :ARG0 (p / problem
                              :poss ii)))))

# ::snt In general, dynamic programming is used on optimisation problems, where the most efficient solution is needed.
(u / use-01
      :ARG1 (p / program-01
            :mod (d / dynamic))
      :ARG2 (p2 / problem
            :topic (o / optimize-01)
            :location-of (n / need-01
                  :ARG1 (s / solution
                        :ARG1-of (h / have-degree-91
                              :ARG2 (e / efficient-01
                                    :ARG1 s)
                              :ARG3 (m / most)))))
      :ARG1-of (g / general-02))

# ::snt Each dimensions corresponds to a separate terms.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02)))

# ::snt Bayes' theorem relates the conditional and marginal probabilities of two random events.
(r / relate-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG1 (a / and
            :op1 (p2 / probability
                  :mod (c / conditional)
                  :domain (e / event
                        :quant 2
                        :mod (r2 / random)))
            :op2 (p3 / probability
                  :ARG1-of (m / marginal-02)
                  :domain e)))

# ::snt The other method is the top down approach which is a method that combines memorization and recursion.
(m / method
      :mod (t / top-down)
      :domain (m2 / method
            :ARG0-of (c / combine-01
                  :ARG1 (m3 / memorize-01)
                  :ARG2 (r / recursion)))
      :mod (o / other))

# ::snt It is usually be used to compute posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / compute-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :mod (u2 / usual))

# ::snt The method takes much less time than naive methods.
(t / take-10
      :ARG0 (m / method)
      :ARG1 (t2 / time
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less
                        :quant (m2 / much))
                  :ARG4 (m3 / method
                        :mod (n / naive)))))

# ::snt This is a much quicker method than other more naive methods.
(h / have-degree-91
      :ARG1 (m / method
            :domain (t / this))
      :ARG2 (q / quick-02
            :ARG1 m)
      :ARG3 (m2 / more
            :quant (m3 / much))
      :ARG4 (m4 / method
            :mod (n / naive)
            :mod (o / other)
            :ARG1-of (h2 / have-degree-91
                  :ARG2 n
                  :ARG3 (m5 / more))))

# ::snt The definition of term depends on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term))
      :ARG1 (a / apply-02))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (a / and
                  :op1 (d / divide-02)
                  :op2 (c2 / conquer-01)))
      :ARG2 (d2 / differ-02
            :ARG1 ii
            :ARG1-of (c3 / cause-01
                  :ARG0 (d3 / depend-01
                        :polarity -
                        :ARG0 (p / problem
                              :poss ii)))))

# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
(u / use-01
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (s / solve-01)
            :mod (o / optimal)
            :mod (t2 / this))
      :ARG2 (c / construct-01
            :ARG0 y
            :ARG1 (t3 / thing
                  :ARG2-of (s2 / solve-01
                        :ARG1 (p / problem
                              :mod (o2 / original)))
                  :mod (o3 / optimal))))

# ::snt It is usually used to calculate posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :mod (u2 / usual))

# ::snt It also provides a way to generalize du to the "is a" relationship between classes.
(p / provide-01
      :ARG0 (ii / it)
      :ARG1 (w / way
            :manner-of (g / generalize-01
                  :ARG0 ii
                  :ARG1 (r / relation-03
                        :ARG0 (c / class)
                        :ARG1 (a / amr-unknown))
                  :ARG2 c))
      :mod (a2 / also))

# ::snt Define value of optimal solution recursively.
(d / define-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (v / value-01
            :ARG1 (s / solution
                  :mod (o / optimal))
            :ARG1-of (r / recurs-01
                  :ARG0 y)))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (a / and
                  :op1 (d / divide-02)
                  :op2 (c2 / conquer-01)))
      :ARG2 (d2 / differ-02
            :ARG1 ii
            :ARG1-of (c3 / cause-01
                  :ARG0 (d3 / depend-01
                        :polarity -
                        :ARG0 (p / problem
                              :poss ii)))))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
(ii / idea
      :mod (b / basic)
      :domain (r / represent-01
            :ARG1 (d / document
                  :mod (e / each))
            :ARG2 (v / vector
                  :consist-of (f / frequency
                        :mod (w / word)
                        :ARG1-of (w2 / weight-01)
                        :mod (c / certain)))))

# ::snt Each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02)))

# ::snt However an object cannot be cast to a class which is no relative of it.
(c / contrast-01
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (c2 / cast-01
                  :ARG1 (o / object)
                  :ARG2 (c3 / class
                        :ARG1-of (r / relative-05
                              :polarity -
                              :ARG2 o)))))

# ::snt At the same time, Bayesians describe probabilities in terms of beliefs and degrees of uncertainty.
(d / describe-01
      :ARG0 (p / person
            :mod (b / bayesian))
      :ARG1 (p2 / probability)
      :ARG2 (a / and
            :op1 (t / thing
                  :ARG1-of (b2 / believe-01))
            :op2 (d2 / degree
                  :degree-of (c / certain
                        :polarity -)))
      :time (t2 / time
            :ARG1-of (s / same-01)))

# ::snt It is used in information filtering, indexing, relevancy rankings and information retrieval.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (a / and
            :op1 (f / filter-02
                  :ARG1 (ii2 / information))
            :op2 (ii3 / index-01)
            :op3 (r / rank-01
                  :ARG3 (r2 / relevancy))
            :op4 (r3 / retrieve-01
                  :ARG1 (ii4 / information))))

# ::snt Bayes' theorem is useful in evaluating the result of drug tests.
(u / useful-05
      :ARG1 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG2 (e / evaluate-01
            :ARG1 (t2 / thing
                  :ARG2-of (r / result-01
                        :ARG1 (t3 / test-01
                              :ARG2 (d / drug))))))

# ::snt Dangling, links to a page which has no links to others.
(m / multi-sentence
      :snt1 (d / dangle-01)
      :snt2 (l / link-01
            :ARG2 (p / page
                  :ARG1-of (l2 / link-01
                        :polarity -
                        :ARG2 (p2 / page
                              :mod (o / other))))))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
(r / represent-01
      :ARG1 (d / document
            :ARG2-of (r2 / retrieve-01
                  :ARG1 (ii / information)))
      :ARG2 (v / vectors)
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
(c / contrast-01
      :ARG2 (k / key-02
            :ARG1 (d / determine-01
                  :ARG1 (s / structure-01
                        :ARG1 (s2 / solution
                              :ARG1-of (o / optimal-02))))
            :ARG2 (p / program-01
                  :manner (d2 / dynamic))))

# ::snt Vector space representation results in the loss of the order which the terms are in the document.
(r / result-01
      :ARG1 (r2 / representation-02
            :ARG1 (s / space
                  :ARG1-of (v / Vector-01)))
      :ARG2 (l / lose-02
            :ARG1 (o / order
                  :ARG2-of (o2 / order-01)
                  :location (d / document))))

# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
(l / lose-02
      :li "-1"
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt The typical example could be of a finalized schedule of events at an exhibition.
(p / possible-01
      :ARG1 (e / exemplify-01
            :ARG0 (s / schedule-01
                  :ARG1 (e2 / event)
                  :ARG1-of (f / finalize-01)
                  :location (e3 / exhibition))
            :ARG1-of (t / typical-02)))

# ::snt Several different ways of computing these values, additionally known as (term) weights, have been developed.
(d / develop-02
      :ARG1 (w / way
            :manner-of (c / compute-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w2 / weight
                                    :mod (t2 / term))
                              :mod (a / additional))))
            :ARG1-of (d2 / differ-02)
            :quant (s / several)))

# ::snt non
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG2 (a / appear-01
            :ARG1 t
            :location d))

# ::snt A link to a page is seen as a vote of support.
(s / see-01
      :ARG1 (l / link-01
            :ARG2 (p / page))
      :ARG2 (v / vote-01
            :ARG1 (s2 / support-01)))

# ::snt The main problem is divided into sub problems which are solved and stored for future use.
(d / divide-02
      :ARG1 (p / problem
            :mod (m / main))
      :ARG2 (p2 / problem
            :mod (s / sub)
            :ARG1-of (s2 / solve-01)
            :ARG1-of (s3 / store-01
                  :purpose (u / use-01
                        :time (f / future)))))

# ::snt For example, a program could exist to model different forms of transport.
(e / exemplify-01
      :ARG0 (p / possible-01
            :ARG1 (e2 / exist-01
                  :ARG1 (p2 / program)
                  :purpose (m / model-01
                        :ARG0 p2
                        :ARG1 (t / transport-01
                              :mod (f / form
                                    :ARG1-of (d / differ-02)))))))

# ::snt For example, a schedule of events at an exhibition is sometimes called a programme.
(c / call-01
      :ARG1 (s / schedule-01
            :ARG1 (e / event
                  :location (e2 / exhibition)))
      :ARG2 (p / program)
      :frequency (s2 / sometimes)
      :ARG0-of (e3 / exemplify-01))

# ::snt Each document is a vector where each word is a dimension.
(t / thing
      :ARG2-of (v / vector-00)
      :domain (d / document
            :mod (e / each))
      :location (d2 / dimension
            :domain (w / word
                  :mod (e2 / each))))

# ::snt It is often used to calculate posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :frequency (o2 / often))

# ::snt In this classic model the term specific weights in the document vectors are products of local and global parameters.
(r / result-01
      :ARG1 (p / parameter
            :ARG1-of (l / local-02)
            :mod (g / globe))
      :ARG2 (t / term
            :ARG1-of (s / specific-02)
            :location (v / vector
                  :mod (d / document)))
      :location (m / model
            :mod (c / classic)
            :mod (t2 / this)))

# ::snt Bayes' theorem is useful in evaluating the result of drug tests.
(u / useful-05
      :ARG1 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG2 (e / evaluate-01
            :ARG1 (t2 / thing
                  :ARG2-of (r / result-01
                        :ARG1 (t3 / test-01
                              :ARG2 (d / drug))))))

# ::snt P(A|B) is the conditional probability of A, given B.
(p / probability
      :mod (c / conditional)
      :domain (v / variable
            :name (n / name
                  :op1 "A"))
      :ARG1-of (g / give-01
            :ARG2 (v2 / variable
                  :name (n2 / name
                        :op1 "B"))))

# ::snt The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others.
(a / algorithm
      :name (n / name
            :op1 "Page"
            :op2 "Rank")
      :ARG2-of (r / recede-01)
      :ARG1-of (u / use-01
            :ARG0 (c / company
                  :name (n2 / name
                        :op1 "Google"))
            :ARG2 (d / determine-01
                  :ARG0 c
                  :ARG1 (w / webpage
                        :ARG1-of (ii / important-01
                              :ARG2-of (h / have-degree-91
                                    :ARG1 w
                                    :ARG3 (m / more)
                                    :ARG4 (p / page
                                          :mod (o / other))))))))

# ::snt However, the patent is assigned to Stanford University and not to Google.
(c / contrast-01
      :ARG2 (a / and
            :op1 (a2 / assign-01
                  :ARG1 (p / patent-01)
                  :ARG2 (u / university
                        :name (n / name
                              :op1 "Stanford"
                              :op2 "University")))
            :op2 (a3 / assign-01
                  :polarity -
                  :ARG1 p
                  :ARG2 (c2 / company
                        :name (n2 / name
                              :op1 "Google")))))

# ::snt It is therefore used to create relationships between one object and another.
(c / cause-01
      :ARG1 (u / use-01
            :ARG1 (ii / it)
            :ARG2 (c2 / create-01
                  :ARG1 (r / relation-03
                        :ARG0 (o / object)
                        :ARG2 (o2 / object
                              :mod (a / another))))))

# ::snt A document is represented as a vector, and each dimension corresponds to a separate term.
(a / and
      :op1 (r / represent-01
            :ARG1 (d / document)
            :ARG2 (v / vector))
      :op2 (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
(w / way
      :manner-of (l / look-01
            :ARG1 (ii / inherit-01)
            :ARG2 (r / relation-03
                  :ARG1 ii
                  :mod (k / kind)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt Bayes' theorem relates the conditional and marginal probabilities of two random events.
(r / relate-01
      :ARG0 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :ARG1 (a / and
            :op1 (p2 / probability
                  :mod (c / conditional)
                  :domain (e / event
                        :quant 2
                        :mod (r2 / random)))
            :op2 (p3 / probability
                  :ARG1-of (m / marginal-02)
                  :domain e)))

# ::snt The definition of a term depends on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term))
      :ARG1 (a / apply-02))

# ::snt A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems.
(m / mean-01
      :ARG1 (p / problem
            :topic (o / overlap-01)))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
(f / form-01
      :ARG0 (ii / inherit-01
            :ARG1 (p / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :ARG1 (c / class
            :ARG1-of (n / new-01)
            :ARG2-of (u / use-01
                  :ARG1 (c2 / class
                        :ARG1-of (d / define-01
                              :time (a / already)))))
      :manner (w / way))

# ::snt Single words, keywords and occasionally longer phrases are used for terms.
(u / use-01
      :ARG1 (a / and
            :op1 (w / word
                  :ARG1-of (s / single-02))
            :op2 (k / keyword)
            :op3 (p / phrase
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 p)
                        :ARG3 (m / more
                              :frequency (o / occasional)))))
      :ARG2 (t / term))

# ::snt The PageRank is a recursive algorithm used by Google to determine which webpages are more important than others.
(a / algorithm
      :name (n / name
            :op1 "Page"
            :op2 "Rank")
      :ARG2-of (r / recede-01)
      :ARG1-of (u / use-01
            :ARG0 (c / company
                  :name (n2 / name
                        :op1 "Google"))
            :ARG2 (d / determine-01
                  :ARG0 c
                  :ARG1 (w / webpage
                        :ARG1-of (ii / important-01
                              :ARG2-of (h / have-degree-91
                                    :ARG1 w
                                    :ARG3 (m / more)
                                    :ARG4 (p / page
                                          :mod (o / other))))))))

# ::snt Thus, the "program" is the optimal plan for action that is produced.
(ii / infer-01
      :ARG1 (p / plan-01
            :ARG1 (a / act-02
                  :ARG1-of (p2 / produce-01))
            :ARG1-of (o / optimal-02)
            :domain (p3 / program)))

# ::snt Inheritance in object oriented programming is a way to form new classes using classes that have already been defined.
(f / form-01
      :ARG0 (ii / inherit-01
            :ARG1 (p / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :ARG1 (c / class
            :ARG1-of (n / new-01)
            :ARG2-of (u / use-01
                  :ARG1 (c2 / class
                        :ARG1-of (d / define-01
                              :time (a / already)))))
      :manner (w / way))

# ::snt Programming, in this sense, means finding an acceptable plan, an algorithm.
(m / mean-01
      :ARG1 (p / program-01)
      :ARG2 (f / find-01
            :ARG1 (p2 / plan
                  :ARG1-of (a / accept-01
                        :ARG1-of (p3 / possible-01))
                  :mod (a2 / algorithm)))
      :mod (s / sense
            :mod (t / this)))

# ::snt The vector space model has several disadvantages.
(d / disadvantage
      :quant (s / several)
      :domain (m / model
            :mod (s2 / space
                  :ARG1-of (v / vector-01))))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (v / vector)))
            :ARG2 (a / and
                  :op1 (r / retrieve-01
                        :ARG1 (ii / information))
                  :op2 (f / filter-02
                        :ARG1 ii))))

# ::snt One of the best known schemes is tf-idf (term frequency-inverse document frequency) weighting.
(ii / include-91
      :ARG1 (w / weight-01
            :ARG2 (s / string-entity
                  :value "tf-idf"
                  :ARG1-of (m / mean-01
                        :ARG2 (f / frequency
                              :mod (ii2 / inverse)
                              :mod (d / document)
                              :mod (t / term)))))
      :ARG2 (s2 / scheme-01
            :ARG1-of (k / know-02
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s2)
                        :ARG3 (m2 / most)))))

# ::snt A document has representation as a vector.
(r / represent-01
      :ARG0 (d / document)
      :ARG1 (v / vector))

# ::snt The order in which terms appear in the document is lost in a vector space representation.
(l / lose-02
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt What is the probability this student is a girl?
(p / probability
      :mod (g / girl
            :domain (p2 / person
                  :ARG0-of (s / study-01)
                  :mod (t / this)))
      :domain (a / amr-unknown))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (v2 / vector)))
      :ARG2 (a / appear-01
            :ARG1 (t2 / term)
            :location (d / document)))

# ::snt The "program" is the optimal plan for action that is produced.
(p / plan-01
      :ARG1 (a / action)
      :ARG1-of (p2 / produce-01)
      :mod (o / optimal)
      :domain (p3 / program))

# ::snt There are four steps in Dynamic Programming: 1.
(s / step-01
      :quant 1
      :ARG1 (p / program-01
            :mod (d / dynamic))
      :ARG2 (s2 / step-01
            :quant 1
            :ARG1 p))

# ::snt Many different methods of calculating these values, sometimes known as (term) weights, have been developed.
(d / develop-01
      :ARG1 (m / method
            :manner-of (c / calculate-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (w / weight
                                    :mod (t2 / term))
                              :frequency (s / sometimes))))
            :ARG1-of (d2 / differ-02)
            :quant (m2 / many)))

# ::snt It is used to compute posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / compute-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01)))))

# ::snt Bayes Theorem is a mathematical formula used to calculate conditional probabilities.
(f / formula
      :name (n / name
            :op1 "Bayes"
            :op2 "Theorem")
      :mod (m / mathematics)
      :ARG1-of (u / use-01
            :ARG2 (c / calculate-01
                  :ARG1 (p / probability
                        :mod (c2 / conditional)))))

# ::snt P(B|A) is the conditional probability of B given A.
(p / probability
      :mod (c / conditional)
      :domain (v / variable
            :name (n / name
                  :op1 "B")
            :ARG1-of (g / give-01
                  :ARG2 (v2 / variable
                        :name (n2 / name
                              :op1 "A"))))
      :domain (v3 / variable
            :name (n3 / name
                  :op1 "P")))

# ::snt A variation of the PageRank method bases the importance of a webpage on how many visits the page gets.
(b / base-02
      :ARG0 (v / vary-01
            :ARG1 (m / method
                  :name (n / name
                        :op1 "PageRank")))
      :ARG1 (ii / important-01
            :ARG1 (w / webpage))
      :ARG2 (n2 / number
            :quant-of (v2 / visit-01
                  :ARG0 (p / page))))

# ::snt Dynamic Programming is a very powerful mathematical technique, often utilised in programming, for solving optimization problems.
(t / technique
      :domain (p / program-01
            :manner (d / dynamic))
      :ARG1-of (p2 / powerful-02
            :degree (v / very))
      :mod (m / mathematics)
      :ARG1-of (u / utilize-01
            :ARG2 (p3 / program-01)
            :frequency (o / often)
            :purpose (s / solve-01
                  :ARG0 t
                  :ARG1 (p4 / problem
                        :topic (o2 / optimize-01)))))

# ::snt One of the most famous schemes is tf-idf weighting.
(ii / include-91
      :ARG1 (w / weight-01
            :instrument (p / product
                  :name (n / name
                        :op1 "TF-idF")))
      :ARG2 (s / scheme-01
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / fame-01
                        :ARG1 s)
                  :ARG3 (m / most))))

# ::snt In order to prevent spamming, Google releases little information on the way in which a PageRank is calculated.
(r / release-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Google"))
      :ARG1 (ii / information
            :quant (l / little)
            :topic (w / way
                  :manner-of (c2 / calculate-01
                        :ARG1 (r2 / rank-01
                              :ARG3 (p / page)))))
      :purpose (p2 / prevent-01
            :ARG0 c
            :ARG1 (s / spam-01)))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
(u / use-01
      :ARG0 (p / person
            :mod (m / mathematics))
      :ARG1 (w / word)
      :ARG2 (d / describe-01
            :ARG0 p
            :ARG1 (s / set
                  :consist-of (r / rule)
                  :ARG1-of (f / follow-02
                        :ARG0 (a / anyone)
                        :purpose (s2 / solve-01
                              :ARG0 a
                              :ARG1 (p2 / problem))
                        :ARG1-of (p3 / possible-01)))))

# ::snt The last point would be to construct an optimal solution from the computed values.
(p / point
      :mod (l / last)
      :domain (c / construct-01
            :ARG1 (s / solution
                  :ARG1-of (o / optimal-02))
            :ARG2 (t / thing
                  :ARG2-of (v / value-01)
                  :ARG1-of (c2 / compute-01))))

# ::snt If a term appears in the document, the terms value in the vector is non-zero.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / term)
                  :location (v2 / vector)))
      :ARG2 (a / appear-01
            :ARG1 (t2 / term)
            :location (d / document)))

# ::snt The method takes much less time than naive methods.
(t / take-10
      :ARG0 (m / method)
      :ARG1 (t2 / time
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less
                        :quant (m2 / much))
                  :ARG4 (m3 / method
                        :mod (n / naive)))))

# ::snt P(A), or the probability that the student is a girl regardless of any other information.
(p / probability
      :li "A"
      :domain (g / girl
            :domain (p2 / person
                  :ARG0-of (s / study-01)))
      :ARG1-of (r / regardless-91
            :ARG2 (ii / information
                  :mod (a / any)
                  :mod (o / other))))

# ::snt inheritance in object oriented programming is where a new class is formed using classes which have allready been defined.
(ii / inherit-01
      :ARG1 (p / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :location-of (f / form-01
            :ARG1 (c / class
                  :ARG1-of (n / new-01))
            :manner (u / use-01
                  :ARG1 (c2 / class
                        :ARG1-of (d / define-01
                              :time (a / all-ready))))))

# ::snt The new classes are called derived classes and they inherit the behaviours and attributes of the base classes.
(a / and
      :op1 (c / call-01
            :ARG1 (c2 / class
                  :ARG1-of (n / new-01))
            :ARG2 (c3 / class
                  :ARG1-of (d / derive-01)))
      :op2 (ii / inherit-01
            :ARG0 c2
            :ARG1 (a2 / and
                  :op1 (b / behave-01
                        :ARG0 (c4 / class
                              :mod (b2 / base)))
                  :op2 (a3 / attribute-01
                        :ARG0 c4))))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector)
      :manner (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
(v / value-01
      :ARG1 (t / term
            :location (d / document))
      :ARG2 (t2 / thing
            :mod (z / zero)
            :ARG2-of (v2 / vector-00)))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
(r / represent-01
      :ARG1 (d / document
            :ARG2-of (r2 / retrieve-01
                  :ARG1 (ii / information)))
      :ARG2 (v / vectors)
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt The limitations of the vector space model are thus.
(l / limit-01
      :ARG0 (m / model
            :mod (s / space
                  :mod (v / vector)))
      :mod (t / thus))

# ::snt Mathematicians use the word to describe a set of rules which anyone can follow to solve a problem.
(u / use-01
      :ARG0 (p / person
            :mod (m / mathematics))
      :ARG1 (w / word)
      :ARG2 (d / describe-01
            :ARG0 p
            :ARG1 (s / set
                  :consist-of (r / rule)
                  :ARG1-of (f / follow-02
                        :ARG0 (a / anyone)
                        :purpose (s2 / solve-01
                              :ARG0 a
                              :ARG1 (p2 / problem))
                        :ARG1-of (p3 / possible-01)))))

# ::snt To explain further vector space models, basically a document is characterized by a vector.
(c / characterize-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG1-of (v / vector-02))
      :manner (b / basic)
      :purpose (e / explain-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (f / further)))))

# ::snt A term which occurs in the document has a value in the vector of non-zero.
(v / value-01
      :ARG1 (t / term
            :location (d / document))
      :ARG2 (t2 / thing
            :mod (z / zero)
            :ARG2-of (v2 / vector-00)))

# ::snt Programming means finding a plan of action.
(m / mean-01
      :ARG1 (p / program-01)
      :ARG2 (f / find-01
            :ARG1 (p2 / plan-01
                  :ARG1 (a / action))))

# ::snt After this, it is using this to pick the best overall path.
(u / use-01
      :ARG0 (ii / it)
      :ARG1 (t / this)
      :ARG2 (p / pick-01
            :ARG0 ii
            :ARG1 (p2 / path
                  :mod (o / overall)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 p2)
                        :ARG3 (m / most))))
      :time (a / after
            :op1 t))

# ::snt There is also Conditional Probability which is usually interested in the way variables relate to each other.
(ii / interest-01
      :ARG1 (p / probability
            :mod (c / condition-01))
      :ARG2 (w / way
            :manner-of (r / relate-01
                  :ARG1 (v / variable)
                  :ARG2 (o / other
                        :mod (e / each))))
      :mod (u / usual)
      :mod (a / also))

# ::snt As a formal theorem Bayes theorem is valid in all common interpretations of probability.
(v / valid-02
      :ARG1 (t / theorem
            :mod (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :prep-as t
      :mod (f / formal)
      :location (ii / interpret-01
            :ARG1 (p2 / probability)
            :mod (a / all)
            :mod (c / common)))

# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
(k / key-02
      :ARG1 (f / find-01
            :ARG1 (s / structure-01
                  :ARG1 (s2 / solution
                        :ARG1-of (o / optimal-02))))
      :ARG2 (p / program-01
            :manner (d / dynamic)))

# ::snt In this classic model the term specific weights in the document vectors are products of local and global parameters.
(r / result-01
      :ARG1 (p / parameter
            :ARG1-of (l / local-02)
            :mod (g / globe))
      :ARG2 (t / term
            :ARG1-of (s / specific-02)
            :location (v / vector
                  :mod (d / document)))
      :location (m / model
            :mod (c / classic)
            :mod (t2 / this)))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
(r / represent-01
      :ARG1 (d / document
            :ARG2-of (r2 / retrieve-01
                  :ARG1 (ii / information)))
      :ARG2 (v / vectors)
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
(w / way
      :manner-of (l / look-01
            :ARG1 (ii / inherit-01)
            :ARG2 (r / relation-03
                  :ARG1 ii
                  :mod (k / kind)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt The advantage being the less time consumption in comparison to other amateur methods.
(a / advantage-01
      :ARG2 (c / consume-01
            :ARG1 (t / time)
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less)
                  :ARG4 (c2 / consume-01
                        :ARG1 (t2 / time)
                        :ARG1-of (c3 / compare-01
                              :ARG2 (m / method
                                    :mod (a2 / amateur)
                                    :mod (o / other)))))))

# ::snt Subclasses are said to ‘extend’ superclasses.
(s / say-01
      :ARG1 (e / extend-01
            :ARG0 (c / class
                  :mod (s2 / sub))
            :ARG1 (c2 / class
                  :mod (s3 / super))))

# ::snt It is also called the subsequent probability because it is derived from or depends upon the specified value of B.
(c / cause-01
      :ARG0 (o / or
            :op1 (d / derive-01
                  :ARG1 (ii / it)
                  :ARG2 (v / value
                        :mod (v2 / variable
                              :name (n / name
                                    :op1 "B"))
                        :ARG1-of (s / specify-01)))
            :op2 (d2 / depend-01
                  :ARG0 ii
                  :ARG1 v))
      :ARG1 (c2 / call-01
            :ARG1 ii
            :ARG2 (p / probability
                  :mod (s2 / subsequent))
            :mod (a / also)))

# ::snt It is mainly used to calculate the probability of one event’s outcome given that a previous event happened.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / calculate-01
            :ARG1 (p / probability
                  :domain (o / outcome
                        :poss (e / event
                              :quant 1))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (e2 / event
                              :time (p2 / previous)))))
      :mod (m / main))

# ::snt Inheritance is one of the basic concepts of Object Oriented Programming.
(ii / include-91
      :ARG1 (ii2 / inherit-01)
      :ARG2 (c / concept
            :mod (b / basic)
            :poss (p / program
                  :ARG1-of (d / develop-02)
                  :ARG1-of (ii3 / integrate-01
                        :ARG2 (o / object)))))

# ::snt Instead, a new object is made to inherit properties of objects which already exist.
(ii / instead-of-91
      :ARG1 (m / make-01
            :ARG1 (o / object
                  :ARG1-of (n / new-01))
            :purpose (ii2 / inherit-01
                  :ARG0 o
                  :ARG1 (p / property
                        :poss (o2 / object
                              :ARG1-of (e / exist-01
                                    :time (a / already)))))))

# ::snt In Java all attributes and methods are implicitly virtual.
(v / virtual
      :domain (a / and
            :op1 (a2 / attribute)
            :op2 (m / method)
            :mod (a3 / all))
      :manner (ii / implicit)
      :location (l / language
            :name (n / name
                  :op1 "Java")))

# ::snt tf-idf weighting is one of the most well known schemes.
(ii / include-91
      :ARG1 (w / weight-01
            :mod (t / thing
                  :name (n / name
                        :op1 "tf-idf")))
      :ARG2 (s / scheme-01
            :ARG1-of (h / have-degree-91
                  :ARG2 (k / know-02
                        :ARG1 s)
                  :ARG3 (m / most))))

# ::snt The vector space model are the documents which are represented as “bags of words”.
(d / document
      :ARG1-of (r / represent-01
            :ARG0 (b / bag
                  :consist-of (w / word)))
      :domain (m / model
            :name (n / name
                  :op1 " vector"
                  :op2 "Space"
                  :op3 "Model")))

# ::snt The idea of inheritance is to reuse the existing code with little or no modification at all.
(ii / idea
      :topic (ii2 / inherit-01)
      :consist-of (r / reuse-01
            :ARG1 (c / code
                  :ARG1-of (e / exist-01))
            :manner (o / or
                  :op1 (m / modify-01
                        :ARG1 c
                        :degree (l / little))
                  :op2 (m2 / modify-01
                        :polarity -
                        :ARG1 c
                        :degree (a / at-all)))))

# ::snt The theorem is often used when we have observations and wish to compute posterior probabilities.
(u / use-01
      :ARG1 (t / theorem)
      :frequency (o / often)
      :time (a / and
            :op1 (o2 / observe-01
                  :ARG0 (w / we))
            :op2 (w2 / wish-01
                  :ARG0 w
                  :ARG1 (c / compute-01
                        :ARG0 w
                        :ARG1 (p / probability
                              :mod (p2 / posterior))))))

# ::snt It was intended to allow existing code to be used again with minimal or no alteration.
(ii / intend-01
      :ARG1 (a / allow-01
            :ARG0 (ii2 / it)
            :ARG1 (u / use-01
                  :ARG1 (c / code
                        :ARG1-of (e / exist-01))
                  :mod (a2 / again)
                  :manner (o / or
                        :op1 (a3 / alter-01
                              :ARG1 c
                              :ARG1-of (m / minimal-02))
                        :op2 (a4 / alter-01
                              :polarity -
                              :ARG1 c)))))

# ::snt In object oriented programming inheritance is also dependant on access level modifiers.
(d / depend-01
      :ARG0 (ii / inherit-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :ARG1 (p / person
            :ARG0-of (m / modify-01
                  :ARG1 (l / level
                        :mod (a / access-01))))
      :mod (a2 / also)
      :location (p2 / program-01
            :ARG1-of o
            :ARG2 o2))

# ::snt Each and every dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each)
            :mod (e2 / every))
      :ARG2 (t / term
            :ARG1-of (s / separate-02)))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
(w / way
      :manner-of (l / look-01
            :ARG1 (ii / inherit-01)
            :ARG2 (r / relation-03
                  :ARG1 ii
                  :mod (k / kind)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt Later versions of PageRank (see the below formulas) would assume a probability distribution between 0 and 1.
(a / assume-02
      :ARG0 (v / version
            :mod (t / thing
                  :name (n / name
                        :op1 "Page"
                        :op2 "Rank"))
            :time (a2 / after)
            :ARG1-of (s / see-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG2 (f / formula
                        :location (b / below))))
      :ARG1 (d / distribution-range-91
            :ARG1 (p / probability)
            :ARG2 (b2 / between
                  :op1 0
                  :op2 1)))

# ::snt The value of a vector is non-zero if a term occurs in the document.
(h / have-condition-91
      :ARG1 (z / zero
            :ARG2-of (v / value-01
                  :ARG1 (t / thing
                        :ARG1-of (v2 / vector-01))))
      :ARG2 (t2 / term
            :location (d / document)))

# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
(m / mean-01
      :ARG1 (t / term)
      :ARG2 (o / or
            :op1 (w / word)
            :op2 (u / unit
                  :ARG0-of (ii / index-01)
                  :mod (a / any)
                  :ARG1-of (u2 / use-01
                        :ARG2 (ii2 / identify-01
                              :ARG1 (t2 / thing
                                    :ARG1-of (c / contain-01
                                          :ARG0 (t3 / text)))))))
      :mod (b / basic))

# ::snt The limitations of the vector space model are thus.
(l / limit-01
      :ARG0 (m / model
            :mod (s / space
                  :mod (v / vector)))
      :mod (t / thus))

# ::snt In vector space model, the documents from which the information is to be retrieved are represented as vectors.
(r / represent-01
      :ARG1 (d / document
            :ARG2-of (r2 / retrieve-01
                  :ARG1 (ii / information)))
      :ARG2 (v / vectors)
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt The vector space model has some limitations: 1.
(l / limit-01
      :li 1
      :ARG1 (m / model
            :mod (s / space
                  :ARG1-of (v / vector-01)))
      :mod (s2 / some))

# ::snt Here by meaning that a program can be an optimal plan for the produced action.
(m / mean-01
      :ARG2 (p / possible-01
            :ARG1 (p2 / plan-01
                  :ARG1 (a / act-02
                        :ARG1-of (p3 / produce-01))
                  :ARG1-of (o / optimal-02)
                  :domain (p4 / program)))
      :mod (h / here))

# ::snt The basic idea is to represent each document as a vector of certain weighted word frequencies.
(ii / idea
      :mod (b / basic)
      :domain (r / represent-01
            :ARG1 (d / document
                  :mod (e / each))
            :ARG2 (v / vector
                  :consist-of (f / frequency
                        :mod (w / word)
                        :ARG1-of (w2 / weight-01)
                        :mod (c / certain)))))

# ::snt Typically terms are keywords, single words or longer phrases.
(o / or
      :op1 (k / keyword)
      :op2 (w / word
            :ARG1-of (s / single-02))
      :op3 (p / phrase
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / long-03
                        :ARG1 p)
                  :ARG3 (m / more)))
      :domain (t / term)
      :ARG1-of (t2 / typical-02))

# ::snt It doesn't take into account any information about B, so it is "prior".
(c / cause-01
      :ARG0 (t / take-into-account-04
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (ii2 / information
                  :topic (t2 / thing
                        :name (n / name
                              :op1 "B"))
                  :mod (a / any)))
      :ARG1 (p / privilege-01
            :ARG1 ii))

# ::snt of a particular page is roughly based upon the quantity of inbound links as well as the PageRank?
(b / base-02
      :ARG1 (p / page
            :mod (p2 / particular))
      :ARG2 (a / and
            :op1 (q / quantity
                  :quant-of (l / link
                        :ARG1-of (b2 / bind-01
                              :polarity -)))
            :op2 (r / rank
                  :mod p))
      :polarity (a2 / amr-unknown)
      :manner (r2 / rough))

# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
(u / use-01
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (s / solve-01)
            :mod (o / optimal)
            :mod (t2 / this))
      :ARG2 (c / construct-01
            :ARG0 y
            :ARG1 (t3 / thing
                  :ARG2-of (s2 / solve-01
                        :ARG1 (p / problem
                              :mod (o2 / original)))
                  :mod (o3 / optimal))))

# ::snt The number of unique words in the vocabulary denotes the dimensionality, if words are used for the terms.
(ii / indicate-01
      :ARG0 (n / number
            :quant-of (w / word
                  :ARG1-of (u / unique-01)
                  :part-of (v / vocabulary)))
      :ARG1 (d / dimensionality)
      :condition (u2 / use-01
            :ARG1 (w2 / word)
            :ARG2 (t / term)))

# ::snt A document has representation as a vector.
(r / represent-01
      :ARG0 (d / document)
      :ARG1 (v / vector))

# ::snt A document is represented as a vector, with each dimension corresponding to a separate term.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (v / vector)
      :manner (c / correspond-02
            :ARG1 (d2 / dimension
                  :mod (e / each))
            :ARG2 (t / term
                  :ARG1-of (s / separate-02))))

# ::snt Occasionally it is advantageous to differentiate between these uses, as it is not necessarily noticeable from context.
(a / advantage-01
      :ARG1 (d / differentiate-101
            :ARG1 (t / thing
                  :ARG2-of (u / use-01)
                  :mod (t2 / this)))
      :frequency (o / occasional)
      :ARG1-of (c / cause-01
            :ARG0 (p / possible-01
                  :polarity -
                  :ARG1 (n / notice-01
                        :ARG1 (d2 / differentiate-01
                              :source (c2 / context))))))

# ::snt The key to Dynamic Programming is to find the structure of optimal solutions.
(k / key-02
      :ARG1 (f / find-01
            :ARG1 (s / structure-01
                  :ARG1 (s2 / solution
                        :ARG1-of (o / optimal-02))))
      :ARG2 (p / program-01
            :manner (d / dynamic)))

# ::snt The idea of inheritance in OOP refers to the formation of new classes with the already existing classes.
(r / refer-01
      :ARG0 (ii / idea
            :topic (ii2 / inherit-01)
            :part-of (t / thing
                  :name (n / name
                        :op1 "OP")))
      :ARG1 (f / form-01
            :ARG1 (c / class
                  :ARG1-of (n2 / new-01))
            :ARG3 (c2 / class
                  :ARG1-of (e / exist-01
                        :time (a / already)))))

# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
(c / contrast-01
      :ARG2 (k / key-02
            :ARG1 (d / determine-01
                  :ARG1 (s / structure-01
                        :ARG1 (s2 / solution
                              :ARG1-of (o / optimal-02))))
            :ARG2 (p / program-01
                  :manner (d2 / dynamic))))

# ::snt When a document is represented as a vector, each dimension corresponds to a separate term.
(c / correspond-02
      :ARG1 (d / dimension
            :mod (e / each))
      :ARG2 (t / term
            :ARG1-of (s / separate-02))
      :condition (r / represent-01
            :ARG1 (d2 / document)
            :ARG2 (v / vector)))

# ::snt As an official theorem, Bayes' theorem is valid in all universal interpretations of probability.
(v / valid-02
      :ARG1 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :prep-as (t2 / theorem
            :mod (o / official))
      :location (ii / interpret-01
            :ARG1 (p2 / probability)
            :mod (u / universal)
            :mod (a / all)))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
(v / value
      :quant 0
      :domain (t / thing
            :ARG2-of (v2 / vector-01))
      :condition (b / be-located-at-91
            :polarity -
            :ARG1 (t2 / term)
            :ARG2 (d / document)))

# ::snt As a formal theorem, Bayes' theorem is valid in all common interpretations of probability.
(v / valid-02
      :ARG1 (t / theorem
            :poss (p / person
                  :name (n / name
                        :op1 "Bayes")))
      :prep-as (t2 / theorem
            :mod (f / formal))
      :location (ii / interpret-01
            :ARG1 (p2 / probability)
            :mod (a / all)
            :mod (c / common)))

# ::snt The method is more effiecent than naive methods.
(h / have-degree-91
      :ARG1 (m / method)
      :ARG2 (e / effiecent)
      :ARG3 (m2 / more)
      :ARG4 (m3 / method
            :mod (n / naive)))

# ::snt One of the best known schemes is tf-idf (term frequency-inverse document frequency) weighting.
(ii / include-91
      :ARG1 (w / weight-01
            :ARG2 (s / string-entity
                  :value "tf-idf"
                  :ARG1-of (m / mean-01
                        :ARG2 (f / frequency
                              :mod (ii2 / inverse)
                              :mod (d / document)
                              :mod (t / term)))))
      :ARG2 (s2 / scheme-01
            :ARG1-of (k / know-02
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s2)
                        :ARG3 (m2 / most)))))

# ::snt This can be useful when the number of times a word appears is not considered important.
(p / possible-01
      :ARG1 (u / useful-05
            :ARG1 (t / this))
      :time (c / consider-01
            :ARG1 (ii / important-01
                  :polarity -
                  :ARG1 (n / number
                        :quant-of (w / word)))))

# ::snt If the term doesn’t occur within the document, the value in the vector is zero.
(v / value
      :quant 0
      :domain (t / thing
            :ARG2-of (v2 / vector-01))
      :condition (b / be-located-at-91
            :polarity -
            :ARG1 (t2 / term)
            :ARG2 (d / document)))

# ::snt The order in which the terms appear in the document is lost in the vector space representation.
(l / lose-02
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt The easiest way to look at inheritance is as an “…is a kind of” relationship.
(w / way
      :manner-of (l / look-01
            :ARG1 (ii / inherit-01)
            :ARG2 (r / relation-03
                  :ARG1 ii
                  :mod (k / kind)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e / easy-05
                  :ARG1 w)
            :ARG3 (m / most)))

# ::snt It is used in information retrieval and was first used in the SMART Information Retrieval System.
(a / and
      :op1 (u / use-01
            :ARG1 (ii / it)
            :ARG2 (r / retrieve-01
                  :ARG1 (ii2 / information)))
      :op2 (u2 / use-01
            :ARG1 ii
            :ARG2 (s / system
                  :name (n / name
                        :op1 "SMART"
                        :op2 "Information"
                        :op3 "Retrieval"
                        :op4 "System"))
            :ord (o / ordinal-entity
                  :value 1)))

# ::snt Single words, keywords and occasionally longer phrases are used for terms.
(u / use-01
      :ARG1 (a / and
            :op1 (w / word
                  :ARG1-of (s / single-02))
            :op2 (k / keyword)
            :op3 (p / phrase
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 p)
                        :ARG3 (m / more
                              :frequency (o / occasional)))))
      :ARG2 (t / term))

# ::snt The vector space model has the following limitations: 1.
(l / limit-01
      :li 1
      :ARG1 (m / model
            :mod (s / space
                  :ARG1-of (v / vector-01)))
      :ARG1-of (f / follow-04))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
(c / cause-01
      :ARG0 (a / algorithm
            :domain (r / rank-01
                  :ARG2 (p / page))
            :ARG1-of (u / use-01
                  :ARG2 (e / engine
                        :mod (c2 / company
                              :name (n / name
                                    :op1 "Google"))))
            :ARG1-of (h / have-degree-91
                  :ARG2 (ii / important-01
                        :ARG1 a)
                  :ARG3 (m / most))))

# ::snt Generate the optimal solution of these computed values
(g / generate-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / solution
            :ARG1-of (h / have-degree-91
                  :ARG2 (o / optimal)
                  :ARG3 (e / equal)
                  :ARG4 (v / value
                        :ARG1-of (c / compute-01)
                        :mod (t / this)))))

# ::snt It is usually be used to compute posterior probabilities given observations.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (c / compute-01
            :ARG1 (p / probability
                  :mod (p2 / posterior)
                  :ARG1-of (g / give-01
                        :ARG2 (o / observe-01))))
      :mod (u2 / usual))

# ::snt Use these optimal solutions to construct an optimal solution for the original problem.
(u / use-01
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (s / solve-01)
            :mod (o / optimal)
            :mod (t2 / this))
      :ARG2 (c / construct-01
            :ARG0 y
            :ARG1 (t3 / thing
                  :ARG2-of (s2 / solve-01
                        :ARG1 (p / problem
                              :mod (o2 / original)))
                  :mod (o3 / optimal))))

# ::snt The vector space model has several disadvantages.
(d / disadvantage
      :quant (s / several)
      :domain (m / model
            :mod (s2 / space
                  :ARG1-of (v / vector-01))))

# ::snt Finally, the order in which the terms appear in the document is lost in the vector space representation.
(l / lose-02
      :li "-1"
      :ARG1 (o / order
            :ARG2-of (a / appear-01
                  :ARG1 (t / term)
                  :location (d / document)))
      :ARG1-of (c / cause-01
            :ARG0 (r / representation-02
                  :ARG1 (s / space
                        :mod (v / vector)))))

# ::snt In the vector space model a document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG2-of (v / vector-02))
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt A problem with overlapping subproblems means that the same subproblems may be used to solve many different larger problems.
(m / mean-01
      :ARG1 (p / problem
            :topic (o / overlap-01)))

# ::snt Terms are basically the words or any indexing unit used to identify the contents of a text.
(m / mean-01
      :ARG1 (t / term)
      :ARG2 (o / or
            :op1 (w / word)
            :op2 (u / unit
                  :ARG0-of (ii / index-01)
                  :mod (a / any)
                  :ARG1-of (u2 / use-01
                        :ARG2 (ii2 / identify-01
                              :ARG1 (t2 / thing
                                    :ARG1-of (c / contain-01
                                          :ARG0 (t3 / text)))))))
      :mod (b / basic))

# ::snt The definition of term is dependent on the application.
(d / depend-01
      :ARG0 (d2 / define-01
            :ARG1 (t / term))
      :ARG1 (a / apply-02))

# ::snt The peropos of inheritance in object oriented programming is to minimize the reuse of existing code without modification.
(p / peropos
      :domain (ii / inherit-01
            :location (p2 / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object))))
      :purpose (m / minimize-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / code
                        :ARG1-of (e / exist-01))
                  :manner (m2 / modify-01
                        :polarity -
                        :ARG1 c)))
      :ARG0-of m)

# ::snt Bayes' Theorem is a theorem of probability theory originally stated by the Reverend Thomas Bayes.
(t / theorem
      :topic (t2 / theory
            :mod (p / probability))
      :ARG1-of (s / state-01
            :ARG0 (p2 / person
                  :name (n / name
                        :op1 "Thomas"
                        :op2 "Bayes")
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (r / reverend)))
            :mod (o / original))
      :domain t
      :poss p2)

# ::snt However an object cannot be cast to a class which is no relative of it.
(c / contrast-01
      :ARG2 (p / possible-01
            :polarity -
            :ARG1 (c2 / cast-01
                  :ARG1 (o / object)
                  :ARG2 (c3 / class
                        :ARG1-of (r / relative-05
                              :polarity -
                              :ARG2 o)))))

# ::snt It is essentially a popularity meter.
(m / meter
      :mod (p / popularity)
      :domain (ii / it)
      :mod (e / essential))

# ::snt Several different ways have been developed of calculating these values (also known as term weights).
(d / develop-02
      :ARG1 (w / way
            :ARG1-of (d2 / differ-02)
            :quant (s / several)
            :manner-of (c / calculate-01
                  :ARG1 (v / value
                        :mod (t / this)
                        :ARG1-of (k / know-02
                              :ARG2 (t2 / thing
                                    :ARG2-of (w2 / weigh-01
                                          :ARG3 (t3 / term)))
                              :mod (a / also))))))

# ::snt Since the PageRank is the most important algorithms which is used in the Google engine.
(c / cause-01
      :ARG0 (a / algorithm
            :domain (r / rank-01
                  :ARG2 (p / page))
            :ARG1-of (u / use-01
                  :ARG2 (e / engine
                        :mod (c2 / company
                              :name (n / name
                                    :op1 "Google"))))
            :ARG1-of (h / have-degree-91
                  :ARG2 (ii / important-01
                        :ARG1 a)
                  :ARG3 (m / most))))

# ::snt If a term occurs in the document, the value will be non-zero in the vector.
(h / have-condition-91
      :ARG1 (z / zero
            :polarity -
            :domain (t / thing
                  :ARG2-of (v / value-01)))
      :ARG2 (b / be-located-at-91
            :ARG1 (t2 / term)
            :ARG2 (d / document)))

# ::snt And thus the method takes much less time than more naive methods.
(a / and
      :op2 (c / cause-01
            :ARG1 (t / take-10
                  :ARG0 (m / method)
                  :ARG1 (t2 / time
                        :ARG1-of (h / have-quant-91
                              :ARG3 (l / less
                                    :quant (m2 / much))
                              :ARG4 (m3 / method
                                    :ARG1-of (h2 / have-quant-91
                                          :ARG3 (m4 / more))
                                    :mod (n / naive)))))))

# ::snt In object oriented programming inheritance is also dependant on access level modifiers.
(d / depend-01
      :ARG0 (ii / inherit-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :ARG1 (p / person
            :ARG0-of (m / modify-01
                  :ARG1 (l / level
                        :mod (a / access-01))))
      :mod (a2 / also)
      :location (p2 / program-01
            :ARG1-of o
            :ARG2 o2))

# ::snt Bayes theorem can be used to compute the probability that a proposed diagnosis is correct.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (t / theorem
                  :name (n / name
                        :op1 "Bayes"))
            :ARG2 (c / compute-01
                  :ARG1 (p2 / probability
                        :mod (c2 / correct-02
                              :ARG1 (d / diagnose-01
                                    :ARG1-of (p3 / propose-01)))))))

# ::snt After this, it is using this to pick the best overall path.
(u / use-01
      :ARG0 (ii / it)
      :ARG1 (t / this)
      :ARG2 (p / pick-01
            :ARG0 ii
            :ARG1 (p2 / path
                  :mod (o / overall)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 p2)
                        :ARG3 (m / most))))
      :time (a / after
            :op1 t))

# ::snt In the vector space model a document is represented as a vector.
(r / represent-01
      :ARG1 (d / document)
      :ARG2 (t / thing
            :ARG2-of (v / vector-02))
      :location (m / model
            :mod (s / space
                  :mod (v2 / vector))))

# ::snt Inheritance is a basic concept in object oriented programming.
(c / concept
      :mod (b / basic)
      :topic (p / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :domain (ii / inherit-01))

# ::snt The limitations of the vector space model are thus.
(l / limit-01
      :ARG0 (m / model
            :mod (s / space
                  :mod (v / vector)))
      :mod (t / thus))

# ::snt It is also called the posterior probability because it is derived from or depends upon the specified value of B.
(c / cause-01
      :ARG0 (o / or
            :op1 (d / derive-01
                  :ARG1 (ii / it)
                  :ARG2 (v / value
                        :mod (v2 / variable
                              :name (n / name
                                    :op1 "B"))
                        :ARG1-of (s / specify-01)))
            :op2 (d2 / depend-01
                  :ARG0 ii
                  :ARG1 v))
      :ARG1 (c2 / call-01
            :ARG1 ii
            :ARG2 (p / probability
                  :mod (p2 / posterior))
            :mod (a / also)))

# ::snt Bayes theorem can be used to compute the probability that a proposed diagnosis is correct.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (t / theorem
                  :name (n / name
                        :op1 "Bayes"))
            :ARG2 (c / compute-01
                  :ARG1 (p2 / probability
                        :mod (c2 / correct-02
                              :ARG1 (d / diagnose-01
                                    :ARG1-of (p3 / propose-01)))))))

# ::snt It has no relationship to computer programming; instead it is a process of finding a satisfactory algorithm.
(m / multi-sentence
      :snt1 (r / relate-01
            :polarity -
            :ARG1 (ii / it)
            :ARG2 (p / program-01
                  :mod (c / computer)))
      :snt2 (p2 / process-02
            :ARG1 (f / find-01
                  :ARG1 (a / algorithm
                        :ARG1-of (s / satisfactory-03)))
            :domain (ii2 / it)
            :ARG1-of (ii3 / instead-of-91)))

# ::snt In probability theory, the prior and conditional probabilities of two random events are related by Bayes' theorem.
(r / relate-01
      :ARG1 (p / probability
            :time (p2 / prior)
            :mod (c / conditional)
            :domain (p3 / probability
                  :quant 2
                  :mod (r2 / random)))
      :ARG2 (t / theorem
            :poss (p4 / person
                  :name (n / name
                        :op1 "Bayes")))
      :topic (t2 / theory
            :mod (p5 / probability)))

# ::snt One of the best known schemes is tf-idf weighting, proposed by Salton, Wong and Yang.
(ii / include-91
      :ARG1 (w / weight-01
            :ARG2 (t / thing
                  :name (n / name
                        :op1 "TF-idf"))
            :ARG1-of (p / propose-01
                  :ARG0 (a / and
                        :op1 (p2 / person
                              :name (n2 / name
                                    :op1 "Salton"))
                        :op2 (p3 / person
                              :name (n3 / name
                                    :op1 "Wong"))
                        :op3 (p4 / person
                              :name (n4 / name
                                    :op1 "Yang")))))
      :ARG2 (s / scheme-01
            :ARG1-of (k / know-02
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s)
                        :ARG3 (m / most)))))

# ::snt It also provides a way to generalize du to the "is a" relationship between classes.
(p / provide-01
      :ARG0 (ii / it)
      :ARG1 (w / way
            :manner-of (g / generalize-01
                  :ARG0 ii
                  :ARG1 (r / relation-03
                        :ARG0 (c / class)
                        :ARG1 (a / amr-unknown))
                  :ARG2 c))
      :mod (a2 / also))

# ::snt The further down an inheritance tree you get, the more specific the classes become.
(c / correlate-91
      :ARG1 (m / more
            :ARG3-of (h / have-quant-91
                  :ARG1 (f / further
                        :ARG3-of (h2 / have-degree-91
                              :ARG1 (t / tree
                                    :mod (ii / inherit-01))
                              :ARG2 (l / long-03
                                    :ARG1 t)))))
      :ARG2 (m2 / more
            :ARG3-of (h3 / have-degree-91
                  :ARG1 (b / become-01
                        :ARG1 (c2 / class))
                  :ARG2 (s / specific-02
                        :ARG1 c2))))

# ::snt A document has representation as a vector.
(r / represent-01
      :ARG0 (d / document)
      :ARG1 (v / vector))

# ::snt It is similar to divide and conquer, however is differentiated as its subproblems are not independent.
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (a / and
                  :op1 (d / divide-02)
                  :op2 (c2 / conquer-01)))
      :ARG2 (d2 / differ-02
            :ARG1 ii
            :ARG1-of (c3 / cause-01
                  :ARG0 (d3 / depend-01
                        :polarity -
                        :ARG0 (p / problem
                              :poss ii)))))

# ::snt The differing application has a direct influence on what the definition of the term means.
(ii / influence-01
      :ARG0 (a / apply-02
            :ARG1-of (d / differ-02))
      :ARG1 (t / thing
            :ARG2-of (d2 / define-01
                  :ARG1 (t2 / term)))
      :ARG1-of (d3 / direct-02))

# ::snt The limitations of the vector space model are thus.
(l / limit-01
      :ARG0 (m / model
            :mod (s / space
                  :mod (v / vector)))
      :mod (t / thus))

# ::snt However, the key in Dynamic Programming is to determine the structure of optimal solutions.
(c / contrast-01
      :ARG2 (k / key-02
            :ARG1 (d / determine-01
                  :ARG1 (s / structure-01
                        :ARG1 (s2 / solution
                              :ARG1-of (o / optimal-02))))
            :ARG2 (p / program-01
                  :manner (d2 / dynamic))))

# ::snt A possible use for a vector space model is for retrieval and filtering of information.
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (m / model
                  :mod (s / space
                        :mod (v / vector)))
            :ARG2 (a / and
                  :op1 (r / retrieve-01
                        :ARG1 (ii / information))
                  :op2 (f / filter-02
                        :ARG1 ii))))

# ::snt It also provides a way to generalize du to the "is a" relationship between classes.
(p / provide-01
      :ARG0 (ii / it)
      :ARG1 (w / way
            :manner-of (g / generalize-01
                  :ARG0 ii
                  :ARG1 (r / relation-03
                        :ARG0 (c / class)
                        :ARG1 (a / amr-unknown))
                  :ARG2 c))
      :mod (a2 / also))

# ::snt It is "prior" in the sense that it does not take into account any information about B.
(s / spoil-01
      :ARG1 (ii / it)
      :ARG1-of (m / mean-01
            :ARG2 (t / take-into-account-04
                  :polarity -
                  :ARG0 ii
                  :ARG1 (ii2 / information
                        :mod (a / any)
                        :topic (t2 / thing
                              :name (n / name
                                    :op1 "B"))))))

# ::snt The method can be abused when people deliberately link to sites in order to raise a site's PageRank.
(p / possible-01
      :ARG1 (a / abuse-01
            :ARG1 (m / method)
            :condition (l / link-01
                  :ARG0 (p2 / person)
                  :ARG2 (s / site)
                  :manner (d / deliberate)
                  :purpose (r / raise-01
                        :ARG0 p2
                        :ARG1 (r2 / rank-01
                              :ARG1 (s2 / site)
                              :ARG2 (p3 / page))))))

# ::snt Driver backs into mom, stroller with child then drives off
(a / and
      :op1 (b / back-02
            :ARG0 (p / person
                  :ARG0-of (d / drive-01))
            :ARG1 (p2 / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (m / mom))))
      :op2 (s / stroller
            :accompanier (p3 / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 p
                        :ARG2 (c / child))))
      :op3 (d2 / drive-01
            :ARG0 p
            :ARG1 (o / off)
            :time (t / then)))

# ::snt Spain princess testifies in historic fraud probe
(t / testify-01
      :ARG0 (p / princess
            :mod (c / country
                  :name (n / name
                        :op1 "Spain")))
      :subevent-of (p2 / probe-01
            :ARG1 (d / defraud-01
                  :mod (h / history))))

# ::snt Senate approves Obama nominee to key appeals court
(a / approve-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate"))
      :ARG1 (p / person
            :ARG1-of (n2 / nominate-01
                  :ARG0 (p2 / person
                        :name (n3 / name
                              :op1 "Obama"))))
      :ARG2 (p3 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g2 / government-organization
                        :name (n4 / name
                              :op1 "Appeals"
                              :op2 "Court")
                        :ARG1-of (k / key-02)))))

# ::snt UN Rights Chief Presses Egypt on Morsi Detention
(p / press-01
      :ARG0 (p2 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 "UN"))
                  :ARG2 (c / chief
                        :topic (r / right-05))))
      :ARG1 (c2 / country
            :name (n2 / name
                  :op1 "Egypt"))
      :ARG2 (d / detain-01
            :ARG1 (p3 / person
                  :name (n3 / name
                        :op1 "Morsi"))))

# ::snt Senate confirms Janet Yellen as next Federal Reserve Chair
(c / confirm-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate"))
      :ARG1 (p / person
            :name (n2 / name
                  :op1 "Janet"
                  :op2 "Yellen")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g2 / government-organization
                        :name (n3 / name
                              :op1 "Federal"
                              :op2 "Reserve"))
                  :ARG2 (c2 / chairman)
                  :mod (n4 / next))))

# ::snt Syrian rebel groups battle each other in north
(b / battle-01
      :ARG0 (g / group
            :ARG0-of (r / rebel-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Syria")))
      :ARG1 g
      :location (n2 / north))

# ::snt Mayawati demands Presidents rule in Jammu and Kashmir
(d / demand-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Mayawati"))
      :ARG1 (r / rule-03
            :ARG0 (p2 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (p3 / president)))
            :location (a / and
                  :op1 (s / state
                        :name (n2 / name
                              :op1 "Jammu"))
                  :op2 (w / world-region
                        :name (n3 / name
                              :op1 "Kashmir")))))

# ::snt Uganda's president signs harsh anti-gay law
(s / sign-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Uganda"))
                  :ARG2 (p2 / president)))
      :ARG1 (l / law
            :ARG0-of (o / oppose-01
                  :ARG1 (g / gay-01))
            :ARG1-of (h2 / harsh-02)))

# ::snt Rocks, tear gas fly as Thai protests heat up
(f / fly-01
      :ARG1 (a / and
            :op1 (r / rod)
            :op2 (g / gas
                  :instrument-of (t / tear-03)))
      :time (h / heat-up-02
            :ARG1 (p / protest-01
                  :ARG0 (c / country
                        :name (n / name
                              :op1 "Thailand")))))

# ::snt Boston bomb suspect buried in Virginia cemetery
(b / bury-01
      :ARG1 (p / person
            :ARG2-of (s / suspect-01
                  :ARG1 (b2 / bomb-01
                        :location (c / city
                              :name (n / name
                                    :op1 "Boston")))))
      :ARG2 (c2 / cemetery
            :mod (s2 / state
                  :name (n2 / name
                        :op1 "Virginia"))))

# ::snt 6 killed in Philippines restaurant blast
(k / kill-01
      :ARG1 (p / person
            :quant 6)
      :ARG1-of (c / cause-01
            :ARG0 (b / blast-05
                  :ARG1 (r / restaurant
                        :location (c2 / country
                              :name (n / name
                                    :op1 "Philippines"))))))

# ::snt China army newspaper slams US's PRISM program
(s / slam-02
      :ARG0 (n / newspaper
            :mod (a / army)
            :mod (c / country
                  :name (n2 / name
                        :op1 "China")))
      :ARG1 (p / program
            :name (n3 / name
                  :op1 "PRISM")
            :poss (c2 / country
                  :name (n4 / name
                        :op1 "US"))))

# ::snt Silvio Berlusconi expelled from parliament
(e / expel-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Silvio"
                  :op2 "Berlusconi"))
      :ARG2 (g / government-organization
            :name (n2 / name
                  :op1 "Parliament")))

# ::snt Two killed in Bahrain car blast
(k / kill-01
      :ARG0 (b / blast-05
            :ARG1 (c / car)
            :location (c2 / country
                  :name (n / name
                        :op1 "Bahrain")))
      :ARG1 (p / person
            :quant 2))

# ::snt Russia warns it will 'respond' if interests in Ukraine attacked
(w / warn-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Russia"))
      :ARG1 (r / respond-01
            :ARG0 c
            :condition (a / attack-01
                  :ARG1 (ii / interest
                        :location (c2 / country
                              :name (n2 / name
                                    :op1 "Ukraine"))))))

# ::snt Mubarak retrial adjourned to June
(a / adjourn-01
      :ARG1 (r / retry-01
            :ARG1 (p / person
                  :name (n / name
                        :op1 "Mubarak")))
      :ARG3 (d / date-entity
            :month 6))

# ::snt US drone strike kills 11 in Pakistan
(k / kill-01
      :ARG0 (s / strike-01
            :ARG1 (d / drone)
            :mod (c / country
                  :name (n / name
                        :op1 "United"
                        :op2 "States")))
      :ARG1 (p / person
            :quant 11)
      :location (c2 / country
            :name (n2 / name
                  :op1 "Pakistan")))

# ::snt Egypt protesters defy cabinet threat
(d / defy-01
      :ARG0 (p / person
            :ARG0-of (p2 / protest-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Egypt")))
      :ARG1 (t / thing
            :ARG1-of (t2 / threaten-01
                  :ARG0 (c2 / cabinet))))

# ::snt Couple get married in Britain's first Scientology wedding
(m / marry-01
      :ARG1 (c / couple)
      :subevent-of (w / wed-01
            :ARG1 (r / religious-group
                  :name (n / name
                        :op1 "Scientology"))
            :ord (o / ordinal-entity
                  :value 1)
            :location (c2 / country
                  :name (n2 / name
                        :op1 "Britain"))))

# ::snt Russian Opposition Leader Placed Under House Arrest
(a / arrest-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "House"))
      :ARG1 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (o / Opposition))
            :mod (c / country
                  :name (n2 / name
                        :op1 "Russia"))))

# ::snt Senate confirms Janet Yellen as next Federal Reserve Chair
(c / confirm-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Senate"))
      :ARG1 (p / person
            :name (n2 / name
                  :op1 "Janet"
                  :op2 "Yellen")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (g2 / government-organization
                        :name (n3 / name
                              :op1 "Federal"
                              :op2 "Reserve"))
                  :ARG2 (c2 / chairman)
                  :mod (n4 / next))))

# ::snt Qatari emir hands power to son Tamim
(h / hand-01
      :ARG0 (p / person
            :ARG0-of (h2 / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Qatar"))
                  :ARG2 (e / emir)))
      :ARG1 (p2 / power)
      :ARG2 (p3 / person
            :name (n2 / name
                  :op1 "Tamim")
            :ARG0-of (h3 / have-rel-role-91
                  :ARG2 (s / son))))

# ::snt Philippines typhoon death toll rises above 5,000
(r / rise-01
      :ARG1 (t / toll
            :mod (d / die-01)
            :poss (t2 / typhoon
                  :name (n / name
                        :op1 "Philippines")))
      :ARG4 (a / above
            :op1 5000))

# ::snt Egypt braces for Friday of anger after bloody crackdown
(b / brace-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "Egypt"))
      :ARG2 (a / anger-01
            :ARG1 c)
      :time (d / date-entity
            :weekday (f / friday))
      :time (a2 / after
            :op1 (c2 / crack-down-06
                  :manner (b2 / bloody))))

# ::snt Red Sox beat Tigers to reach World Series
(b / beat-03
      :ARG0 (t / team
            :name (n / name
                  :op1 "Red"
                  :op2 "Sox"))
      :ARG1 (t2 / team
            :name (n2 / name
                  :op1 "Tigers"))
      :purpose (r / reach-01
            :ARG0 t
            :ARG1 (g / game
                  :name (n3 / name
                        :op1 "World"
                        :op2 "Series"))))

# ::snt China lands robot rover on moon
(l / land-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (r / rover
            :mod (r2 / robot))
      :location (m / moon))

# ::snt Ukraine's parliament votes to dismiss president
(v / vote-01
      :ARG0 (p / parliament
            :mod (c / country
                  :name (n / name
                        :op1 "Ukraine")))
      :ARG1 (d / dismiss-01
            :ARG0 p
            :ARG1 (p2 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 c
                        :ARG2 (p3 / president)))))

# ::snt Venezuela lawmakers brawl over election
(b / brawl-01
      :ARG0 (p / person
            :ARG0-of (l / legislate-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Venezuela")))
      :ARG2 (e / elect-01))

# ::snt North Korea warns foreigners in South to evacuate
(w / warn-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "North"
                  :op2 "Korea"))
      :ARG1 (e / evacuate-01
            :ARG2 (p / person
                  :mod (f / foreign)
                  :location (c2 / country
                        :name (n2 / name
                              :op1 "South"))))
      :ARG2 p)

# ::snt Captain of capsized S Korean Ferry Arrested
(a / arrest-01
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (f / ferry
                        :name (n / name
                              :op1 "S"
                              :op2 "Korea"
                              :op3 "Ferry")
                        :ARG1-of (c / capsize-01))
                  :ARG2 (c2 / captain))))

# ::snt Cars plunge into river as US bridge collapses
(p / plunge-01
      :ARG1 (c / car)
      :ARG4 (r / river)
      :time (c2 / collapse-01
            :ARG1 (b / bridge
                  :mod (c3 / country
                        :name (n / name
                              :op1 "US")))))

# ::snt Death toll in Syria over 100,000 so far
(t / toll
      :mod (d / die-01)
      :quant (o / over
            :op1 100000)
      :location (c / country
            :name (n / name
                  :op1 "Syria"))
      :time (s / so-far))

# ::snt Communist rebels kill eight Philippine police
(k / kill-01
      :ARG0 (p / person
            :ARG0-of (r / rebel-01)
            :mod (p2 / political-movement
                  :name (n / name
                        :op1 "communism")))
      :ARG1 p
      :quant 8
      :ARG0-of (h / have-org-role-91
            :ARG1 (c / country
                  :name (n2 / name
                        :op1 "Philippines"))
            :ARG2 (p3 / police)))

# ::snt Egypt's Morsi faces trial for prison break
(f / face-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Morsi")
            :mod (c / country
                  :name (n2 / name
                        :op1 "Egypt")))
      :ARG1 (t / try-02
            :ARG1 p
            :ARG3 (b / break-18
                  :ARG0 p
                  :ARG1 (p2 / prison))))

# ::snt Iran nuclear talks enter crucial third day
(e / enter-01
      :ARG0 (t / talk-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Iran"))
            :ARG1 (n2 / nucleus))
      :ARG1 (d / day
            :ord (o / ordinal-entity
                  :value 3)
            :mod (c2 / crucial)))

# ::snt Jodi Arias eligible for death penalty, jury says
(s / say-01
      :ARG0 (j / jury)
      :ARG1 (q / qualify-02
            :ARG1 (p / person
                  :name (n / name
                        :op1 "Jodi"
                        :op2 "Arias"))
            :ARG2 (p2 / penalize-01
                  :manner (d / die-01))))

# ::snt Thailand's army declares martial law, denies coup
(a / and
      :op1 (d / declare-02
            :ARG0 (a2 / army
                  :poss (c / country
                        :name (n / name
                              :op1 "Thailand")))
            :ARG1 (l / law
                  :mod (m / martial)))
      :op2 (d2 / deny-01
            :ARG0 a2
            :ARG1 (c2 / coup-01
                  :ARG0 a2)))

# ::snt Woman dies riding roller coaster at Texas amusement park
(d / die-01
      :ARG1 (w / woman)
      :manner (r / ride-01
            :ARG0 w
            :ARG1 (r2 / roller-coaster)
            :location (a / amusement-park
                  :location (s / state
                        :name (n / name
                              :op1 "Texas")))))

# ::snt Nobel Prize winning author Doris Lessing dies
(d / die-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Doris"
                  :op2 "Lessing")
            :ARG0-of (a / author-01)
            :ARG1-of (w / win-01
                  :ARG2 (a2 / award
                        :name (n2 / name
                              :op1 "Nobel"
                              :op2 "Prize")))))

# ::snt At least 100 dead as typhoon batters Philippines
(d / die-01
      :ARG1 (p / person
            :quant (a / at-least
                  :op1 100))
      :ARG1-of (c / cause-01
            :ARG0 (b / batter-01
                  :ARG0 (t / typhoon)
                  :ARG1 (c2 / country
                        :name (n / name
                              :op1 "Philippines")))))

# ::snt India's first post office savings bank ATM inaugurated in Chennai
(ii / inaugurate-01
      :ARG1 (b / bank
            :name (n / name
                  :op1 "ATM")
            :mod (s / savings)
            :mod (p / post-office)
            :ord (o / ordinal-entity
                  :value 1)
            :poss (c / country
                  :name (n2 / name
                        :op1 "India")))
      :location (c2 / city
            :name (n3 / name
                  :op1 "Chennai")))

# ::snt Israel agrees to 24-hour Gaza truce
(a / agree-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Israel"))
      :ARG1 (t / truce
            :location (c2 / country-region
                  :name (n2 / name
                        :op1 "Gaza"))
            :duration (t2 / temporal-quantity
                  :quant 24
                  :unit (h / hour))))

# ::snt Twitter says images blocked in Venezuela
(s / say-01
      :ARG0 (p / publication
            :name (n / name
                  :op1 "Twitter"))
      :ARG1 (b / block-01
            :ARG1 (ii / image)
            :location (c / country
                  :name (n2 / name
                        :op1 "Venezuela"))))

# ::snt Earthquake of 6.9 magnitude strikes off Indonesia island
(s / strike-01
      :ARG1 (ii / island
            :name (n / name
                  :op1 "Indonesia"))
      :ARG2 (e / earthquake
            :quant (s2 / seismic-quantity
                  :quant 6.9)))

# ::snt High court checks President's recess appointment power
(c / check-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "High"
                  :op2 "Court"))
      :ARG1 (p / power
            :mod (r / recess-02
                  :ARG0 (p2 / person
                        :ARG0-of (h / have-org-role-91
                              :ARG2 (p3 / president)))
                  :ARG1 (a / appoint-01
                        :ARG0 p2))))

# ::snt British stuntman dies in wingsuit mishap in Alps
(d / die-01
      :ARG1 (p / person
            :mod (c / country
                  :name (n / name
                        :op1 "Britain"))
            :ARG0-of (h / have-org-role-91
                  :ARG2 (s / stuntman)))
      :ARG1-of (c2 / cause-01
            :ARG0 (m / mishap
                  :mod (w / wingsuit))
            :location (m2 / mountain
                  :name (n2 / name
                        :op1 "Alps"))))

# ::snt Eurozone debt crisis is over, says France's President
(s / say-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "France"))
                  :ARG2 (p2 / president)))
      :ARG1 (o / over-01
            :ARG1 (c2 / crisis
                  :mod (d / debt)
                  :poss (o2 / organization
                        :name (n2 / name
                              :op1 "Eurozone")))))

# ::snt White diamond fetches record $34m at HK auction
(f / fetch-01
      :ARG0 (d / diamond
            :ARG1-of (w / white-03))
      :ARG1 (m / monetary-quantity
            :quant 34000000
            :unit (d2 / dollar)
            :mod (r / record))
      :location (a / auction-01
            :location (c / city
                  :name (n / name
                        :op1 "HK"))))

# ::snt Indian building collapse deaths rise to 14
(r / rise-01
      :ARG1 (d / die-01
            :ARG1 (p / person
                  :location (c / country
                        :name (n / name
                              :op1 "India")))
            :ARG1-of (c2 / cause-01
                  :ARG0 (c3 / collapse-01
                        :ARG1 (b / building))))
      :ARG4 14)

# ::snt CII endorses underage marriage
(e / endorse-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "CII"))
      :ARG1 (m / marry-01
            :mod (u / underage)))

# ::snt Treasury proposes 1.5% income tax raise in budget
(p / propose-01
      :ARG0 (g / government-organization
            :name (n / name
                  :op1 "Treasury"))
      :ARG1 (r / raise-01
            :ARG1 (t / tax-01
                  :ARG3 (ii / income))
            :ARG2 (p2 / percentage-entity
                  :value 1.5))
      :prep-in (b / budget))

# ::snt EU Ministers of Employment and Social policy to discuss employment boosting strategies
(d / discuss-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 "EU"))
                  :ARG2 (m / minister
                        :topic (a / and
                              :op1 (e / employ-01)
                              :op2 (s / social)))))
      :ARG1 (s2 / strategy
            :ARG0-of (b / boost-01
                  :ARG1 (e2 / employ-01))))

# ::snt Hamas calls on Hezbollah to pull forces out of Syria
(c / call-03
      :ARG0 (p / person
            :name (n / name
                  :op1 "Hamas"))
      :ARG1 (p2 / pull-out-02
            :ARG1 (f / force)
            :ARG2 (c2 / country
                  :name (n2 / name
                        :op1 "Syria")))
      :ARG2 (p3 / political-party
            :name (n3 / name
                  :op1 "Hezbollah")))

# ::snt China welcomes US, Russia deal on Syria chemical weapons
(w / welcome-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (d / deal-01
            :ARG0 (a / and
                  :op1 (c2 / country
                        :name (n2 / name
                              :op1 "US"))
                  :op2 (c3 / country
                        :name (n3 / name
                              :op1 "Russia")))
            :ARG1 (c4 / country
                  :name (n4 / name
                        :op1 "Syria"))
            :ARG2 (w2 / weapon
                  :mod (c5 / chemical))))

# ::snt 13:23 PSNI 'failed RUC officer families'
(f / family
      :ARG1-of (f2 / fail-01)
      :ARG0-of (h / have-org-role-91
            :ARG1 (g / government-organization
                  :name (n / name
                        :op1 "RUC"))
            :ARG2 (o / officer))
      :ARG0-of (h2 / have-org-role-91
            :ARG1 g)
      :time (d / date-entity
            :time "13:23"))

# ::snt Stocks edge lower after earnings from retailers
(e / edge-01
      :ARG1 (s / stock)
      :ARG2 (l / lower-05)
      :time (a / after
            :op1 (e2 / earnings
                  :source (r / retailer))))

# ::snt Police helicopter crashes on top of bar in Glasgow
(c / crash-01
      :ARG1 (h / helicopter
            :poss (p / police))
      :location (t / top
            :part-of (b / bar
                  :location (c2 / city
                        :name (n / name
                              :op1 "Glasgow")))))

# ::snt US, UN up pressure on Israel over Gaza
(u / up-01
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "US"))
            :op2 (o / organization
                  :name (n2 / name
                        :op1 "UN")))
      :ARG1 (p / pressure-01
            :ARG0 a
            :ARG1 (c2 / country
                  :name (n3 / name
                        :op1 "Israel"))
            :ARG2 (c3 / country-region
                  :name (n4 / name
                        :op1 "Gaza"))))

# ::snt Australian PM confident sounds are from Flight 370
(s / sound
      :ARG1-of (c / confident-01)
      :source (a / aircraft-type
            :name (n / name
                  :op1 "Flight"
                  :op2 370))
      :mod (c2 / country
            :name (n2 / name
                  :op1 "Australia"))
      :topic (m / minister
            :mod (p / prime)))

# ::snt Mt Gox finds 200,000 'forgotten' bitcoins
(f / find-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Mt"
                  :op2 "Gox"))
      :ARG1 (m / monetary-quantity
            :quant 200000
            :unit (b / bitcoins)
            :ARG1-of (f2 / forget-01)))

# ::snt Mandela's condition has 'worsened over past 48 hours'
(w / worsen-01
      :ARG1 (c / condition
            :poss (p / person
                  :name (n / name
                        :op1 "Mandela")))
      :time (b / before
            :op1 (n2 / now)
            :duration (t / temporal-quantity
                  :quant 48
                  :unit (h / hour))))

# ::snt China lands robot rover on moon
(l / land-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (r / rover
            :mod (r2 / robot))
      :location (m / moon))

# ::snt Two teenagers arrested after string of sex attacks on Manchester University campus
(a / arrest-01
      :ARG1 (t / teenager
            :quant 2)
      :time (a2 / after
            :op1 (a3 / attack-01
                  :ARG1 t
                  :manner (s / sex-01)
                  :quant (s2 / string)
                  :location (c / campus
                        :poss (u / university
                              :name (n / name
                                    :op1 "Manchester"
                                    :op2 "University"))))))

# ::snt Philippe ascends throne of divided Belgium
(a / ascends-02
      :ARG0 (p / person
            :name (n / name
                  :op1 "Philippe"))
      :ARG1 (t / throne
            :poss (c / country
                  :name (n2 / name
                        :op1 "Belgium")
                  :ARG1-of (d / divide-02))))

# ::snt India's Anti-Graft Party Forms Government in Delhi
(f / form-01
      :ARG0 (p / political-party
            :name (n / name
                  :op1 "Anti-Graft"
                  :op2 "Party")
            :mod (c / country
                  :name (n2 / name
                        :op1 "India")))
      :ARG1 (g / government-organization
            :ARG0-of (g2 / govern-01))
      :location (c2 / city
            :name (n3 / name
                  :op1 "Delhi")))

# ::snt Spanish government approves tight restrictions on abortion
(a / approve-01
      :ARG0 (g / government-organization
            :ARG0-of (g2 / govern-01
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Spain"))))
      :ARG1 (r / restrict-01
            :ARG1 (a2 / abort-01)
            :ARG1-of (t / tight-05)))

# ::snt UN urges Syria gas attack inspection
(u / urge-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "UN"))
      :ARG1 (c / country
            :name (n2 / name
                  :op1 "Syria"))
      :ARG2 (ii / inspect-01
            :ARG1 (a / attack-01
                  :ARG1 (g / gas))))

# ::snt Shots fired at German ambassador's residence in Athens
(f / fire-01
      :ARG1 (s / shot)
      :destination (r / reside-01
            :ARG0 (a / ambassador
                  :mod (c / country
                        :name (n / name
                              :op1 "Germany")))
            :ARG1 (c2 / city
                  :name (n2 / name
                        :op1 "Athens"))))

# ::snt Ukraine's opposition chief wants more protests
(w / want-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Ukraine"))
                  :ARG2 (c2 / chief
                        :ARG0-of (o / oppose-01))))
      :ARG1 (p2 / protest-01
            :quant (m / more)))

# ::snt Okla. inmate dies of heart attack after botched execution
(d / die-01
      :ARG1 (ii / inmate
            :location (s / state
                  :name (n / name
                        :op1 "Oklahoma")))
      :ARG1-of (c / cause-01
            :ARG0 (h / heart-attack))
      :time (a / after
            :op1 (e / execute-01
                  :ARG1 ii
                  :ARG1-of (b / botch-01))))

# ::snt Italian President Napolitano elected for second term
(e / elect-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Napolitano")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "Italy"))
                  :ARG2 (p2 / president)))
      :ARG2 (t / term
            :ord (o / ordinal-entity
                  :value 2)))

# ::snt Hundreds believed injured in Texas fertiliser plant blast
(b / believe-01
      :ARG1 (ii / injure-01
            :ARG0 (b2 / blast-05
                  :ARG1 (p / plant
                        :ARG0-of (p2 / plant-01
                              :ARG1 (f / fertilize-01))
                        :location (s / state
                              :name (n / name
                                    :op1 "Texas"))))
            :ARG1 (p3 / person
                  :quant (m / multiple
                        :op1 100))))

# ::snt Saudi Man Traveling With Pressure Cooker Arrested
(a / arrest-01
      :ARG1 (m / man
            :mod (c / country
                  :name (n / name
                        :op1 "Saudi"
                        :op2 "Arabia"))
            :ARG0-of (t / travel-01
                  :accompanier (t2 / thing
                        :ARG0-of (c2 / cook-01
                              :ARG1 (p / pressure))))))

# ::snt North Korea says detained American tourist to face trial
(s / say-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "North"
                  :op2 "Korea"))
      :ARG1 (d / detain-01
            :ARG1 (p / person
                  :ARG0-of (t / tour-01)
                  :mod (c2 / country
                        :name (n2 / name
                              :op1 "America")))
            :purpose (f / face-01
                  :ARG0 p
                  :ARG1 (t2 / try-02
                        :ARG1 p))))

# ::snt Thai protesters call general strike
(c / call-03
      :ARG0 (p / person
            :ARG0-of (p2 / protest-01)
            :mod (c2 / country
                  :name (n / name
                        :op1 "Thailand")))
      :ARG1 (s / strike-02
            :ARG1-of (g / general-02)))

# ::snt Egypt announces one-month state of emergency nationwide
(a / announce-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Egypt"))
      :ARG1 (s / state
            :mod (e / emergency)
            :duration (t / temporal-quantity
                  :quant 1
                  :unit (m / month))
            :location (n2 / nationwide)))

# ::snt Across US, people rally for 'Justice for Trayvon'
(r / rally-01
      :ARG0 (p / person)
      :ARG2 (j / justice
            :beneficiary (p2 / person
                  :name (n / name
                        :op1 "Trayvon")))
      :location (a / across
            :op1 (c / country
                  :name (n2 / name
                        :op1 "US"))))

# ::snt UNICEF calls for immediate safe access to women, children in Homs
(c / call-03
      :ARG0 (o / organization
            :name (n / name
                  :op1 "UNICEF"))
      :ARG1 (a / access-01
            :ARG1 (a2 / and
                  :op1 (w / woman)
                  :op2 (c2 / child)
                  :location (c3 / city
                        :name (n2 / name
                              :op1 "Homs")))
            :ARG0-of (s / safe-01)
            :time (ii / immediate)))

# ::snt Redford addresses PC convention ahead of leadership review
(a / address-03
      :ARG0 (p / person
            :name (n / name
                  :op1 "Redford"))
      :ARG1 (c / convention
            :mod (c2 / correct-02
                  :mod (p2 / politics)))
      :time (a2 / ahead
            :op1 (r / review-01
                  :ARG1 (l / lead-02))))

# ::snt Hagel laments "political" changes to US defence budget
(l / lament-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Hagel"))
      :ARG1 (c / change-01
            :ARG1 (b / budget-01
                  :ARG2 (d / defend-01
                        :ARG1 (c2 / country
                              :name (n2 / name
                                    :op1 "US"))))
            :ARG2 (p2 / politics)))

# ::snt Sony to axe PC unit in major business overhaul
(a / axe-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Sony"))
      :ARG1 (u / unit
            :mod (p / product
                  :name n
                  :op1 "PC"))
      :subevent-of (o / overhaul-01
            :ARG0 c
            :ARG1 (b / business)
            :ARG1-of (m / major-02)))

# ::snt Police: Gunman killed 6 in California shootings
(s / say-01
      :ARG0 (p / police)
      :ARG1 (k / kill-01
            :ARG0 (g / gunman)
            :ARG1 (p2 / person
                  :quant 6)
            :ARG1-of (c / cause-01
                  :ARG0 (s2 / shoot-02
                        :location (s3 / state
                              :name (n / name
                                    :op1 "California"))))))

# ::snt North Korea deports detained US war veteran
(d / deports-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "North"
                  :op2 "Korea"))
      :ARG1 (v / veteran
            :mod (w / war)
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "US")))
      :ARG1-of (d2 / detain-01))

# ::snt Searchers hoping pings come from lost Malaysian airliner
(h / hope-01
      :ARG0 (p / person
            :ARG0-of (s / search-01))
      :ARG1 (c / come-03
            :ARG1 (p2 / pings)
            :ARG2 (a / airliner
                  :mod (c2 / country
                        :name (n / name
                              :op1 "Malaysia"))
                  :ARG1-of (l / lose-02))))

# ::snt Mandela's family thanks nation and world for support
(t / thank-01
      :ARG0 (f / family
            :ARG1-of (h / have-org-role-91
                  :ARG0 (p / person
                        :name (n / name
                              :op1 "Mandela"))
                  :ARG2 (m / member)))
      :ARG1 (a / and
            :op1 (n2 / nation)
            :op2 (w / world))
      :ARG2 (s / support-01
            :ARG0 a))

# ::snt Zimmerman acquitted in slaying
(a / acquit-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Zimmerman"))
      :ARG2 (s / slay-01
            :ARG0 p))

# ::snt Ukraine rivals sign deal to end crisis
(s / sign-02
      :ARG0 (c / country
            :ARG0-of (r / rival-01
                  :name (n / name
                        :op1 "Ukraine"))
            :ARG1-of r)
      :ARG1 (d / deal-01
            :ARG2 (e / end-01
                  :ARG0 c
                  :ARG1 (c2 / crisis))))

# ::snt Obama urges military action against Syria, but will seek Congress' OK
(c / contrast-01
      :ARG1 (u / urge-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Obama"))
            :ARG1 (a / action
                  :mod (m / military)
                  :prep-against (c2 / country
                        :name (n2 / name
                              :op1 "Syria"))))
      :ARG2 (s / seek-01
            :ARG0 p
            :ARG1 (o / okay-01
                  :ARG0 (g / government-organization
                        :name (n3 / name
                              :op1 "Congress"))
                  :ARG1 a)))

# ::snt Syrian prime minister survives assassination attempt
(s / survive-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Syria"))
                  :ARG2 (m / minister
                        :mod (p2 / prime))))
      :ARG1 (a / assassinate-01
            :ARG1 p))

# ::snt UK urges countries over Syria aid
(u / urge-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "UK"))
      :ARG1 (c2 / country)
      :ARG2 (a / aid-01
            :ARG0 (c3 / country
                  :name (n2 / name
                        :op1 "Syria"))))

# ::snt Jordan elected to UN security council seat that Saudi Arabia rejected
(e / elect-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "Jordan"))
      :ARG2 (s / seat
            :ARG2-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n2 / name
                              :op1 "UN"
                              :op2 "Security"
                              :op3 "Council"))))
      :ARG1-of (r / reject-01
            :ARG0 (c2 / country
                  :name (n3 / name
                        :op1 "Saudi"
                        :op2 "Arabia"))))

# ::snt Crisis-hit Maldives holds new presidential poll
(h / hold-04
      :ARG0 (c / country
            :name (n / name
                  :op1 "Maldives")
            :ARG1-of (h2 / hit-01
                  :ARG0 (c2 / crisis)))
      :ARG1 (p / poll-01
            :ARG2 (p2 / president)
            :ARG1-of (n2 / new-01)))

# ::snt More than 60 killed at Iraq funeral
(k / kill-01
      :ARG1 (p / person
            :quant (m / more-than
                  :op1 60))
      :location (f / funeral
            :mod (c / country
                  :name (n / name
                        :op1 "Iraq"))))

# ::snt Peaceful anti-G8 protest held in Belfast
(h / hold-04
      :ARG1 (p / protest-01
            :ARG1 (o / organization
                  :name (n / name
                        :op1 "G8"))
            :mod (p2 / peace))
      :location (c / city
            :name (n2 / name
                  :op1 "Belfast")))

# ::snt George Zimmerman Verdict Propels Cable News Into Talkradio Mode
(p / Propels-01
      :ARG0 (v / verdict
            :poss (p2 / person
                  :name (n / name
                        :op1 "George"
                        :op2 "Zimmerman")))
      :ARG1 (b / broadcast-program
            :name (n2 / name
                  :op1 "Cable"
                  :op2 "News"))
      :ARG2 (ii / into
            :op1 (m / mode
                  :mod (t / talkradio))))

# ::snt Six rescued after boat capsizes in Dublin Bay
(r / rescue-01
      :ARG1 (p / person
            :quant 6)
      :time (a / after
            :op1 (c / capsize-01
                  :ARG1 (b / boat)
                  :location (b2 / bay
                        :name (n / name
                              :op1 "Dublin"
                              :op2 "Bay")))))

# ::snt Mandela in Hospital for 3rd Day
(b / be-located-at-91
      :ARG1 (p / person
            :name (n / name
                  :op1 "Mandela"))
      :ARG2 (h / hospital)
      :duration (d / day
            :ord (o / ordinal-entity
                  :value 3)))

# ::snt Egypt: Protesters storm Muslim Brotherhood's HQ
(s / storm-02
      :ARG0 (p / person
            :ARG0-of (p2 / protest-01))
      :ARG1 (h / headquarters
            :poss (o / organization
                  :name (n / name
                        :op1 "Muslim"
                        :op2 "Brotherhood")))
      :location (c / country
            :name (n2 / name
                  :op1 "Egypt")))

# ::snt Saudi women drive in protest with little problem
(d / drive-01
      :ARG0 (w / woman
            :mod (c / country
                  :name (n / name
                        :op1 "Saudi"
                        :op2 "Arabia")))
      :purpose (p / protest-01
            :ARG0 w)
      :manner (p2 / problem
            :mod (l / little)))

# ::snt Hollande arrives for US state visit
(a / arrive-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Hollande"))
      :purpose (v / visit-01
            :ARG0 p
            :ARG1 (s / state
                  :poss (c / country
                        :name (n2 / name
                              :op1 "US")))))

# ::snt President Obama warns Russia to stay out of Ukraine
(w / warn-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama")
            :ARG0-of (h / have-org-role-91
                  :ARG2 (p2 / president)))
      :ARG1 (s / stay-01
            :ARG1 (c / country
                  :name (n2 / name
                        :op1 "Russia"))
            :ARG3 (o / out-06
                  :ARG1 c
                  :ARG2 (c2 / country
                        :name (n3 / name
                              :op1 "Ukraine"))))
      :ARG2 c)

# ::snt Fed expected to maintain stimulus
(e / expect-01
      :ARG1 (m / maintain-01
            :ARG0 (g / government-organization
                  :name (n / name
                        :op1 "Fed"))
            :ARG1 (s / stimulus)))

# ::snt The impact of sanctions on Russia
(ii / impact-01
      :ARG0 (s / sanction-02
            :ARG1 (c / country
                  :name (n / name
                        :op1 "Russia"))))

# ::snt South Korean Soldier Kills Comrades And Flees
(a / and
      :op1 (k / kill-01
            :ARG0 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country
                              :name (n / name
                                    :op1 "South"
                                    :op2 "Korea"))
                        :ARG2 (s / soldier)))
            :ARG1 (c2 / comrade))
      :op2 (f / Flee))

# ::snt Worker dies at World Cup stadium
(d / die-01
      :ARG1 (p / person
            :ARG0-of (w / work-01))
      :location (s / stadium
            :mod (g / game
                  :name (n / name
                        :op1 "World"
                        :op2 "Cup"))))

# ::snt How does world's cheapest car do in crash test?
(d / do-02
      :ARG0 (c / car
            :ARG1-of (h / have-degree-91
                  :ARG2 (c2 / cheap-02
                        :ARG1 c)
                  :ARG3 (m / most)
                  :ARG5 (w / world)))
      :ARG1 (t / test-01
            :ARG1 c
            :ARG2 (c3 / crash-01))
      :manner (a / amr-unknown))

# ::snt Debt inspectors reach agreement with Greece
(r / reach-01
      :ARG0 (p / person
            :ARG0-of (ii / inspect-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Debt")))
      :ARG1 (a / agree-01
            :ARG0 p
            :ARG2 (c2 / country
                  :name (n2 / name
                        :op1 "Greece"))))

# ::snt Murray wins Wimbledon title ends Britains 77year agony
(e / end-01
      :ARG0 (w / win-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 "Murray"))
            :ARG1 (t / title
                  :subevent-of (e2 / event
                        :name (n2 / name
                              :op1 "Wimbledon"))))
      :ARG1 (a / agony
            :duration (t2 / temporal-quantity
                  :quant 77
                  :unit (y / year))
            :poss (p2 / person
                  :mod (c / country
                        :name (n3 / name
                              :op1 "Britain")))))

# ::snt Polling stations open at Ukrainian presidential election
(o / open-01
      :ARG1 (s / station
            :instrument-of (p / poll-01))
      :time (e / elect-01
            :ARG1 (p2 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country
                              :name (n / name
                                    :op1 "Ukraine"))
                        :ARG2 (p3 / president)))))

# ::snt What we know so far about chemical weapons in Syria's civil war
(t / thing
      :ARG1-of (k / know-01
            :ARG0 (w / we)
            :time (s / so-far)
            :topic (w2 / weapon
                  :mod (c / chemical)
                  :location (w3 / war
                        :mod (c2 / civil)
                        :poss (c3 / country
                              :name (n / name
                                    :op1 "Syria"))))))

# ::snt New major earthquake rocks southwest Pakistan
(r / rock-01
      :ARG0 (e / earthquake
            :ARG1-of (m / major-02)
            :ARG1-of (n / new-01))
      :ARG1 (s / southwest
            :part-of (c / country
                  :name (n2 / name
                        :op1 "Pakistan"))))

# ::snt Kremlin: Putin yet to decide on using Russian troops in Ukraine
(s / say-01
      :ARG0 (p / publication
            :name (n / name
                  :op1 "Kremlin"))
      :ARG1 (h / have-11
            :ARG0 (p2 / person
                  :name (n2 / name
                        :op1 "Putin"))
            :ARG1 (y / yet)
            :ARG2 (d / decide-01
                  :ARG0 p2
                  :ARG1 (u / use-01
                        :ARG0 p2
                        :ARG1 (t / troop
                              :mod (c / country
                                    :name (n3 / name
                                          :op1 "Russia")))
                        :location (c2 / country
                              :name (n4 / name
                                    :op1 "Ukraine"))))))

# ::snt North Korean leader sends 'special envoy' to China
(s / send-01
      :ARG0 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "North"
                              :op2 "Korea"))))
      :ARG1 (e / envoy
            :ARG1-of (s2 / special-02))
      :ARG2 (c2 / country
            :name (n2 / name
                  :op1 "China")))

# ::snt Turkish PM Erdogan says "duty" to order crackdown on Istanbul park protest
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Erdogan")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "Turkey"))
                  :ARG2 (m / minister
                        :mod (p2 / prime))))
      :ARG1 (o / obligate-01
            :ARG1 p
            :ARG2 (o2 / order-01
                  :ARG0 p
                  :ARG2 (c2 / crack-down-06
                        :ARG1 (p3 / protest-01
                              :location (p4 / park
                                    :location c))))))

# ::snt Pope urges action on climate change in draft encyclical
(u / urge-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Pope"))
      :ARG2 (a / act-02
            :ARG1 (c / change-01
                  :ARG1 (c2 / climate)))
      :medium (e / encyclical
            :ARG1-of (d / draft-01)))

# ::snt Singapore shares open 0.19% higher on Thursday
(o / open-07
      :ARG1 (s / share
            :mod (c / country
                  :name (n / name
                        :op1 "Singapore")))
      :ARG3 (p / percentage-entity
            :value 0.19
            :ARG1-of (h / have-degree-91
                  :ARG2 (h2 / high-02
                        :ARG1 p)
                  :ARG3 (m / more)))
      :time (d / date-entity
            :weekday (t / thursday)))

# ::snt Who was 'Jihadi John?'
(p / person
      :name (n / name
            :op1 "Jihadi"
            :op2 "John")
      :domain (a / amr-unknown))

# ::snt Iran, IAEA officials meet ahead of March nuclear deadline: ISNA
(s / say-01
      :ARG0 (p / publication
            :name (n / name
                  :op1 "ISNA"))
      :ARG1 (m / meet-03
            :ARG0 (a / and
                  :op1 (c / country
                        :name (n2 / name
                              :op1 "Iran"))
                  :op2 (p2 / person
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (o / organization
                                    :name (n3 / name
                                          :op1 "IAEA"))
                              :ARG2 (o2 / official))))
            :time (a2 / ahead
                  :op1 (d / deadline
                        :mod (n4 / nucleus)
                        :time (d2 / date-entity
                              :month 3)))))

# ::snt Headlines in several Iranian newspapers on Oct 19
(h / headline-01
      :location (n / newspaper
            :mod (c / country
                  :name (n2 / name
                        :op1 "Iran"))
            :quant (s / several))
      :time (d / date-entity
            :day 19
            :month 10))

# ::snt Bombings kill 19 people in Iraq
(k / kill-01
      :ARG0 (b / bomb-01)
      :ARG1 (p / person
            :quant 19)
      :location (c / country
            :name (n / name
                  :op1 "Iraq")))

# ::snt US Attorney general Eric Holder to resign
(r / resign-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Eric"
                  :op2 "Holder")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "US"))
                  :ARG2 (a / attorney
                        :mod (g / general)))))

# ::snt U.S., EU Boost Sanctions On Russia
(b / boost-01
      :ARG0 (a / and
            :op1 (c / country
                  :name (n / name
                        :op1 "U.S."))
            :op2 (o / organization
                  :name (n2 / name
                        :op1 "EU")))
      :ARG1 (s / sanction-02
            :ARG1 (c2 / country
                  :name (n3 / name
                        :op1 "Russia"))))

# ::snt 10 Things to Know for Thursday
(t / thing
      :quant 10
      :ARG1-of (k / know-01
            :time (d / date-entity
                  :weekday (t2 / thursday))))

# ::snt Top Asian News 1:25 p.m. GMT
(b / broadcast-program
      :name (n / name
            :op1 "Top"
            :op2 "Asian"
            :op3 "News")
      :time (d / date-entity
            :time "1:25"
            :timezone "GMT"))

# ::snt How the Dow Jones Industrial Average Fared on Monday
(t / thing
      :manner-of (c / close-06
            :ARG1 (p / product
                  :name (n / name
                        :op1 "Dow"
                        :op2 "Jones"
                        :op3 "Industrial"
                        :op4 "Average"))
            :time (d / date-entity
                  :weekday (m / monday))))

# ::snt Hajj to go ahead despite crane collapse
(g / go-06
      :ARG0 (c / city
            :name (n / name
                  :op1 "Hajj"))
      :ARG2 (a / ahead)
      :concession (c2 / collapse-01
            :ARG1 (c3 / crane)))

# ::snt US House Republicans eye reluctant Ryan for speaker
(e / eye-01
      :ARG0 (p / political-party
            :name (n / name
                  :op1 "Republican")
            :part-of (g / government-organization
                  :name (n2 / name
                        :op1 "House")
                  :mod (c / country
                        :name (n3 / name
                              :op1 "United"
                              :op2 "States"))))
      :ARG1 (p2 / person
            :name (n4 / name
                  :op1 "Ryan")
            :ARG0-of (r / reluctant-01
                  :ARG1 (s / speak-01
                        :ARG0 p2))))

# ::snt Singapore shares open 0.06% lower on Tuesday
(o / open-07
      :ARG1 (s / share
            :mod (c / country
                  :name (n / name
                        :op1 "Singapore")))
      :ARG3 (l / lower-05
            :ARG1 s
            :ARG2 (p / percentage-entity
                  :value 0.06))
      :time (d / date-entity
            :weekday (t / tuesday)))

# ::snt China treasury bond futures close mixed Wednesday
(c / close-04
      :ARG1 (f / futures
            :mod (b / bond
                  :mod (t / treasury)
                  :mod (c2 / country
                        :name (n / name
                              :op1 "China"))))
      :ARG3 (m / mix-01)
      :time (d / date-entity
            :weekday (w / wednesday)))

# ::snt Attorney General Eric Holder to Resign
(r / resign-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Eric"
                  :op2 "Holder")
            :ARG0-of (h / have-org-role-91
                  :ARG2 (a / attorney
                        :mod (g / general)))))

# ::snt Headlines in several Iranian newspapers on Oct 19
(h / headline-01
      :location (n / newspaper
            :mod (c / country
                  :name (n2 / name
                        :op1 "Iran"))
            :quant (s / several))
      :time (d / date-entity
            :day 19
            :month 10))

# ::snt China issues yellow alert for typhoon Kalmaegi
(ii / issue-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (a / alert-01
            :ARG2 (t / typhoon
                  :name (n2 / name
                        :op1 "Kalmaegi"))
            :mod (y / yellow)))

# ::snt Saudi airstrikes in Yemen's capital kill 29
(k / kill-01
      :ARG0 (s / strike-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Saudi"
                        :op2 "Arabia"))
            :location (c2 / city
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c3 / country
                              :name (n2 / name
                                    :op1 "Yemen"))
                        :ARG2 (c4 / capital)))
            :path (a / air))
      :ARG1 (p / person
            :quant 29))

# ::snt UN takes over peacekeeping in Central African Republic
(t / take-over-12
      :ARG0 (o / organization
            :name (n / name
                  :op1 "UN"))
      :ARG1 (k / keep-01
            :ARG1 (p / peace)
            :location (c / country
                  :name (n2 / name
                        :op1 "Central"
                        :op2 "African"
                        :op3 "Republic"))))

# ::snt Militant attack from Afghanistan kills FC soldier in Balochistan
(k / kill-01
      :ARG0 (a / attack-01
            :ARG0 (m / militant)
            :source (c / country
                  :name (n / name
                        :op1 "Afghanistan")))
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (m2 / military
                        :name (n2 / name
                              :op1 "FC"))
                  :ARG2 (s / soldier)))
      :location (p2 / province
            :name (n3 / name
                  :op1 "Balochistan")))

# ::snt Militants attack UN as Mali hunts jihadist nightclub killers
(a / attack-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / militant)))
      :ARG1 (o / organization
            :name (n / name
                  :op1 "UN"))
      :time (h2 / hunt-01
            :ARG0 (c / country
                  :name (n2 / name
                        :op1 "Mali"))
            :ARG1 (p2 / person
                  :ARG0-of (k / kill-01
                        :location (n3 / nightclub))
                  :mod (j / jihadist))))

# ::snt 6.6-magnitude earthquake strikes off Indonesia
(s / strike-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "Indonesia"))
      :ARG2 (e / earthquake
            :quant (s2 / seismic-quantity
                  :quant 6.6)))

# ::snt Tokyo shares open higher tracing U.S. gains
(o / open-01
      :ARG1 (s / share
            :mod (c / city
                  :name (n / name
                        :op1 "Tokyo")))
      :ARG3 (h / high-02
            :ARG2-of (h2 / have-degree-91
                  :ARG1 s
                  :ARG3 (m / more)))
      :manner (t / trace-02
            :ARG1 (g / gain-02
                  :ARG0 (c2 / country
                        :name (n2 / name
                              :op1 "U.S.")))))

# ::snt Iran hardliners attack nuclear deal
(a / attack-01
      :ARG0 (p / person
            :mod (h / hardline)
            :mod (c / country
                  :name (n / name
                        :op1 "Iran")))
      :ARG1 (d / deal-01
            :ARG2 (n2 / nucleus)))

# ::snt Hawaii bracing as first hurricane in 22 years approaches
(b / brace-01
      :ARG0 (s / state
            :name (n / name
                  :op1 "Hawaii"))
      :prep-as (a / approach-01
            :ARG1 (h / hurricane
                  :ord (o / ordinal-entity
                        :value 1
                        :range (t / temporal-quantity
                              :quant 22
                              :unit (y / year))))))

# ::snt Iraq suicide bomber kills at least 12
(k / kill-01
      :ARG0 (p / person
            :mod (s / suicide)
            :ARG0-of (b / bomb-01)
            :mod (c / country
                  :name (n / name
                        :op1 "Iraq")))
      :ARG1 (a / at-least
            :op1 12))

# ::snt Sierra Leone Reaches Final Day of Ebola Lockdown
(r / reach-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Sierra"
                  :op2 "Leone"))
      :ARG1 (d / day
            :mod (f / final)
            :time-of (l / lock-down-05
                  :ARG1 (d2 / disease
                        :name (n2 / name
                              :op1 "Ebola")))))

# ::snt Tokyo shares open higher following strong U.S. performance
(o / open-01
      :ARG1 (s / share
            :poss (c / city
                  :name (n / name
                        :op1 "Tokyo")))
      :ARG3 (h / high-02
            :ARG1 s
            :ARG2-of (f / follow-01
                  :ARG1 (p / perform-02
                        :ARG0 (c2 / country
                              :name (n2 / name
                                    :op1 "U.S."))
                        :ARG1-of (s2 / strong-02)))))

# ::snt Oil prices down in Asian trade
(d / down-03
      :ARG0 (t / trade-01
            :ARG0 (c / continent
                  :name (n / name
                        :op1 "Asia")))
      :ARG1 (p / price-01
            :ARG1 (o / oil)))

# ::snt Israeli forces detain 2 Palestinians in overnight arrest raids
(d / detain-01
      :ARG0 (f / force
            :mod (c / country
                  :name (n / name
                        :op1 "Israel")))
      :ARG1 (p / person
            :quant 2
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine")))
      :subevent-of (r / raid-01
            :ARG0 f
            :ARG1-of (o / overnight-01)))

# ::snt Two killed, seventeen injured in Raiwind road accident
(a / and
      :op1 (k / kill-01
            :ARG0 (a2 / accident
                  :mod (r / road
                        :name (n / name
                              :op1 "Raiwind")))
            :ARG1 (p / person
                  :quant 2))
      :op2 (ii / injure-01
            :ARG0 a2
            :ARG1 (p2 / person
                  :quant 17)))

# ::snt Over 2,000 migrants rescued from wooden boats in Mediterranean
(r / rescue-01
      :ARG1 (p / person
            :ARG0-of (m / migrate-01)
            :quant (o / over
                  :op1 2000))
      :ARG2 (b / boat
            :mod (w / wooden)
            :location (s / sea
                  :name (n / name
                        :op1 "Mediterranean"))))

# ::snt Lewis Hamilton wins inaugural Russian GP
(w / win-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Lewis"
                  :op2 "Hamilton"))
      :ARG1 (e / event
            :name (n2 / name
                  :op1 "Russian"
                  :op2 "Grand Prix")
            :ord (o / ordinal-entity
                  :value 1)))

# ::snt UN Security Council urges Yemen's Houthis to end...
(u / urge-01
      :ARG0 (o / organization
            :name (n / name
                  :op1 "UN"
                  :op2 "Security"
                  :op3 "Council"))
      :ARG1 (p / person
            :mod (c / country
                  :name (n2 / name
                        :op1 "Yemen"))
            :mod (r / religious-group
                  :name (n3 / name
                        :op1 "Houthis")))
      :ARG2 (e / end-01
            :ARG1 p))

# ::snt Israeli security forces arrest 8 Palestinians in overnight West Bank sweeps
(a / arrest-01
      :ARG0 (f / force
            :mod (s / security)
            :mod (c / country
                  :name (n / name
                        :op1 "Israel")))
      :ARG1 (p / person
            :quant 8
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine")))
      :time (s2 / sweep-06
            :ARG0 f
            :ARG1 (c3 / country-region
                  :name (n3 / name
                        :op1 "West"
                        :op2 "Bank"))
            :time (o / overnight)))

# ::snt 6 killed in Afghan capital mosque attack
(k / kill-01
      :ARG0 (a / attack-01
            :ARG1 (m / mosque
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / country
                              :name (n / name
                                    :op1 "Afghanistan"))
                        :ARG2 (c2 / capital))))
      :ARG1 (p / person
            :quant 6))

# ::snt 2 dead, 8 injured in central Israel traffic accident
(a / and
      :op1 (d / die-01
            :ARG1 (p / person
                  :quant 2))
      :op2 (ii / injure-01
            :ARG1 (p2 / person
                  :quant 8))
      :ARG1-of (c / cause-01
            :ARG0 (a2 / accident
                  :mod (t / traffic)
                  :location (c2 / center
                        :part-of (c3 / country
                              :name (n / name
                                    :op1 "Israel"))))))

# ::snt Markets Live: China drags
(d / drag-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :mod (m / market-sector
            :name n
            :op1 "Markets"
            :op2 "Live"))

# ::snt Palestinian Shot by Israeli Police in East Jerusalem Dies
(d / die-01
      :ARG1 (p / person
            :mod (c / country
                  :name (n / name
                        :op1 "Palestine"))
            :ARG1-of (s / shoot-02
                  :ARG0 (p2 / police
                        :mod c
                        :name (n2 / name
                              :op1 "Israel")))
            :location (c2 / city-district
                  :name (n3 / name
                        :op1 "East"
                        :op2 "Jerusalem"))))

# ::snt Suspected Boko Haram attacks kill dozens in Nigeria
(k / kill-01
      :ARG0 (a / attack-01
            :ARG0 (o / organization
                  :name (n / name
                        :op1 "Bai"
                        :op2 "Hamas"))
            :ARG1-of (s / suspect-01))
      :ARG1 (p / person
            :quant (m / multiple
                  :op1 12))
      :location (c / country
            :name (n2 / name
                  :op1 "Nigeria")))

# ::snt UK 'concern' over Hong Kong protests
(c / concern-01
      :ARG0 (p / protest-01
            :location (c2 / city
                  :name (n / name
                        :op1 "Hong"
                        :op2 "Kong")))
      :ARG1 (c3 / country
            :name (n2 / name
                  :op1 "UK")))

# ::snt Russian roulette in Syria
(r / roulette
      :mod (c / country
            :name (n / name
                  :op1 "Russia"))
      :location (c2 / country
            :name (n2 / name
                  :op1 "Syria")))

# ::snt 19 killed in Tunis museum attack
(k / kill-01
      :ARG1 (p / person
            :quant 19)
      :location (a / attack-01
            :ARG1 (m / museum
                  :location (c / city
                        :name (n / name
                              :op1 "Tunisia")))))

# ::snt Live Blog: Iraq In Turmoil
(b / blog-01
      :ARG1 (t / Turmoil
            :domain (c / country
                  :name (n / name
                        :op1 "Iraq")))
      :manner (l / live))

# ::snt Israel Police Clash With Palestinians in Jerusalem
(c / clash-01
      :ARG0 (p / police
            :mod (c2 / country
                  :name (n / name
                        :op1 "Israel")))
      :ARG1 (p2 / person
            :mod (c3 / country
                  :name (n2 / name
                        :op1 "Palestine")))
      :location (c4 / city
            :name (n3 / name
                  :op1 "Jerusalem")))

# ::snt Guineans Go to the Polls in Presidential Elections
(g / go-02
      :ARG0 (p / person
            :mod (c / country
                  :name (n / name
                        :op1 "Guinea")))
      :ARG4 (p2 / poll)
      :subevent-of (e / elect-01
            :ARG2 (p3 / president)))

# ::snt Prince William of Britain arrives in Beijing
(a / arrive-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Prince"
                  :op2 "William"
                  :op3 "of"
                  :op4 "Britain"))
      :ARG4 (c / city
            :name (n2 / name
                  :op1 "Beijing")))

# ::snt Sweden recognizes Palestinian state
(r / recognize-02
      :ARG0 (c / country
            :name (n / name
                  :op1 "Sweden"))
      :ARG1 (s / state
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Palestine"))))

# ::snt Five killed in Saudi Arabia shooting
(k / kill-01
      :ARG0 (s / shoot-02
            :location (c / country
                  :name (n / name
                        :op1 "Saudi"
                        :op2 "Arabia")))
      :ARG1 (p / person
            :quant 5))

# ::snt Vice President of Bolivia to visit China
(v / visit-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Bolivia"))
                  :ARG2 (p2 / president
                        :mod (v2 / vice))))
      :ARG1 (c2 / country
            :name (n2 / name
                  :op1 "China")))

# ::snt Islamic State posts second propaganda video of UK hostage
(p / post-01
      :ARG0 (s / state
            :mod (r / religious-group
                  :name (n / name
                        :op1 "Islamic")))
      :ARG1 (v / video
            :mod (p2 / propaganda
                  :ord (o / ordinal-entity
                        :value 2))
            :topic (h / hostage
                  :mod (c / country
                        :name (n2 / name
                              :op1 "UK")))))

# ::snt Iran, Tajikistan sign cooperation agreement
(s / sign-02
      :ARG0 (c / country
            :name (n / name
                  :op1 "Iran"))
      :ARG1 (a / agreement
            :topic (c2 / cooperate-01))
      :ARG2 (c3 / country
            :name (n2 / name
                  :op1 "Tajikistan")))

# ::snt Texas hospital worker tests positive for Ebola
(t / test-01
      :ARG1 (p / person
            :ARG0-of (w / work-01
                  :ARG2 (h / hospital
                        :location (s / state
                              :name (n / name
                                    :op1 "Texas")))))
      :ARG2 (p2 / positive)
      :ARG3 (d / disease
            :name (n2 / name
                  :op1 "Ebola")))

# ::snt Turkey 'exploits' Syrian refugees
(e / explode-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Turkey"))
      :ARG1 (r / refugee
            :mod (c2 / country
                  :name (n2 / name
                        :op1 "Syria"))))

# ::snt China disagrees with U.S. sanctions program on overseas cyber attackers
(d / disagree-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (p / program
            :topic (s / sanction-02
                  :ARG0 (c2 / country
                        :name (n2 / name
                              :op1 "U.S."))
                  :ARG1 (p2 / person
                        :ARG0-of (a / attack-01
                              :mod (c3 / cyber))
                        :location (o / overseas)))))

# ::snt 38 IS militants killed in clashes, air strikes in Iraq
(k / kill-01
      :ARG1 (p / person
            :quant 38
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / criminal-organization
                        :name (n / name
                              :op1 "IS"))
                  :ARG2 (m / militant)))
      :ARG1-of (c2 / cause-01
            :ARG0 (c3 / clash-01))
      :location (c4 / country
            :name (n2 / name
                  :op1 "Iraq"))
      :instrument (s / strike-01
            :path (a / air)))

# ::snt 12 Dead, Despite Cease-fire in East Ukraine
(d / die-01
      :ARG1 (p / person
            :quant 12)
      :concession (c / cease-01
            :ARG1 (f / fire-01)
            :location (c2 / country
                  :name (n / name
                        :op1 "Ukraine")
                  :part (e / east))))

# ::snt Greece concerns drag on Asia markets
(d / drag-01
      :ARG0 (c / concern-01
            :ARG1 (c2 / country
                  :name (n / name
                        :op1 "Greece")))
      :ARG1 (m / market
            :location (c3 / continent
                  :name (n2 / name
                        :op1 "Asia"))))

# ::snt Funeral of MH17 victim Liam Sweeney takes place in Newcastle
(f / funeral
      :beneficiary (p / person
            :name (n / name
                  :op1 "Liam"
                  :op2 "Sweeney")
            :ARG1-of (v / victimize-01
                  :ARG0 (ii / incident
                        :name (n2 / name
                              :op1 "MH17"))))
      :location (c / city
            :name (n3 / name
                  :op1 "Newcastle")))

# ::snt West Ham beats Newcastle 2-0 in Premier League
(b / beat-03
      :ARG0 (t / team
            :name (n / name
                  :op1 "West"
                  :op2 "Ham"))
      :ARG1 (t2 / team
            :name (n2 / name
                  :op1 "Newcastle"))
      :ARG2 (s / score-entity
            :op1 2
            :op2 0)
      :location (l / league
            :name (n3 / name
                  :op1 "Premier"
                  :op2 "League")))

# ::snt Israeli leader urges calm in Jerusalem
(u / urge-01
      :ARG0 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Israel"))))
      :ARG2 (c2 / calm-03)
      :location (c3 / city
            :name (n2 / name
                  :op1 "Jerusalem")))

# ::snt Waiting for the next president
(w / wait-01
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (p2 / president))
            :mod (n / next)))

# ::snt Mixed Progress Reported in Fight Against Islamic State
(r / report-01
      :ARG1 (p / progress-01
            :ARG1-of (m / mix-01))
      :topic (f / fight-01
            :ARG1 (c / criminal-organization
                  :name (n / name
                        :op1 "Islamic"
                        :op2 "State"))))

# ::snt Egypt sentences Al Jazeera journalists to jail
(s / sentence-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Egypt"))
      :ARG1 (j / journalist
            :mod (p / publication
                  :name (n2 / name
                        :op1 "Al"
                        :op2 "Jazeera")))
      :ARG2 (j2 / jail))

# ::snt occupied Palestinian territory: Israel warns on security as Gaza truce talks resume
(w / warn-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Israel"))
      :ARG1 (s / security)
      :time (r / resume-01
            :ARG1 (t / talk-01
                  :ARG1 (t2 / truce)
                  :location (c2 / country-region
                        :name (n2 / name
                              :op1 "Gaza"))))
      :location (t3 / territory
            :ARG1-of (o / occupy-01
                  :ARG0 c)))

# ::snt Kurds see Turkey impeding Islamic State fight
(s / see-01
      :ARG0 (p / person
            :mod (e / ethnic-group
                  :name (n / name
                        :op1 "Kurd")))
      :ARG1 (ii / impede-01
            :ARG0 (c / country
                  :name (n2 / name
                        :op1 "Turkey"))
            :ARG1 (f / fight-01
                  :ARG0 (g / government-organization
                        :name (n3 / name
                              :op1 "Islamic"
                              :op2 "State")))))

# ::snt India's top court orders investigation into job scam, deaths
(o / order-01
      :ARG0 (c / court
            :mod (t / top)
            :poss (c2 / country
                  :name (n / name
                        :op1 "India")))
      :ARG2 (ii / investigate-01
            :ARG1 (a / and
                  :op1 (s / scam-01
                        :ARG1 (j / job))
                  :op2 (d / die-01))))

# ::snt Chinese military reaches out amid South China Sea tensions
(r / reach-out-03
      :ARG0 (m / military
            :mod (c / country
                  :name (n / name
                        :op1 "China")))
      :time (t / tension
            :location (s / sea
                  :name (n2 / name
                        :op1 "South"
                        :op2 "China"
                        :op3 "Sea"))))

# ::snt Montenegrin police fire teargas to disperse opposition
(f / fire-01
      :ARG0 (p / police
            :mod (c / country
                  :name (n / name
                        :op1 "Montenegrin")))
      :ARG1 (t / teargas)
      :purpose (d / disperse-01
            :ARG0 p
            :ARG1 (p2 / person
                  :ARG0-of (o / oppose-01))))

# ::snt Death toll in Nepal earthquake tops 8,000
(t / top-02
      :ARG0 (t2 / toll
            :quant-of (d / die-01)
            :ARG1-of (c / cause-01
                  :ARG0 (e / earthquake
                        :location (c2 / country
                              :name (n / name
                                    :op1 "Nepal")))))
      :ARG1 8000)

# ::snt Ashya King's parents freed from jail in Spain
(f / free-01
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (p2 / person
                        :name (n / name
                              :op1 "Ashya"
                              :op2 "King"))
                  :ARG2 (p3 / parent)))
      :ARG2 (j / jail)
      :location (c / country
            :name (n2 / name
                  :op1 "Spain")))

# ::snt US ramps up response to Ebola crisis
(r / ramp-up-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "US"))
      :ARG1 (r2 / respond-01
            :ARG0 c
            :ARG1 (c2 / crisis
                  :mod (d / disease
                        :name (n2 / name
                              :op1 "Ebola")))))

# ::snt Thousands of Russians stranded abroad
(s / strand-01
      :ARG1 (p / person
            :mod (c / country
                  :name (n / name
                        :op1 "Russia"))
            :quant (m / multiple
                  :op1 1000))
      :location (a / abroad))

# ::snt Harry Kane leaves it late to rescue a point for Tottenham Hotspur
(l / leave-15
      :ARG0 (p / person
            :name (n / name
                  :op1 "Harry"
                  :op2 "Kane"))
      :ARG1 (ii / it)
      :time (l2 / late)
      :purpose (r / rescue-01
            :ARG0 p
            :ARG1 (p2 / point)
            :ARG2 (t / team
                  :name (n2 / name
                        :op1 "Tottenham"
                        :op2 "Hotspur"))))

# ::snt 'Bookkeeper of Auschwitz' Sentenced to Four Years in Prison
(s / sentence-01
      :ARG1 (p / person
            :ARG0-of (k / keep-01
                  :ARG1 (b / book)
                  :location (f / facility
                        :name (n / name
                              :op1 "Auschwitz"))))
      :ARG2 (t / temporal-quantity
            :quant 4
            :unit (y / year)
            :location (p2 / prison)))

# ::snt Pro-Palestinian activists prepare flotilla to break Gaza blockade
(p / prepare-02
      :ARG0 (a / activist
            :ARG0-of (f / favor-01
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Palestine"))))
      :ARG1 (f2 / flotilla)
      :ARG2 (b / break-01
            :ARG0 a
            :ARG1 (b2 / blockade-01
                  :ARG0 a
                  :ARG1 (c2 / country-region
                        :name (n2 / name
                              :op1 "Gaza")))))

# ::snt Menendez faces possible corruption charges
(f / face-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Menendez"))
      :ARG1 (c / charge-05
            :ARG1 p
            :ARG2 (c2 / corrupt-01)
            :ARG1-of (p2 / possible-01)))

# ::snt US scientists praise Iran nuclear deal
(p / praise-01
      :ARG0 (s / scientist
            :mod (c / country
                  :name (n / name
                        :op1 "United"
                        :op2 "States")))
      :ARG1 (d / deal-01
            :ARG0 (c2 / country
                  :name (n2 / name
                        :op1 "Iran"))
            :ARG2 (n3 / nucleus)))

# ::snt Heat flash detected at time of Russian airliner crash
(d / detect-01
      :ARG1 (f / flash-01
            :ARG1 (h / heat))
      :time (c / crash-01
            :ARG1 (a / airliner
                  :poss (c2 / country
                        :name (n / name
                              :op1 "Russia")))))

# ::snt US Senator Ted Cruz to announce presidential bid
(a / announce-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Ted"
                  :op2 "Cruz")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n2 / name
                              :op1 "US"))
                  :ARG2 (s / senator)))
      :ARG1 (b / bid-03
            :ARG0 p
            :ARG1 (p2 / president)))

# ::snt EPL clubs out to avoid Champions League woes
(o / out-06
      :ARG1 (c / club
            :mod (l / league
                  :name (n / name
                        :op1 "English"
                        :op2 "Premier"
                        :op3 "League")))
      :purpose (a / avoid-01
            :ARG0 c
            :ARG1 (w / woe
                  :poss (l2 / league
                        :name (n2 / name
                              :op1 "Champions"
                              :op2 "League")))))

# ::snt Has Nasa discovered water on Mars?
(d / discover-01
      :ARG0 (r / research-institute
            :name (n / name
                  :op1 "Nasa"))
      :ARG1 (w / water)
      :polarity (a / amr-unknown)
      :location (p / planet
            :name (n2 / name
                  :op1 "Mars")))

# ::snt Iran arrests several spies near nuclear plant
(a / arrest-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Iran"))
      :ARG1 (p / person
            :ARG0-of (s / spy-01)
            :quant (s2 / several)
            :ARG1-of (n2 / near-02
                  :ARG2 (p2 / plant
                        :mod (n3 / nucleus)))))

# ::snt Press awash with Nigeria\'s general elections
(a / awash
      :prep-with (e / elect-01
            :ARG1 (c / country
                  :name (n / name
                        :op1 "Nigeria"))
            :ARG1-of (g / general-02)))

# ::snt South Korea reports 14th Mers death, 12 new cases
(r / report-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "South"
                  :op2 "Korea"))
      :ARG1 (a / and
            :op1 (d / die-01
                  :ARG1 (p / person
                        :quant 14
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (m / military
                                    :name n
                                    :op1 "Mers"))
                        :ARG2 (m2 / member)))
            :ord (o / ordinal-entity
                  :value 14))
      :op2 (c2 / case-04
            :quant 12
            :ARG1-of (n2 / new-01)))

# ::snt Tour De France Pack Sets off for Stage 15
(s / set-off-05
      :ARG0 (p / pack
            :mod (e / event
                  :name (n / name
                        :op1 "Tour"
                        :op2 "De"
                        :op3 "France")))
      :ARG1 (s2 / stage
            :ord (o / ordinal-entity
                  :value 15)))

# ::snt Media freedom at stake as Turkey fights rebels
(s / stake-01
      :ARG1 (f / free-04
            :ARG1 (m / media))
      :ARG2 (f2 / fight-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Turkey"))
            :ARG1 (p / person
                  :ARG0-of (r / rebel-01))))

# ::snt Spanish bulls gore seven to death
(g / gore-01
      :ARG0 (b / bull
            :mod (c / country
                  :name (n / name
                        :op1 "Spain")))
      :ARG1 (p / person
            :quant 7)
      :ARG2 (d / die-01
            :ARG1 p))

# ::snt China keeps an eye on visiting tiger freed by Russian President
(k / keep-eye-on-05
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :ARG1 (t / tiger
            :ARG1-of (f / free-01
                  :ARG0 (p / person
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (c2 / country
                                    :name (n2 / name
                                          :op1 "Russia"))
                              :ARG2 (p2 / president))))
            :ARG0-of (v / visit-01)))

# ::snt Belarus tightens security along the border with Ukraine
(t / tighten-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Belarus"))
      :ARG1 (s / security)
      :location (a / along
            :op1 (b / border-01
                  :ARG1 c
                  :ARG2 (c2 / country
                        :name (n2 / name
                              :op1 "Ukraine")))))

# ::snt South Korean woman in contact with MERS patient dies
(d / die-01
      :ARG1 (w / woman
            :source (c / country
                  :name (n / name
                        :op1 "South"
                        :op2 "Korea"))
            :ARG1-of (c2 / contact-01
                  :ARG1 (p / patient
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 (d2 / disease
                                    :name (n2 / name
                                          :op1 "MERS"))
                              :ARG2 p)))
            :ARG0-of c2))

# ::snt Obama vows to save Iraqis stranded on mountain
(v / vow-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG1 (s / save-02
            :ARG0 p
            :ARG1 (p2 / person
                  :mod (c / country
                        :name (n2 / name
                              :op1 "Iraq"))
                  :ARG1-of (s2 / strand-01
                        :location (m / mountain)))))

# ::snt Observatory says Russian air strikes kill 45 in Syria
(s / say-01
      :ARG0 (o / organization
            :ARG0-of (o2 / observe-01))
      :ARG1 (k / kill-01
            :ARG0 (s2 / strike-01
                  :ARG0 (c / country
                        :name (n / name
                              :op1 "Russia"))
                  :ARG1 (p / person
                        :quant 45)
                  :path (a / air))
            :ARG1 p
            :location (c2 / country
                  :name (n2 / name
                        :op1 "Syria"))))

# ::snt Police abandon posts in Lesotho, fear for lives
(a / and
      :op1 (a2 / abandon-01
            :ARG0 (p / police)
            :ARG1 (p2 / post
                  :location (c / city
                        :name (n / name
                              :op1 "Lesotho"))))
      :op2 (f / fear-01
            :ARG0 p
            :ARG1 (l / life)))

# ::snt N Korea hit with new US sanctions
(h / hit-01
      :ARG1 (c / country
            :name (n / name
                  :op1 "North"
                  :op2 "Korea"))
      :ARG2 (s / sanction-02
            :ARG0 (c2 / country
                  :name (n2 / name
                        :op1 "US"))
            :ARG1 c
            :ARG1-of (n3 / new-01)))

# ::snt Hong Kong student leaders mull protest retreat
(m / mull-01
      :ARG0 (p / person
            :ARG0-of (l / lead-02
                  :ARG1 (c / city
                        :name (n / name
                              :op1 "Hong"
                              :op2 "Kong")))
            :ARG0-of (s / study-01))
      :ARG1 (r / retreat-01
            :ARG1 p))

# ::snt Why Cyprus backs Cameron's push for UK air strikes in Syria
(c / cause-01
      :ARG1 (b / back-01
            :ARG0 (c2 / country
                  :name (n / name
                        :op1 "Cyprus"))
            :ARG1 (p / push-02
                  :ARG0 (p2 / person
                        :name (n2 / name
                              :op1 "Cameron"))
                  :ARG1 (s / strike-01
                        :ARG0 (c3 / country
                              :name (n3 / name
                                    :op1 "UK"))
                        :ARG1 (c4 / country
                              :name (n4 / name
                                    :op1 "Syria"))
                        :path (a / air)))))

# ::snt Philippines saves 100 after ferry sinks
(s / save-02
      :ARG0 (c / country
            :name (n / name
                  :op1 "Philippines"))
      :ARG1 (p / person
            :quant 100)
      :time (a / after
            :op1 (s2 / sink-01
                  :ARG1 (f / ferry))))

# ::snt Two-state solution between Palestinians, Israel pie in sky
(p / pie
      :location (s / sky)
      :domain (s2 / solve-01
            :ARG0 (c / country
                  :name (n / name
                        :op1 "Palestine"))
            :ARG1 (s3 / state
                  :quant 2))
      :beneficiary (c2 / country
            :name (n2 / name
                  :op1 "Israel")))

# ::snt Lawmakers from both sides express outrage at Secret Service
(e / express-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (s / side
                        :mod (b / both))
                  :ARG3 (l / legislate-01)))
      :ARG1 (o / outrage-01
            :ARG0 (g / government-organization
                  :name (n / name
                        :op1 "Secret"
                        :op2 "Service"))
            :ARG1 p))

# ::snt Johor crowns its fifth Sultan
(c / crown-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Johor"))
      :ARG1 (p2 / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country
                        :name n
                        :op1 "Palestine"))
            :ARG2 (s / sultan))
      :ord (o / ordinal-entity
            :value 5))

# ::snt Iran reiterates support for Iraq, Syria
(r / reiterate-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Iran"))
      :ARG1 (s / support-01
            :ARG0 c
            :ARG1 (a / and
                  :op1 (c2 / country
                        :name (n2 / name
                              :op1 "Iraq"))
                  :op2 (c3 / country
                        :name (n3 / name
                              :op1 "Syria")))))

# ::snt Poland president loses to challenger
(l / lose-03
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Poland"))
                  :ARG2 (p2 / president)))
      :ARG1 (p3 / person
            :ARG0-of (c2 / challenge-01)))

# ::snt Palestinian official slams Israel's stone-throwing bill
(s / slam-02
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c / country
                        :name (n / name
                              :op1 "Palestine"))
                  :ARG2 (o / official)))
      :ARG1 (b / bill
            :topic (t / throw-01
                  :ARG1 (s2 / stone))
            :poss (c2 / country
                  :name (n2 / name
                        :op1 "Israel"))))

# ::snt University of Florida frat accused of spitting on wounded war veterans
(a / accuse-01
      :ARG1 (f / frat
            :poss (u / university
                  :name (n / name
                        :op1 "University"
                        :op2 "of"
                        :op3 "Florida")))
      :ARG2 (s / spit-01
            :ARG0 f
            :ARG2 (v / veteran
                  :mod (w / war)
                  :ARG1-of (w2 / wound-01))))

# ::snt PM Narendra Modi speaks of non-discrimination and equality
(s / speak-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Narendra"
                  :op2 "Modi")
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / minister
                        :mod (p2 / prime))))
      :ARG1 (a / and
            :op1 (d / discriminate-01
                  :polarity -)
            :op2 (e / equal-01)))

# ::snt UN chief condemns attack against peacekeepers in Mali
(c / condemn-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (o / organization
                        :name (n / name
                              :op1 "UN"))
                  :ARG2 (c2 / chief)))
      :ARG1 (a / attack-01
            :ARG1 (p2 / person
                  :ARG0-of (k / keep-01
                        :ARG1 (p3 / peace))
                  :location (c3 / country
                        :name (n2 / name
                              :op1 "Mali")))))

# ::snt Pakistan protests ceasefire violations by India
(p / protest-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "Pakistan"))
      :ARG1 (v / violate-01
            :ARG0 (c2 / country
                  :name (n2 / name
                        :op1 "India"))
            :ARG1 (c3 / cease-01
                  :ARG1 (f / fire-01))))

# ::snt North Korea Delegation Meets With South Korean Officials
(m / meet-03
      :ARG0 (d / delegation
            :mod (c / country
                  :name (n / name
                        :op1 "North"
                        :op2 "Korea")))
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (c2 / country
                        :name (n2 / name
                              :op1 "South"
                              :op2 "Korea"))
                  :ARG2 (o / official))))

# ::snt Volkswagen's "gesture of goodwill" to diesel owners
(p / prove-01
      :ARG0 (c / company
            :name (n / name
                  :op1 "Volkswagen"))
      :ARG1 (g / goodwill)
      :ARG2 (p2 / person
            :ARG0-of (o / own-01
                  :ARG1 (d / diesel))))

# ::snt Permalink to Two killed in Germany train accident
(p / permalink
      :topic (k / kill-01
            :ARG1 (p2 / person
                  :quant 2)
            :ARG1-of (c / cause-01
                  :ARG0 (a / accident
                        :mod (t / train)
                        :location (c2 / country
                              :name (n / name
                                    :op1 "Germany"))))))

# ::snt Security tightened at New Delhi churches after attacks
(t / tighten-01
      :ARG1 (s / security)
      :location (c / church
            :location (c2 / city
                  :name (n / name
                        :op1 "New"
                        :op2 "Delhi")))
      :time (a / after
            :op1 (a2 / attack-01)))

# ::snt Pilot killed as US jet crashes in England
(k / kill-01
      :ARG0 (c / crash-01
            :ARG1 (j / jet
                  :poss (c2 / country
                        :name (n / name
                              :op1 "United"
                              :op2 "States")))
            :location (c3 / country
                  :name (n2 / name
                        :op1 "England")))
      :ARG1 (p / person
            :ARG0-of (p2 / pilot-01)))

# ::snt Egyptian boat crash death toll rises as more bodies found in Nile
(r / rise-01
      :ARG1 (t / toll
            :mod (d / die-01)
            :mod (c / crash-01
                  :ARG1 (b / boat
                        :mod (c2 / country
                              :name (n / name
                                    :op1 "Egypt")))))
      :ARG1-of (c3 / cause-01
            :ARG0 (f / find-01
                  :ARG1 (b2 / body
                        :quant (m / more))
                  :location (r2 / river
                        :name (n2 / name
                              :op1 "Nile")))))

# ::snt President Xi: China to continue help to fight Ebola
(s / say-01
      :ARG0 (p / person
            :name (n / name
                  :op1 "Xi")
            :ARG0-of (h / have-org-role-91
                  :ARG2 (p2 / president)))
      :ARG1 (c / continue-01
            :ARG0 (c2 / country
                  :name (n2 / name
                        :op1 "China"))
            :ARG1 (h2 / help-01
                  :ARG0 c2
                  :ARG1 (f / fight-01
                        :ARG0 c2
                        :ARG1 (d / disease
                              :name (n3 / name
                                    :op1 "Ebola"))))))

# ::snt China Scrambles to Reassure Jittery Stock Traders
(s / scramble-01
      :ARG0 (c / country
            :name (n / name
                  :op1 "China"))
      :purpose (r / repassure-01
            :ARG0 c
            :ARG1 (p / person
                  :ARG0-of (t / trade-01
                        :ARG1 (s2 / stock))
                  :mod (j / jittery))))

# ::snt Obama waiting for midterm to name attorney general
(w / wait-01
      :ARG1 (p / person
            :name (n / name
                  :op1 "Obama"))
      :ARG2 (n2 / name-01
            :ARG0 p
            :ARG1 (p2 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (a / attorney
                              :mod (g / general))))
            :time (m / midterm)))

# ::snt New York police officer critically wounded in hatchet attack
(w / wound-01
      :ARG1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (p2 / police
                        :mod (c / city
                              :name (n / name
                                    :op1 "New"
                                    :op2 "York")))
                  :ARG2 (o / officer)))
      :ARG1-of (c2 / critical-03)
      :ARG1-of (c3 / cause-01
            :ARG0 (a / attack-01
                  :ARG0 p
                  :instrument (h2 / hatchet))))

# ::snt I remained under the banyan tree, exhausted by my daily ritual of herding the cats every two hours.
(r / remain-01
      :ARG1 (ii / i)
      :ARG3 (u / under
            :op1 (t / tree
                  :mod (b / banyan)))
      :ARG1-of (c / cause-01
            :ARG0 (e / exhaust-01
                  :ARG0 (r2 / ritual
                        :frequency (r3 / rate-entity-91
                              :ARG3 (t2 / temporal-quantity
                                    :quant 2
                                    :unit (h / hour)))
                        :poss ii
                        :domain (h2 / herd-01
                              :ARG0 ii
                              :ARG1 (c2 / cat)
                              :frequency (r4 / rate-entity-91
                                    :ARG3 (t3 / temporal-quantity
                                          :quant 2
                                          :unit (h3 / hour)))))
                  :ARG1 ii)))

# ::snt It really depends on the school and the program.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (s / school)
            :op2 (p / program))
      :ARG1-of (r / real-04))

# ::snt There is also a Youtube-Version of the film.
(v / version
      :mod (p / publication
            :name (n / name
                  :op1 "Youtube"))
      :mod (a / also)
      :topic (f / film))

# ::snt You can do it, but you might not be a professor.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 (ii / it)))
      :ARG2 (p2 / possible-01
            :ARG1 (p3 / professor
                  :polarity -
                  :domain y)))

# ::snt I have this habit as well.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (h2 / habit
            :mod (t / this))
      :mod (a / as-well))

# ::snt You may want it, but the process given to you is what you have to work within.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (ii / it)))
      :ARG2 (t / thing
            :domain (p2 / process-02
                  :ARG1-of (g / give-01
                        :ARG2 y))
            :ARG1-of (w2 / work-01
                  :ARG0 y
                  :ARG2-of (o / obligate-01))))

# ::snt You don't have to worry.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (w / worry-01
            :ARG0 y))

# ::snt You should do what it says.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG1-of (s / say-01
                        :ARG0 (ii / it))))
      :ARG2 y)

# ::snt You should listen to your boss, because you're not paid to tell the boss what to do.
(r / recommend-01
      :ARG1 (l / listen-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 y
                        :ARG2 (b / boss))))
      :ARG2 y
      :ARG1-of (c / cause-01
            :ARG0 (p2 / pay-01
                  :polarity -
                  :ARG2 y
                  :ARG3 (t / tell-01
                        :ARG0 y
                        :ARG1 (t2 / thing
                              :ARG1-of (d / do-02
                                    :ARG0 y))
                        :ARG2 p))))

# ::snt You have to decide how much you want to demand, and what unmet demands you can live with.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (d / decide-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (m / monetary-quantity
                        :ARG1-of (d2 / demand-01
                              :ARG0 y
                              :ARG1-of (w / want-01
                                    :ARG0 y)))
                  :op2 (m2 / monetary-quantity
                        :ARG1-of (d3 / demand-01
                              :ARG0 y
                              :ARG1-of (m3 / meet-01
                                    :polarity -
                                    :ARG0 y
                                    :ARG1-of (p / possible-01)))))))

# ::snt i think it depends what you want:
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 ii2)))

# ::snt Yes, you can do it.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it)))

# ::snt You can do it, too.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (t / too)))

# ::snt You have to know what you want to do.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (w / want-01
                        :ARG0 y))))

# ::snt I have two suggestions for you:
(s / suggest-01
      :quant 2
      :ARG0 (ii / i)
      :ARG2 (y / you))

# ::snt The key thing you need to do in this meeting is listen.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (d / do-02
            :ARG0 y
            :ARG1 (l / listen-01
                  :ARG0 y)
            :subevent-of (m / meet-03
                  :ARG0 y
                  :mod (t / this))
            :ARG1-of (k / key-02)))

# ::snt My answer to your question is "Probably Not".
(a / answer-01
      :ARG0 (ii / i)
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (p / probable
            :domain (t / thing
                  :polarity -)))

# ::snt Start them as early as possible.
(s / start-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / they)
      :time (e / early
            :ARG2-of (h / have-degree-91
                  :ARG1 s
                  :ARG3 (e2 / equal)
                  :ARG4 (p / possible-01))))

# ::snt It depends on what you want to do next, and where you want to do it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)
                        :time (n / next)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (l / location
                  :location-of (w2 / want-01
                        :ARG0 y
                        :ARG1 (d3 / do-02
                              :ARG0 y
                              :ARG1 t)))))

# ::snt The answer to both of your questions is yes.
(a / answer-01
      :ARG1 (q / question-01
            :ARG0 (y / you)
            :mod (b / both))
      :ARG2 (y2 / yes))

# ::snt I'll answer this question:
(a / answer-01
      :ARG0 (ii / i)
      :ARG1 (q / question-01
            :mod (t / this)))

# ::snt Sorry, I don't know the answer to your question.
(s / sorry-01
      :ARG1 (ii / i)
      :ARG2 (k / know-01
            :polarity -
            :ARG0 ii
            :ARG1 (a / answer-01
                  :ARG1 (q / question-01
                        :ARG0 (y / you)))))

# ::snt This sound like a very bad idea.
(s / sound-01
      :ARG1 (t / this)
      :ARG2 (ii / idea
            :ARG1-of (b / bad-07
                  :degree (v / very))))

# ::snt It's a good idea.
(ii / idea
      :ARG1-of (g / good-02)
      :domain (ii2 / it))

# ::snt It depends on the meat and how it's cut.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (m / meat)
            :op2 (t / thing
                  :manner-of (c / cut-02
                        :ARG1 m))))

# ::snt It's a good question.
(q / question-01
      :ARG1 (ii / it)
      :ARG1-of (g / good-02))

# ::snt It's much better to ask.
(h / have-degree-91
      :ARG1 (a / ask-01)
      :ARG2 (g / good-02
            :ARG1 a)
      :ARG3 (m / more
            :quant (m2 / much)))

# ::snt Yes, that is exactly what it means.
(m / mean-01
      :ARG1 (ii / it)
      :ARG2 (t / that)
      :mod (e / exact))

# ::snt Have you tried asking?
(t / try-01
      :polarity (a / amr-unknown)
      :ARG0 (y / you)
      :ARG1 (a2 / ask-01
            :ARG0 y))

# ::snt You are making this too complicated.
(m / make-02
      :ARG0 (y / you)
      :ARG1 (c / complicate-01
            :ARG1 (t / this)
            :ARG2-of (h / have-degree-91
                  :ARG1 t
                  :ARG3 (t2 / too))))

# ::snt You have no need to do anything.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (d / do-02
            :ARG0 y
            :ARG1 (a / anything)))

# ::snt There are two possible causes for this:
(c / cause-01
      :quant 2
      :ARG1 (t / this)
      :ARG1-of (p / possible-01))

# ::snt It seems to work.
(s / seem-01
      :ARG1 (w / work-09
            :ARG1 (ii / it)))

# ::snt You can buy it on ebay for $25 and up.
(p / possible-01
      :ARG1 (b / buy-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :ARG3 (a / and
                  :op1 (m / monetary-quantity
                        :quant 25
                        :unit (d / dollar))
                  :op2 (m2 / monetary-quantity
                        :quant 25
                        :unit (d2 / dollar))
                  :ARG1-of (u / up-03))
            :location (c / company
                  :name (n / name
                        :op1 "eBay"))))

# ::snt One idea is cleaning the coffee residue from the coffee pot.
(ii / idea
      :quant 1
      :domain (c / clean-01
            :ARG1 (r / residue
                  :mod (c2 / coffee)
                  :source (p / pot
                        :consist-of (c3 / coffee)))))

# ::snt There are two traditional ways to bend wood:
(w / way
      :quant 2
      :mod (t / traditional)
      :manner-of (b / bend-01
            :ARG1 (w2 / wood)))

# ::snt My advice would be to try a variety of coffees that you can afford and find one you like.
(a / advise-01
      :ARG0 (ii / i)
      :ARG2 (a2 / and
            :op1 (t / try-01
                  :ARG0 (y / you)
                  :ARG1 (c / coffee
                        :mod (v / variety)
                        :ARG1-of (a3 / afford-01
                              :ARG0 y
                              :ARG1-of (p / possible-01))))
            :op2 (f / find-01
                  :ARG0 y
                  :ARG1 c
                  :ARG1-of (l / like-01
                        :ARG0 y))))

# ::snt It is not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -)
      :domain (ii2 / it))

# ::snt They can, but the way to do it depends on what you have available.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (t / they))
      :ARG2 (d / depend-01
            :ARG0 (w / way
                  :manner-of (d2 / do-02
                        :ARG1 (ii / it)))
            :ARG1 (t2 / thing
                  :ARG2-of (a / available-02
                        :ARG1 (y / you)))))

# ::snt Yes, you should mention it.
(r / recommend-01
      :ARG1 (m / mention-01
            :ARG0 (y / you)
            :ARG1 (ii / it)))

# ::snt Can you do this?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / this)))

# ::snt Take a look at this:
(l / look-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / this))

# ::snt I'd say it depends on the ultimate outcome you want?
(s / say-01
      :polarity (a / amr-unknown)
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (o / outcome
                  :mod (u / ultimate)
                  :ARG1-of (w / want-01
                        :ARG0 (y / you)))))

# ::snt Not much you can do besides:
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (m / much
                  :polarity -)
            :mod (b / besides)))

# ::snt But it is not a good idea.
(c / contrast-01
      :ARG2 (ii / idea
            :polarity -
            :ARG1-of (g / good-02)
            :domain (ii2 / it)))

# ::snt You have a lot of answers already, but I'd like to add Curries as another solutions.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (y / you)
            :ARG1 (a / answer
                  :quant (l / lot))
            :time (a2 / already))
      :ARG2 (l2 / like-02
            :ARG0 (ii / i)
            :ARG1 (a3 / add-02
                  :ARG0 ii
                  :ARG1 (t / thing
                        :name (n / name
                              :op1 "Curries"))
                  :ARG2 (t2 / thing
                        :ARG2-of (s / solve-01)
                        :mod (a4 / another)))))

# ::snt I had a similar situation.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (s / situation
            :ARG1-of (r / resemble-01)))

# ::snt I had this same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)
            :mod (t / this)))

# ::snt There is no quarantine period.
(p / period
      :polarity -
      :time-of (q / quarantine-01))

# ::snt I am not sure this question would have made much sense to the Romans themselves.
(s / sure-02
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (s2 / sense-02
            :ARG1 (q / question-01
                  :mod (t / this))
            :ARG2 (p / person
                  :mod (c / country
                        :name (n / name
                              :op1 "Rome")))
            :quant (m / much)))

# ::snt In other words, it depends on where you go, when you do there and how.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (l / location
                  :ARG4-of (g / go-02
                        :ARG0 (y / you)
                        :ARG1 (t / there)))
            :op2 (t2 / time
                  :time-of g)
            :op3 (h / have-manner-91
                  :ARG1 g))
      :ARG1-of (w / word-01
            :mod (o / other)))

# ::snt Yes, you should create a portfolio site to showcase what you can do and what you've done.
(r / recommend-01
      :ARG1 (c / create-01
            :ARG0 (y / you)
            :ARG1 (s / site
                  :mod (p / portfolio))
            :purpose (s2 / showcase-01
                  :ARG0 s
                  :ARG1 (a / and
                        :op1 (t / thing
                              :ARG1-of (d / do-02
                                    :ARG0 y
                                    :ARG1-of (p2 / possible-01)))
                        :op2 (t2 / thing
                              :ARG1-of (d2 / do-02
                                    :ARG0 y)))))
      :ARG2 y)

# ::snt No you are not.
(h / have-polarity-91
      :ARG1 (y / you)
      :ARG2 -)

# ::snt I guess it depends on what you're going to do.
(g / guess-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)))))

# ::snt It is his job to see that you have what you need to do your job.
(j / job
      :poss (h / he)
      :domain (s / see-01
            :ARG0 h
            :ARG1 (h2 / have-03
                  :ARG0 (y / you)
                  :ARG1 (t / thing
                        :ARG1-of (n / need-01
                              :ARG0 y
                              :purpose (d / do-02
                                    :ARG0 y
                                    :ARG1 (j2 / job
                                          :poss y)))))))

# ::snt It depends on what you want to achieve.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG1-of (a / achieve-01
                  :ARG0 (y / you)
                  :ARG1-of (w / want-01
                        :ARG0 y))))

# ::snt This is a big problem.
(p / problem
      :mod (b / big)
      :domain (t / this))

# ::snt This sounds a bit unusual.
(s / sound-01
      :ARG1 (t / this)
      :ARG2 (u / usual
            :polarity -
            :degree (b / bit)))

# ::snt I think it depends very much on the area.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (a / area)
            :degree (m / much
                  :degree (v / very))))

# ::snt I have had the same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)))

# ::snt No it is not.
(n / no)

# ::snt I think that the short  answer to your question is: No.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (a / answer-01
            :ARG1 (q / question-01
                  :ARG0 (y / you))
            :ARG2 (n / no)
            :ARG1-of (s / short-07)))

# ::snt I don't think it makes much difference.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (m / make-02
            :ARG0 (ii2 / it)
            :ARG1 (d / differ-02
                  :quant (m2 / much))))

# ::snt It depends on what they are evaluating, and how.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (e / evaluate-01
                        :ARG0 (t2 / they)))
            :op2 (h / have-manner-91
                  :ARG2 e)))

# ::snt There's not that much that you can do with a sourdough starter.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (m / much
                  :polarity -
                  :degree (t / that))
            :ARG2 (s / starter
                  :mod (s2 / sourdough))))

# ::snt You have answered your own question.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y))

# ::snt Th answer to you problem is that you dont actually know what you're getting in .
(a / answer-01
      :ARG1 (p / problem
            :poss (y / you))
      :ARG2 (k / know-01
            :polarity -
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (g / get-05
                        :ARG0 y))
            :ARG1-of (a2 / actual-02)))

# ::snt This is probably not a good idea but I will suggest it anyhow.
(h / have-concession-91
      :ARG1 (s / suggest-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / idea
                  :ARG1-of (g / good-02
                        :polarity -)
                  :domain (t / this))
            :mod (a / anyhow))
      :ARG2 ii2)

# ::snt My recommendation is not to say anything, and do the best you can.
(r / recommend-01
      :ARG0 (ii / i)
      :ARG1 (a / and
            :op1 (s / say-01
                  :polarity -
                  :ARG0 (y / you)
                  :ARG1 (a2 / anything))
            :op2 (d / do-02
                  :ARG0 y
                  :ARG1 (t / thing
                        :ARG1-of (p / possible-01)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (g / good-03
                                    :ARG1 t)
                              :ARG3 (m / most))))))

# ::snt I'd say it depends what conditions you have.
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (c / condition
                  :ARG1-of (h / have-03
                        :ARG0 (y / you)))))

# ::snt You don't have to do anything to season it.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (d / do-02
            :ARG0 y
            :ARG1 (a / anything)
            :purpose (s / season-01
                  :ARG0 y
                  :ARG1 (ii / it))))

# ::snt I have the same situation and have traveled extensively.
(a / and
      :op1 (h / have-03
            :ARG0 (ii / i)
            :ARG1 (s / situation
                  :ARG1-of (s2 / same-01)))
      :op2 (t / travel-01
            :ARG0 ii
            :ARG1-of (e / extensive-03)))

# ::snt I do not think it's a good idea.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (ii2 / idea
            :ARG1-of (g / good-02)
            :domain (ii3 / it)))

# ::snt You are right on the mark.
(b / be-located-at-91
      :ARG1 (y / you)
      :ARG2 (m / mark)
      :mod (r / right))

# ::snt This is a part answer to your question
(a / answer-01
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (t / this)
      :mod (p / part))

# ::snt So how should I do this?
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (ii / i)
            :ARG1 (t / this)
            :manner (a / amr-unknown)))

# ::snt Does this answer your questions?
(a / answer-01
      :polarity (a2 / amr-unknown)
      :ARG0 (t / this)
      :ARG1 (q / question-01
            :ARG0 (y / you)))

# ::snt You can still use it for practice.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :ARG2 (p2 / practice-01
                  :ARG0 y)
            :mod (s / still)))

# ::snt It depends how you're stating it.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :manner-of (s / state-01
                  :ARG0 (y / you)
                  :ARG1 (ii2 / it))))

# ::snt I've had this problem while working in a pubs.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :mod (t / this))
      :time (w / work-01
            :ARG0 ii
            :location (p2 / pub)))

# ::snt You should tell a good story and sometimes you have to tweak reality/history to do so.
(a / and
      :op1 (r / recommend-01
            :ARG1 (t / tell-01
                  :ARG0 (y / you)
                  :ARG1 (s / story
                        :ARG1-of (g / good-02))))
      :op2 (o / obligate-01
            :ARG1 y
            :ARG2 (t2 / tweak-01
                  :ARG0 y
                  :ARG1 (s2 / slash
                        :op1 (r2 / reality)
                        :op2 (h / history))
                  :purpose t)
            :frequency (s3 / sometimes)))

# ::snt It depends on what you want to be able to do.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG1-of (d2 / do-02
                  :ARG0 (y / you)
                  :ARG1-of (w / want-01
                        :ARG0 y))))

# ::snt You are not required to file a tax return in Canada if you have no taxable income.
(r / require-01
      :polarity -
      :ARG1 (f / file-01
            :ARG0 (y / you)
            :ARG1 (r2 / return-06
                  :ARG1 (t / tax-01))
            :location (c / country
                  :name (n / name
                        :op1 "Canada")))
      :ARG2 y
      :condition (h / have-03
            :polarity -
            :ARG0 y
            :ARG1 (ii / income
                  :ARG1-of (t2 / tax-01))))

# ::snt I don't see why that should be a problem.
(s / see-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG0-of (c / cause-01
                  :ARG1 (r / recommend-01
                        :ARG1 (p / problem
                              :domain (t2 / that))))))

# ::snt If what you are looking for is much higher, they get the picture.
(g / get-01
      :ARG0 (t / they)
      :ARG1 (p / picture)
      :condition (h / have-degree-91
            :ARG1 (t2 / thing
                  :ARG1-of (l / look-01
                        :ARG0 (y / you)))
            :ARG2 (h2 / high-02
                  :ARG1 t2)
            :ARG3 (m / more
                  :quant (m2 / much))))

# ::snt The best thing to do is to overcome the fussiness.
(t / thing
      :ARG1-of (d / do-02)
      :domain (o / overcome-01
            :ARG1 (f / fuss-01))
      :ARG1-of (g / good-02
            :ARG2-of (h / have-degree-91
                  :ARG1 t
                  :ARG3 (m / most))))

# ::snt It depends on the sauce and the result you want.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (s / sauce)
            :op2 (t / thing
                  :ARG1-of (w / want-01
                        :ARG0 (y / you)))))

# ::snt You have to do what is right for you.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (d / do-02
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (r / right-02
                        :ARG2 y))))

# ::snt Saying "thanks, I don't have any questions at the moment."
(s / say-01
      :ARG1 (a / and
            :op1 (t / thank-01
                  :ARG0 (ii / i))
            :op2 (q / question-01
                  :polarity -
                  :ARG0 ii
                  :time (m / moment))))

# ::snt It doesn't matter unless it is really far off.
(m / matter-01
      :polarity -
      :ARG1 (ii / it)
      :condition (o / off
            :polarity -
            :ARG1-of (r / real-04)
            :domain ii))

# ::snt You don't have to know.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y))

# ::snt I think you're looking for the movie
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (l / look-01
            :ARG0 (y / you)
            :ARG1 (m / movie)))

# ::snt No, it makes no difference.
(d / differ-02
      :polarity -
      :ARG1 (ii / it))

# ::snt I think it is okay to ask the question.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (o / okay-04
            :ARG1 (a / ask-01
                  :ARG1 (q / question-01))))

# ::snt I'm going to be blunt, here: You don't.
(b / blunt-02
      :ARG0 (ii / i)
      :ARG1 (d / do-02
            :polarity -
            :ARG0 (y / you))
      :location (h / here))

# ::snt Yes, you can do exactly what you want to do.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 y
                        :ARG1-of (w / want-01
                              :ARG0 y))
                  :mod (e / exact))))

# ::snt You should prime it first.
(r / recommend-01
      :ARG1 (p / prime-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :ord (o / ordinal-entity
                  :value 1))
      :ARG2 y)

# ::snt I'm afraid there's not really a lot you can do.
(f / fear-01
      :ARG0 (ii / i)
      :ARG1 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 (l / lot
                        :polarity -
                        :ARG1-of (r / real-04)))))

# ::snt What kind of floors are above?
(f / floor
      :mod (k / kind
            :mod (a / amr-unknown))
      :location (a2 / above))

# ::snt I guess it depends on the nature of your contract.
(g / guess-01
      :ARG0 (ii / i)
      :ARG1 (d / depend-01
            :ARG0 (ii2 / it)
            :ARG1 (n / nature
                  :poss (c / contract-02
                        :ARG0 (y / you)))))

# ::snt You've answered your own question already.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y)
      :time (a2 / already))

# ::snt I don't think there is any universal term.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (t2 / term
            :mod (u / universal)
            :mod (a / any)))

# ::snt There are a few minimally-effective things you can do at the personal level.
(t / thing
      :quant (f / few)
      :ARG1-of (d / do-02
            :ARG0 (y / you)
            :manner (l / level
                  :ARG1-of (p / personal-02))
            :ARG1-of (p2 / possible-01))
      :ARG0-of (e / effective-04
            :ARG1-of (m / minimal-02)))

# ::snt Something like this is useful:
(u / useful-05
      :ARG1 (s / something
            :ARG1-of (r / resemble-01
                  :ARG2 (t / this))))

# ::snt Yes, I believe it's a good idea.
(b / believe-01
      :ARG0 (ii / i)
      :ARG1 (ii2 / idea
            :ARG1-of (g / good-02)
            :domain (ii3 / it)))

# ::snt If not, don't do that and spend that time with something you like to do.
(a / and
      :op1 (d / do-02
            :polarity -
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (t / that))
      :op2 (s / spend-02
            :mode imperative
            :ARG0 y
            :ARG1 (t2 / time
                  :mod t)
            :ARG2 (s2 / something
                  :ARG1-of (d2 / do-02
                        :ARG0 y
                        :ARG1-of (l / like-02
                              :ARG0 y))))
      :condition (d3 / do-02
            :polarity -
            :ARG0 y))

# ::snt It's all about adhesion.
(c / concern-02
      :ARG1 (a / adhere-02)
      :degree (a2 / all))

# ::snt If you do not have a very strong scientific reason to do it, don't.
(d / do-02
      :polarity -
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :condition (h / have-03
            :polarity -
            :ARG0 y
            :ARG1 (r / reason
                  :ARG1-of (s / strong-02
                        :degree (v / very))
                  :mod (s2 / science)
                  :ARG0-of (c / cause-01
                        :ARG1 (d2 / do-02
                              :ARG1 ii)))))

# ::snt You have to know what you want to do.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (w / want-01
                        :ARG0 y))))

# ::snt Personally, I would say not unless it suits you.
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (h / have-condition-91
            :ARG2 (s2 / suit-01
                  :polarity -
                  :ARG1 (ii2 / it)
                  :ARG2 (y / you)))
      :ARG1-of (p / personal-02))

# ::snt Can you do it?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it)))

# ::snt I've done this many dozens of times.
(d / do-02
      :ARG0 (ii / i)
      :ARG1 (t / this)
      :frequency (m / many
            :op1 (t2 / thing
                  :quant 12)))

# ::snt You can do it, too.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (t / too)))

# ::snt How to do that?
(d / do-02
      :ARG1 (t / that)
      :manner (a / amr-unknown))

# ::snt I found some link that might be of help to you:
(f / find-01
      :ARG0 (ii / i)
      :ARG1 (l / link
            :ARG0-of (h / help-01
                  :ARG2 (y / you)
                  :ARG1-of (p / possible-01))
            :mod (s / some)))

# ::snt I would say it is impossible to know, so don't risk it.
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (p / possible-01
            :polarity -
            :ARG1 (k / know-01
                  :ARG1 (ii2 / it))
            :ARG0-of (c / cause-01
                  :ARG1 (r / risk-01
                        :polarity -
                        :mode imperative
                        :ARG0 (y / you)
                        :ARG2 ii2))))

# ::snt The answer to your question is not really.
(a / answer-01
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (r / real-04
            :polarity -))

# ::snt You don't, it will not work.
(a / and
      :op1 (d / do-02
            :polarity -
            :ARG0 (y / you))
      :op2 (w / work-09
            :polarity -
            :ARG1 (ii / it)))

# ::snt It's definitely just a matter of preference.
(m / matter
      :domain (ii / it)
      :mod (j / just)
      :mod (d / definite)
      :topic (p / prefer-01))

# ::snt It's a good idea to do both.
(ii / idea
      :ARG1-of (g / good-02)
      :domain (d / do-02
            :ARG1 (b / both)))

# ::snt This answer is based on experience I did not researched for references.
(b / base-02
      :ARG1 (a / answer-01
            :mod (t / this))
      :ARG2 (e / experience-01
            :ARG1-of (r / research-01
                  :polarity -
                  :ARG0 (ii / i)
                  :purpose (r2 / reference-04))))

# ::snt There are quite a few things you would need to do;
(t / thing
      :quant (m / many
            :degree (q / quite))
      :ARG1-of (d / do-02
            :ARG0 (y / you)
            :ARG1-of (n / need-01
                  :ARG0 y)))

# ::snt You will also want to remove the seeds.
(w / want-01
      :ARG0 (y / you)
      :ARG1 (r / remove-01
            :ARG0 y
            :ARG1 (s / seed))
      :mod (a / also))

# ::snt It depends on what you want to achieve.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG1-of (a / achieve-01
                  :ARG0 (y / you)
                  :ARG1-of (w / want-01
                        :ARG0 y))))

# ::snt There are a lot of ways that could go poorly for you.
(w / way
      :quant (l / lot)
      :ARG1-of (g / go-09
            :manner (p / poor)
            :beneficiary (y / you)
            :ARG1-of (p2 / possible-01)))

# ::snt Since you have one ticket, you don't have to worry.
(c / cause-01
      :ARG0 (h / have-03
            :ARG0 (y / you)
            :ARG1 (t / ticket
                  :quant 1))
      :ARG1 (o / obligate-01
            :polarity -
            :ARG1 y
            :ARG2 (w / worry-02
                  :ARG0 y)))

# ::snt Nepalese citizens require a visa to visit the UK.
(r / require-01
      :ARG0 (c / citizen
            :mod (c2 / country
                  :name (n / name
                        :op1 "Nepalese")))
      :ARG1 (v / visa)
      :ARG2 (v2 / visit-01
            :ARG0 c
            :ARG1 (c3 / country
                  :name (n2 / name
                        :op1 "UK"))))

# ::snt It depends on how long it's been out.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / temporal-quantity
            :duration-of (o / out-06
                  :ARG1 (ii2 / it))))

# ::snt I don't see why this could be a problem.
(s / see-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (t / thing
            :ARG0-of (c / cause-01
                  :ARG1 (p / possible-01
                        :ARG1 (p2 / problem
                              :domain (t2 / this))))))

# ::snt I really do not think there is much you can do about that.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 (m / much)
                  :ARG2 (t2 / that)))
      :ARG1-of (r / real-04))

# ::snt Yes you got it.
(g / get-01
      :ARG0 (y / you)
      :ARG1 (ii / it))

# ::snt Remember this is your degree we are talking about, its up to you what you want to do.
(r / remember-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / and
            :op1 (d / degree
                  :poss y
                  :ARG1-of (t / talk-01
                        :ARG0 (w / we))
                  :domain (t2 / this))
            :op2 (d2 / depend-01
                  :ARG0 (t3 / thing
                        :ARG1-of (d3 / do-02
                              :ARG0 y
                              :ARG1-of (w2 / want-01
                                    :ARG0 y)))
                  :ARG1 y)))

# ::snt How should you do that?
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / that)
            :manner (a / amr-unknown)))

# ::snt I am in a similar situation.
(r / resemble-01
      :ARG1 (s / situation
            :domain (ii / i)))

# ::snt What is your paper for?
(p / paper
      :poss (y / you)
      :purpose (a / amr-unknown))

# ::snt You don't need sauce at all.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (s / sauce)
      :degree (a / at-all))

# ::snt Work with your supervisor and your team to solve the problem.
(w / work-01
      :ARG0 (y / you)
      :ARG3 (s / solve-01
            :ARG0 y
            :ARG1 (p / problem)
            :ARG4 (a / and
                  :op1 (p2 / person
                        :ARG0-of (s2 / supervise-01
                              :ARG1 y))
                  :op2 (t / team
                        :poss y))))

# ::snt It's up to you what you want to do next.
(r / responsible-03
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG1-of (d / do-02
                  :ARG0 y
                  :time (n / next)
                  :ARG1-of (w / want-01
                        :ARG0 y))))

# ::snt A couple things to consider:
(t / thing
      :quant (c / couple)
      :ARG1-of (c2 / consider-02))

# ::snt It depends on your company.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (c / company
            :poss (y / you)))

# ::snt It's just worn out and not safe.
(a / and
      :op1 (w / wear-out-03
            :ARG1 (ii / it)
            :mod (j / just))
      :op2 (s / safe-01
            :polarity -
            :ARG0 ii))

# ::snt I wouldn't put this job on my resume.
(p / put-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (j / job
            :mod (t / this))
      :ARG2 (r / resume
            :poss ii))

# ::snt This is a difficult one.
(d / difficult
      :domain (t / this))

# ::snt To directly answer the two questions in your title.
(a / answer-01
      :ARG1 (q / question
            :quant 2
            :location (t / title
                  :poss (y / you)))
      :ARG1-of (d / direct-02))

# ::snt Valid reasons to feel the way you do, but not a reason to resign.
(h / have-concession-91
      :ARG1 (r / reason
            :ARG1-of (v / valid-02)
            :ARG0-of (c / cause-01
                  :ARG1 (f / feel-01
                        :ARG0 (y / you)
                        :manner (w / way
                              :manner-of (f2 / feel-01
                                    :ARG0 y)))))
      :ARG2 (r2 / reason
            :polarity -
            :ARG0-of (c2 / cause-01
                  :ARG1 (r3 / resign-01
                        :ARG0 y))))

# ::snt It depends on how the term is used I think.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :manner-of (u / use-01
                  :ARG1 (t2 / term)))
      :ARG1-of (t3 / think-01
            :ARG0 (ii2 / i)))

# ::snt So, CAN you do this?
(p / possible-01
      :polarity (a / amr-unknown)
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / this)))

# ::snt I don't think there is an answer for this.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (a / answer-01
            :ARG1 (t2 / this)))

# ::snt There are a couple things you can try.
(p / possible-01
      :ARG1 (t / try-01
            :ARG0 (y / you)
            :ARG1 (t2 / thing
                  :quant (c / couple))))

# ::snt You may want it, but the process given to you is what you have to work within.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (ii / it)))
      :ARG2 (t / thing
            :domain (p2 / process-02
                  :ARG1-of (g / give-01
                        :ARG2 y))
            :ARG1-of (w2 / work-01
                  :ARG0 y
                  :ARG2-of (o / obligate-01))))

# ::snt You don't have equipments/facilities to do research in B.
(h / have-03
      :polarity -
      :ARG0 (y / you)
      :ARG1 (s / slash
            :op1 (e / equip-01)
            :op2 (f / facility))
      :purpose (r / research-01
            :ARG0 y
            :ARG1 (t / thing
                  :name (n / name
                        :op1 "B"))))

# ::snt You've pretty much answered your own question.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y)
      :degree (p / pretty-much))

# ::snt There are a few things I don't understand:
(t / thing
      :quant (f / few)
      :ARG1-of (u / understand-01
            :polarity -
            :ARG0 (ii / i)))

# ::snt The more you sweat, the faster you will burn calories and fat.
(c / correlate-91
      :ARG1 (m / more
            :ARG3-of (h / have-quant-91
                  :ARG1 (s / sweat-01
                        :ARG0 (y / you))))
      :ARG2 (m2 / more
            :ARG3-of (h2 / have-degree-91
                  :ARG1 (b / burn-01
                        :ARG0 y
                        :ARG1 (a / and
                              :op1 (c2 / calorie)
                              :op2 (f / fat)))
                  :ARG2 (f2 / fast-02))))

# ::snt It depends on what you want to say/imply.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (s / slash
            :op1 (t / thing
                  :ARG1-of (s2 / say-01
                        :ARG0 (y / you)
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (t2 / thing
                  :ARG1-of (ii2 / intend-01
                        :ARG0 y))))

# ::snt You've got it right.
(g / get-02
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :ARG2-of (r / right-06))

# ::snt You pretty much answered your own question.
(a / answer-01
      :ARG0 (y / you)
      :ARG1 (q / question-01
            :ARG0 y)
      :degree (p / pretty-much))

# ::snt I had the same problem as you.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01
                  :ARG2 (p2 / problem
                        :poss (y / you)))))

# ::snt Yes, there is a reason for it.
(r / reason
      :purpose (ii / it))

# ::snt Yes, although they can be a bit sour.
(h / have-concession-91
      :ARG2 (p / possible-01
            :ARG1 (s / sour-03
                  :ARG1 (t / they)
                  :degree (b / bit))))

# ::snt I would look at this way:
(l / look-01
      :ARG0 (ii / i)
      :ARG1 (w / way
            :mod (t / this)))

# ::snt You're on the right path.
(b / be-located-at-91
      :ARG1 (y / you)
      :ARG2 (p / path
            :ARG1-of (r / right-03)))

# ::snt You should, but you don't have to.
(c / contrast-01
      :ARG1 (r / recommend-01
            :ARG2 (y / you))
      :ARG2 (o / obligate-01
            :polarity -
            :ARG1 y))

# ::snt The simple answer is yes!
(a / answer-01
      :ARG2 (y / yes)
      :ARG1-of (s / simple-02))

# ::snt I don't think there are any benefits.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (b / benefit-01
            :mod (a / any)))

# ::snt It is up to you whether you want to do that.
(d / depend-01
      :ARG0 (t / truth-value
            :polarity-of (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (d2 / do-02
                        :ARG0 y
                        :ARG1 (t2 / that))))
      :ARG1 y)

# ::snt The Joker doesn't care about money.
(c / care-01
      :polarity -
      :ARG0 (p / person
            :name (n / name
                  :op1 "Joker"))
      :ARG1 (m / money))

# ::snt So I don't think you need to put it on the cover.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (n / need-01
            :ARG0 (y / you)
            :ARG1 (p / put-01
                  :ARG0 y
                  :ARG1 (ii2 / it)
                  :ARG2 (c / cover))))

# ::snt It is difficult, if not impossible, to give a complete answer to this question.
(d / difficult
      :domain (a / answer-01
            :ARG1 (t / thing
                  :ARG1-of (q / question-01)
                  :mod (t2 / this))
            :ARG1-of (c / complete-02))
      :condition (p / possible-01
            :polarity -
            :ARG1 a))

# ::snt This gives you the opportunity to make your case that you really do have expertise in XXX.
(g / give-01
      :ARG0 (t / this)
      :ARG1 (o / opportunity
            :purpose (c / case-03
                  :ARG0 (y / you)
                  :ARG1 (e / expert-01
                        :ARG1 y
                        :ARG2 (t2 / thing
                              :mod (s / sex))
                        :ARG1-of (r / real-04))))
      :ARG2 y)

# ::snt You work on it slowly.
(w / work-01
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :ARG1-of (s / slow-05))

# ::snt You do not need to worry.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (w / worry-01
            :ARG0 y))

# ::snt Yes, it is hard to publish in a peer reviewed journal.
(h / hard-02
      :ARG1 (p / publish-01
            :location (j / journal
                  :ARG1-of (r / review-01
                        :ARG0 (p2 / peer)))))

# ::snt So if that's what you need, you really do have to be explicit about it.
(ii / infer-01
      :ARG1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (e / explicit-03
                  :ARG0 y
                  :ARG1 (t / that))
            :ARG1-of (r / real-04)
            :condition (n / need-01
                  :ARG0 y
                  :ARG1 t)))

# ::snt Yes, you should make a résumé.
(r / recommend-01
      :ARG1 (m / make-05
            :ARG0 (y / you)
            :ARG1 (r2 / résumé))
      :ARG2 y)

# ::snt I think that's a great plan.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (p / plan
            :mod (g / great)
            :domain (t2 / that)))

# ::snt Other than that you don't have a tax issue.
(h / have-03
      :polarity -
      :ARG0 (y / you)
      :ARG1 (ii / issue-02
            :ARG0 (t / tax-01))
      :ARG2-of (e / except-01
            :ARG1 (t2 / that)))

# ::snt There's no rule against it.
(r / rule-01
      :polarity -
      :ARG3 (ii / it))

# ::snt What are you goals?
(g / goal
      :poss (y / you)
      :domain (a / amr-unknown))

# ::snt I'm going to be very direct here.
(d / direct-02
      :ARG0 (ii / i)
      :location (h / here)
      :degree (v / very))

# ::snt You do not need a transit visa, but to enter Zurich you will need a visa.
(c / contrast-01
      :ARG1 (n / need-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (v / visa
                  :mod (t / transit)))
      :ARG2 (n2 / need-01
            :ARG0 y
            :ARG1 (v2 / visa)
            :purpose (e / enter-01
                  :ARG0 y
                  :ARG1 (c2 / city
                        :name (n3 / name
                              :op1 "Zurich")))))

# ::snt A few things to think about:
(t / thing
      :quant (f / few)
      :ARG1-of (t2 / think-01))

# ::snt You don't have to know.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (k / know-01
            :ARG0 y))

# ::snt I think this is one of those things where you are just out of luck.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (ii2 / include-91
            :ARG1 (t2 / this)
            :ARG2 (t3 / thing
                  :mod (t4 / that)
                  :location-of (o / out-03
                        :ARG1 (y / you)
                        :ARG2 (l / luck)
                        :mod (j / just)))))

# ::snt Point is: know what you want and don't be afraid to ask for it.
(p / point-04
      :ARG1 (a / and
            :op1 (k / know-01
                  :ARG0 (y / you)
                  :ARG1 (t / thing
                        :ARG1-of (w / want-01
                              :ARG0 y)))
            :op2 (f / fear-01
                  :polarity -
                  :ARG0 y
                  :ARG1 (a2 / ask-02
                        :ARG0 y
                        :ARG1 t))))

# ::snt This varies by institution.
(v / vary-01
      :ARG1 (t / this)
      :ARG2 (ii / institution))

# ::snt I have the same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01)))

# ::snt I have the exact same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01
                  :degree (e / exact))))

# ::snt You're right on about the sample definition.
(o / on-01
      :ARG1 (y / you)
      :ARG2 (d / define-01
            :ARG1 (s / sample))
      :mod (r / right))

# ::snt Nope that will not work.
(w / work-09
      :polarity -
      :ARG1 (t / that))

# ::snt The best thing you can do is find something else interesting to do while you wait on hold.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (f / find-01
                  :ARG0 y
                  :ARG1 (s / something
                        :mod (e / else)
                        :ARG2-of (ii / interest-01)
                        :ARG1-of (d2 / do-02
                              :time (w / wait-01
                                    :ARG1 y
                                    :manner (h / hold-01
                                          :ARG1 y)))))
            :ARG1-of (g / good-02
                  :ARG2-of (h2 / have-degree-91
                        :ARG1 d
                        :ARG3 (m / most)))))

# ::snt It's mostly a matter of taste.
(m / matter
      :domain (ii / it)
      :topic (t / taste)
      :mod (m2 / most))

# ::snt Personally when I was in a similar situation I sent the couple a card and a gift.
(s / send-01
      :ARG0 (ii / i)
      :ARG1 (a / and
            :op1 (c / card)
            :op2 (g / gift))
      :ARG2 (c2 / couple)
      :ARG1-of (p / personal-02)
      :time (r / resemble-01
            :ARG1 ii
            :ARG2 (s2 / situation)))

# ::snt Yes, you can do it.
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (ii / it)))

# ::snt You have to find out what works for you.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (f / find-out-03
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (w / work-09
                        :ARG2 y))))

# ::snt It depends on how it's used.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :manner-of (u / use-01
                  :ARG1 (ii2 / it))))

# ::snt I have just had the same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01))
      :mod (j / just))

# ::snt They just don't want you to know it.
(w / want-01
      :polarity -
      :ARG0 (t / they)
      :ARG1 (k / know-01
            :ARG0 (y / you)
            :ARG1 (ii / it))
      :mod (j / just))

# ::snt It is important to keep the story in the scope of your limit.
(ii / important-01
      :ARG1 (k / keep-02
            :ARG1 (s / story)
            :location (s2 / scope
                  :poss (l / limit
                        :poss (y / you)))))

# ::snt I think it's a bad idea.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (ii2 / idea
            :ARG1-of (b / bad-07)
            :domain (ii3 / it)))

# ::snt No, it's not a good thing.
(t / thing
      :polarity -
      :ARG1-of (g / good-02))

# ::snt I think it's a bad idea.
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (ii2 / idea
            :ARG1-of (b / bad-07)
            :domain (ii3 / it)))

# ::snt You need to pick how and where you want to place your foot and do it.
(n / need-01
      :ARG0 (y / you
            :part (f / foot))
      :ARG1 (a / and
            :op1 (p / pick-01
                  :ARG0 y
                  :ARG1 (a2 / and
                        :op1 (t / thing
                              :manner-of (p2 / place-01
                                    :ARG0 y
                                    :ARG1 f
                                    :ARG1-of (w / want-01
                                          :ARG0 y)))
                        :op2 (t2 / thing
                              :location-of p2)))
            :op2 (d / do-02
                  :ARG0 y
                  :ARG1 a2)))

# ::snt This is a big problem.
(p / problem
      :mod (b / big)
      :domain (t / this))

# ::snt If the conversation is not about work, you know what the answer is to your own question.
(k / know-01
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (a / answer-01
                  :ARG1 (q / question-01
                        :ARG0 y)))
      :condition (c / concern-02
            :polarity -
            :ARG0 (c2 / converse-01)
            :ARG1 (w / work-01)))

# ::snt This cannot be answered in general.
(p / possible-01
      :polarity -
      :ARG1 (a / answer-01
            :ARG1 (t / this)
            :ARG1-of (g / general-02)))

# ::snt I would recommend looking at The Motley Fool.
(r / recommend-01
      :ARG0 (ii / i)
      :ARG1 (l / look-01
            :ARG1 (p / publication
                  :name (n / name
                        :op1 "The"
                        :op2 "Motley"
                        :op3 " Fool"))))

# ::snt I don't think there is a single definition.
(t / think-01
      :polarity -
      :ARG0 (ii / i)
      :ARG1 (d / define-01
            :ARG1-of (s / single-02)))

# ::snt Not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -))

# ::snt You don't have to worry.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (w / worry-01
            :ARG0 y))

# ::snt You're probably going to have to read various blogs to get all the information you want.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (r / read-01
            :ARG0 y
            :ARG1 (b / blog
                  :mod (v / various))
            :purpose (g / get-01
                  :ARG0 y
                  :ARG1 (ii / information
                        :mod (a / all)
                        :ARG1-of (w / want-01
                              :ARG0 y))))
      :mod (p / probable))

# ::snt I have exactly the same problem.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :ARG1-of (s / same-01
                  :mod (e / exact))))

# ::snt The answer to your question is not really.
(a / answer-01
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (r / real-04
            :polarity -))

# ::snt You should never do it.
(r / recommend-01
      :ARG1 (d / do-02
            :polarity -
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :time (e / ever))
      :ARG2 y)

# ::snt I had the same issue.
(ii / issue-02
      :ARG1 (ii2 / i)
      :ARG1-of (s / same-01))

# ::snt Is this the kind of thing you're looking for ?
(l / look-01
      :ARG0 (y / you)
      :ARG1 (t / thing
            :mod (k / kind
                  :mod (t2 / this)))
      :polarity (a / amr-unknown))

# ::snt I think there are two important things to consider:
(t / think-01
      :ARG0 (ii / i)
      :ARG1 (t2 / thing
            :quant 2
            :ARG1-of (ii2 / important-01)
            :ARG1-of (c / consider-02)))

# ::snt It is up to you.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (y / you))

# ::snt There are a few things you need to consider:
(t / thing
      :quant (f / few)
      :ARG1-of (c / consider-02
            :ARG0 (y / you)
            :ARG1-of (n / need-01
                  :ARG0 y)))

# ::snt The answer to both questions is: Yes.
(a / answer-01
      :ARG1 (q / question-01
            :mod (b / both))
      :ARG2 (y / yes))

# ::snt This is a part answer to your question
(a / answer-01
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (t / this)
      :mod (p / part))

# ::snt There are a few things I think you should do.
(r / recommend-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :quant (f / few)))
      :ARG2 y
      :ARG1-of (t2 / think-01
            :ARG0 (ii / i)))

# ::snt It depends on what and where you are going to do.
(d / depend-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (y / you)))
            :op2 (l / location
                  :location-of d2)))

# ::snt There are a few reasons that paint wrinkles.
(c / cause-01
      :ARG0 (r / reason
            :quant (f / few))
      :ARG1 (p / paint-03
            :ARG1 (w / wrinkle-01)))

# ::snt There are only three options:
(o / option
      :quant 3
      :mod (o2 / only))

# ::snt Think of it this way.
(t / think-01
      :ARG1 (ii / it)
      :manner (w / way
            :mod (t2 / this)))

# ::snt Maybe this can work for you.
(p / possible-01
      :ARG1 (w / work-09
            :ARG1 (t / this)
            :ARG2 (y / you))
      :ARG1-of p)

# ::snt They can, but the way to do it depends on what you have available.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (t / they))
      :ARG2 (d / depend-01
            :ARG0 (w / way
                  :manner-of (d2 / do-02
                        :ARG1 (ii / it)))
            :ARG1 (t2 / thing
                  :ARG2-of (a / available-02
                        :ARG1 (y / you)))))

# ::snt Your best bet is research.
(b / bet-01
      :ARG0 (y / you)
      :ARG2 (r / research-01)
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 b)
            :ARG3 (m / most)))

# ::snt This will depend on the university.
(d / depend-01
      :ARG0 (t / this)
      :ARG1 (u / university))

# ::snt It's not just a good idea, it's an excellent idea.
(c / contrast-01
      :ARG1 (ii / idea
            :ARG1-of (g / good-02)
            :domain (ii2 / it)
            :mod (j / just
                  :polarity -))
      :ARG2 (ii3 / idea
            :ARG1-of (e / excellent-02)
            :domain ii2))

# ::snt There are a few minimally-effective things you can do at the personal level.
(t / thing
      :quant (f / few)
      :ARG1-of (d / do-02
            :ARG0 (y / you)
            :manner (l / level
                  :ARG1-of (p / personal-02))
            :ARG1-of (p2 / possible-01))
      :ARG0-of (e / effective-04
            :ARG1-of (m / minimal-02)))

# ::snt I had this same situation.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (s / situation
            :ARG1-of (s2 / same-01)
            :mod (t / this)))

# ::snt Not a good idea.
(ii / idea
      :ARG1-of (g / good-02
            :polarity -))

# ::snt Yes, there is a chemical difference.
(d / differ-02
      :mod (c / chemical))

# ::snt To my knowledge, there's no time requirement.
(k / know-01
      :ARG0 (ii / i)
      :ARG1 (r / require-01
            :polarity -
            :ARG1 (t / time)))

# ::snt You don't have to do anything to season it.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (d / do-02
            :ARG0 y
            :ARG1 (a / anything)
            :purpose (s / season-01
                  :ARG0 y
                  :ARG1 (ii / it))))

# ::snt There is no code telling you that you cannot do this.
(t / tell-01
      :polarity -
      :ARG0 (c / code)
      :ARG1 (p / possible-01
            :polarity -
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 (t2 / this)))
      :ARG2 y)

# ::snt Yes, you should talk to your professor.
(r / recommend-01
      :ARG1 (t / talk-01
            :ARG0 (y / you)
            :ARG1 (p / professor
                  :poss y))
      :ARG2 y)

# ::snt You don't need sauce at all.
(n / need-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (s / sauce)
      :degree (a / at-all))

# ::snt I had this problem before.
(h / have-03
      :ARG0 (ii / i)
      :ARG1 (p / problem
            :mod (t / this))
      :time (b / before))

# ::snt You have to find out what works for you.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (f / find-out-03
            :ARG0 y
            :ARG1 (t / thing
                  :ARG1-of (w / work-09
                        :ARG2 y))))

# ::snt This is a part answer to your question
(a / answer-01
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG2 (t / this)
      :mod (p / part))

# ::snt It really isn't your problem how they are going to find a qualified person to do the job.
(p / problem
      :polarity -
      :poss (y / you)
      :domain (t / thing
            :manner-of (f / find-01
                  :ARG0 (t2 / they)
                  :ARG1 (p2 / person
                        :ARG1-of (q / qualify-02))
                  :purpose (d / do-02
                        :ARG0 p2
                        :ARG1 (j / job))))
      :ARG1-of (r / real-04))

# ::snt Not a real answer to your question, but maybe it helps.
(a / answer-01
      :polarity -
      :ARG1 (q / question-01
            :ARG0 (y / you))
      :ARG1-of (r / real-04)
      :concession-of (p / possible-01
            :ARG1 (h / help-01
                  :ARG0 (ii / it))))

# ::snt There are two options for you -
(o / option
      :quant 2
      :prep-for (y / you))

# ::snt I agree with the previous comments.
(a / agree-01
      :ARG0 (ii / i)
      :ARG1 (c / comment-01
            :time (p / previous)))

# ::snt If the answer to any of these questions is yes, a PhD may be worthwhile for you.
(p / possible-01
      :ARG1 (w / worthwhile
            :beneficiary (y / you)
            :domain (d / doctorate
                  :mod (p2 / philosophy)))
      :condition (a / answer-01
            :ARG1 (q / question-01
                  :mod (a2 / any)
                  :mod (t / this))
            :ARG2 (y2 / yes)))

# ::snt That depends on which country you are in.
(d / depend-01
      :ARG0 (t / that)
      :ARG1 (c / country
            :location-of (y / you)))

# ::snt This is a bad idea.
(ii / idea
      :ARG1-of (b / bad-07)
      :domain (t / this))

